########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Interface/UI/InGame/BuildMenu/Widget_BuildMode.Widget_BuildMode_C
########################





============ BEGIN FUNCTION GetHasMultipleSplineModes ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mOwningState);
L51:           if (!mbool) goto L232;
L65:           TArray<uint8> mTArrayuint8 = this->mOwningState->GetSupportedSplineModes();
L115:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayuint8);
L174:          bool mbool1 = mint32 > 0;
L208:          bool ReturnValue = mbool1;
L227:          goto L243;
L232:          ReturnValue = false;
============ END FUNCTION GetHasMultipleSplineModes ==============





============ BEGIN FUNCTION UpdateHintVisibility ==============
L0:            Struct_KeybindingHint LocalBuildModeHint = UserDefinedStruct /Game/FactoryGame/Interface/UI/InGame/-Shared/Struct_KeybindingHint.Struct_KeybindingHint(Action_3_8CED3F9B4A70C1822B95758560DE8695 = "[object Object]", KeyBinding_5_6C26EF9041BC54531A02F2B5B7DC3464 = "[object Object]");
L137:          bool mbool = KismetSystemLibrary->IsValid(this->mOwningState);
L188:          if (!mbool) goto L522;
L202:          bool mbool1 = this->GetHasMultipleSplineModes();
L226:          bool mbool2 = this->mShouldShowBuildModesHint != mbool1;
L264:          if (!mbool2) goto L647;
L278:          mbool1 = this->GetHasMultipleSplineModes();
L302:          this->mShouldShowBuildModesHint = mbool1;
L321:          if (!this->mShouldShowBuildModesHint) goto L522;
L335:          this->CurrentBuildModeOverlay->SetVisibility(4);
L373:          KismetArrayLibrary->Array_Insert([ref] this->mBuildHints->mKeyBindingHints, [ref] LocalBuildModeHint, 4);
L450:          this->mBuildHints->SetKeybindingHints([ref] this->mBuildHints->mKeyBindingHints);
L517:          // <End Inlined EventGraph Function>;
L522:          this->CurrentBuildModeOverlay->SetVisibility(1);
L560:          bool mbool3 = KismetArrayLibrary->Array_RemoveItem([ref] this->mBuildHints->mKeyBindingHints, [ref] LocalBuildModeHint);
L642:          goto L450;
============ END FUNCTION UpdateHintVisibility ==============





============ BEGIN FUNCTION CheckHologramState ==============
L0:            ExecutionFlow.Push(L1846);
L5:            FGHologram* mFGHologram = this->mOwningState->GetHologram();
L47:           bool mbool = KismetSystemLibrary->IsValid(mFGHologram);
L98:           bool mbool1 = KismetSystemLibrary->IsValid(this->mOwningState);
L149:          bool mbool2 = mbool1 && mbool;
L187:          if (!mbool2) goto L1080;
L201:          TArray<ItemAmount> mTArrayItemAmount = this->mOwningState->GetHologramCost();
L251:          this->mCurrentHologramCost = mTArrayItemAmount;
L278:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L337:          int32 mint321 = KismetArrayLibrary->Array_Length([ref] this->mPrevHologramCost);
L396:          bool mbool3 = mint32 != mint321;
L434:          FGHologram* mFGHologram1 = this->mOwningState->GetHologram();
L476:          bool mbool4 = this->mSetupCostHologram != mFGHologram1;
L514:          bool mbool5 = KismetSystemLibrary->IsValid(mFGHologram1);
L565:          bool mbool6 = mbool4 && mbool5;
L603:          bool mbool7 = mbool6 || mbool3;
L641:          this->mRebuildHologramCosts = mbool7;
L660:          mint32 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L719:          mint321 = KismetArrayLibrary->Array_Length([ref] this->mPrevHologramCost);
L778:          mbool3 = mint32 != mint321;
L816:          mFGHologram1 = this->mOwningState->GetHologram();
L858:          mbool4 = this->mSetupCostHologram != mFGHologram1;
L896:          mbool5 = KismetSystemLibrary->IsValid(mFGHologram1);
L947:          mbool6 = mbool4 && mbool5;
L985:          mbool7 = mbool6 || mbool3;
L1023:         bool mShouldUpdate = mbool7;
L1042:         if (!mShouldUpdate) goto L1282;
L1056:         bool ReturnValue = mShouldUpdate;
L1075:         goto L1846;
L1080:         int32 mint322 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L1139:         bool mbool8 = mint322 > 0;
L1173:         if (!mbool8) goto L1255;
L1187:         KismetArrayLibrary->Array_Clear([ref] this->mCurrentHologramCost);
L1228:         this->mRebuildHologramCosts = true;
L1239:         mShouldUpdate = true;
L1250:         goto L1056;
L1255:         this->mRebuildHologramCosts = false;
L1266:         mShouldUpdate = false;
L1277:         goto L1056;
L1282:         int32 Temp_int_Variable = 0;
L1305:         int32 mint323 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L1364:         int32 mint324 = mint323 - 1;
L1406:         bool mbool9 = Temp_int_Variable <= mint324;
L1444:         if (!mbool9) goto L1056;
L1458:         ExecutionFlow.Push(L1772);
L1463:         bool mbool10 = KismetArrayLibrary->Array_IsValidIndex([ref] this->mPrevHologramCost, Temp_int_Variable);
L1523:         if (!mbool10) goto L1749;
L1537:         bool mbool11 = this->mCurrentHologramCost[Temp_int_Variable].amount != this->mPrevHologramCost[Temp_int_Variable].amount;
L1613:         bool mbool12 = this->mCurrentHologramCost[Temp_int_Variable].ItemClass != this->mPrevHologramCost[Temp_int_Variable].ItemClass;
L1689:         bool mbool13 = mbool12 || mbool11;
L1727:         if (!mbool13) goto ExecutionFlow.Pop();
L1737:         mShouldUpdate = true;
L1748:         goto ExecutionFlow.Pop();
L1749:         mShouldUpdate = true;
L1760:         this->mRebuildHologramCosts = true;
L1771:         goto ExecutionFlow.Pop();
L1772:         int32 mint325 = Temp_int_Variable + 1;
L1814:         Temp_int_Variable = mint325;
L1841:         goto L1305;
============ END FUNCTION CheckHologramState ==============





============ BEGIN FUNCTION GetBuildDisqualifiersVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mSetupCostHologram);
L51:           if (!mbool) goto L242;
L65:           uint8 Temp_byte_Variable = 2;
L85:           uint8 Temp_byte_Variable1 = 0;
L105:          bool mbool1 = this->mSetupCostHologram->CanConstruct();
L147:          bool Temp_bool_Variable = mbool1;
L166:          uint8 ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
};
L237:          goto L262;
L242:          ReturnValue = 2;
============ END FUNCTION GetBuildDisqualifiersVisibility ==============





============ BEGIN FUNCTION GetBuildDisqualifiersText ==============
L0:            ExecutionFlow.Push(L1534);
L5:            bool mbool = KismetSystemLibrary->IsValid(this->mSetupCostHologram);
L56:           if (!mbool) goto L1403;
L70:           TArray<TSubclassOf<FGConstructDisqualifier>> mTArrayTSubclassOfFGConstructDisqualifier = [];
L81:           this->mSetupCostHologram->GetConstructDisqualifiers([ref] mTArrayTSubclassOfFGConstructDisqualifier);
L122:          TArray<TSubclassOf<FGConstructDisqualifier>> constructDisqualifiers = mTArrayTSubclassOfFGConstructDisqualifier;
L149:          int32 Temp_int_Loop_Counter_Variable = 0;
L172:          int32 Temp_int_Array_Index_Variable = 0;
L195:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] constructDisqualifiers);
L254:          bool mbool1 = Temp_int_Loop_Counter_Variable < mint32;
L292:          if (!mbool1) goto L1428;
L306:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L333:          ExecutionFlow.Push(L1460);
L338:          KismetArrayLibrary->Array_Get([ref] constructDisqualifiers, Temp_int_Array_Index_Variable, [ref] mTSubclassOfFGConstructDisqualifier);
L397:          FText mFText = FGConstructDisqualifier->GetDisqualifyingText(mTSubclassOfFGConstructDisqualifier);
L456:          mFormatArgumentData.ArgumentName = "0";
L486:          mFormatArgumentData.ArgumentValueType = 4;
L515:          mFormatArgumentData.ArgumentValue = mFText;
L551:          mFormatArgumentData.ArgumentValueInt = 0;
L583:          mFormatArgumentData.ArgumentValueFloat = 0;
L615:          mFormatArgumentData.ArgumentValueGender = 0;
L644:          TArray<FormatArgumentData> mTArrayFormatArgumentData = [mFormatArgumentData];
L664:          FText mFText1 = KismetTextLibrary->Format("[object Object]", mTArrayFormatArgumentData);
L766:          mFormatArgumentData1.ArgumentName = "1";
L796:          mFormatArgumentData1.ArgumentValueType = 4;
L825:          mFormatArgumentData1.ArgumentValue = mFText1;
L861:          mFormatArgumentData1.ArgumentValueInt = 0;
L893:          mFormatArgumentData1.ArgumentValueFloat = 0;
L925:          mFormatArgumentData1.ArgumentValueGender = 0;
L954:          bool mbool2 = Temp_int_Array_Index_Variable > 0;
L988:          mFormatArgumentData2.ArgumentName = "0";
L1018:         mFormatArgumentData2.ArgumentValueType = 4;
L1047:         mFormatArgumentData2.ArgumentValue = finalText;
L1083:         mFormatArgumentData2.ArgumentValueInt = 0;
L1115:         mFormatArgumentData2.ArgumentValueFloat = 0;
L1147:         mFormatArgumentData2.ArgumentValueGender = 0;
L1176:         bool Temp_bool_Variable = mbool2;
L1195:         TArray<FormatArgumentData> mTArrayFormatArgumentData1 = [mFormatArgumentData2, mFormatArgumentData1];
L1224:         FText mFText2 = KismetTextLibrary->Format("[object Object]", mTArrayFormatArgumentData1);
L1331:         FText finalText = switch (Temp_bool_Variable) {
case false -> mFText1;
case true -> mFText2;
default -> mFText3;
};
L1402:         goto ExecutionFlow.Pop();
L1403:         FText ReturnValue = ;
L1423:         goto L1534;
L1428:         ReturnValue = finalText;
L1455:         goto L1534;
L1460:         int32 mint321 = Temp_int_Loop_Counter_Variable + 1;
L1502:         Temp_int_Loop_Counter_Variable = mint321;
L1529:         goto L195;
============ END FUNCTION GetBuildDisqualifiersText ==============





============ BEGIN FUNCTION UpdateCost ==============
L0:            ExecutionFlow.Push(L1759);
L5:            if (!this->mRebuildHologramCosts) goto L69;
L19:           this->VerticalBox_1->ClearChildren();
L55:           this->CreateCostSlots();
L69:           int32 Temp_int_Loop_Counter_Variable = 0;
L92:           int32 Temp_int_Array_Index_Variable = 0;
L115:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L174:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L212:          if (!mbool) goto ExecutionFlow.Pop();
L222:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L249:          ExecutionFlow.Push(L1685);
L254:          int32 mint321 = KismetArrayLibrary->Array_Length([ref] this->mCostSlots);
L313:          bool mbool1 = Temp_int_Array_Index_Variable < mint321;
L351:          if (!mbool1) goto ExecutionFlow.Pop();
L361:          KismetArrayLibrary->Array_Get([ref] this->mCurrentHologramCost, Temp_int_Array_Index_Variable, [ref] mItemAmount);
L420:          ItemAmount localCost = mItemAmount;
L447:          bool mbool2 = localCost.amount > 0;
L490:          if (!mbool2) goto ExecutionFlow.Pop();
L500:          Pawn* mPawn = this->GetOwningPlayerPawn();
L520:          HUDHelpers->GetNumItemsFromPlayerInventory(mPawn, localCost.ItemClass, this, [ref] mint322);
L593:          KismetArrayLibrary->Array_Get([ref] this->mCostSlots, Temp_int_Array_Index_Variable, [ref] mWidget_CostSlotWrapper);
L652:          mWidget_CostSlotWrapper->Setup CostIcon(nullptr, localCost, nullptr, 0, mint322, false, false, false);
L716:          mPawn = this->GetOwningPlayerPawn();
L736:          HUDHelpers->GetNumItemsFromPlayerInventory(mPawn, localCost.ItemClass, this, [ref] mint322);
L809:          bool mbool3 = mint322 == 0;
L843:          bool mbool4 = this->mRebuildHologramCosts && mbool3;
L881:          if (!mbool4) goto ExecutionFlow.Pop();
L891:          PlayerController* mPlayerController = this->GetOwningPlayer();
L915:          Widget_Build_IngredientInfo* mWidget_Build_IngredientInfo = WidgetBlueprintLibrary->Create(this, ObjectConst(WidgetBlueprintGeneratedClass /Game/FactoryGame/Interface/UI/InGame/BuildMenu/Widget_Build_IngredientInfo.Widget_Build_IngredientInfo_C), mPlayerController);
L976:          mFormatArgumentData.ArgumentName = "B";
L1006:         mFormatArgumentData.ArgumentValueType = 0;
L1035:         mFormatArgumentData.ArgumentValue = ;
L1064:         mFormatArgumentData.ArgumentValueInt = localCost.amount;
L1109:         mFormatArgumentData.ArgumentValueFloat = 0;
L1141:         mFormatArgumentData.ArgumentValueGender = 0;
L1170:         FText mFText = FGItemDescriptor->GetItemName(localCost.ItemClass);
L1238:         mFormatArgumentData1.ArgumentName = "A";
L1268:         mFormatArgumentData1.ArgumentValueType = 4;
L1297:         mFormatArgumentData1.ArgumentValue = mFText;
L1333:         mFormatArgumentData1.ArgumentValueInt = 0;
L1365:         mFormatArgumentData1.ArgumentValueFloat = 0;
L1397:         mFormatArgumentData1.ArgumentValueGender = 0;
L1426:         TArray<FormatArgumentData> mTArrayFormatArgumentData = [mFormatArgumentData1, mFormatArgumentData];
L1455:         FText mFText1 = KismetTextLibrary->Format("[object Object]", mTArrayFormatArgumentData);
L1570:         KismetSystemLibrary->SetTextPropertyByName(mWidget_Build_IngredientInfo, "mTitle", [ref] mFText1);
L1633:         PanelSlot* mPanelSlot = this->VerticalBox_1->AddChild(mWidget_Build_IngredientInfo);
L1684:         goto ExecutionFlow.Pop();
L1685:         int32 mint323 = Temp_int_Loop_Counter_Variable + 1;
L1727:         Temp_int_Loop_Counter_Variable = mint323;
L1754:         goto L115;
============ END FUNCTION UpdateCost ==============





============ BEGIN FUNCTION CreateCostSlots ==============
L0:            ExecutionFlow.Push(L852);
L5:            this->mCostSlotsGrid->ClearChildren();
L41:           KismetArrayLibrary->Array_Clear([ref] this->mCostSlots);
L82:           bool mbool = KismetSystemLibrary->IsValid(this->mOwningState);
L133:          if (!mbool) goto ExecutionFlow.Pop();
L143:          int32 Temp_int_Loop_Counter_Variable = 0;
L166:          int32 Temp_int_Array_Index_Variable = 0;
L189:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] this->mCurrentHologramCost);
L248:          bool mbool1 = Temp_int_Loop_Counter_Variable < mint32;
L286:          if (!mbool1) goto L570;
L300:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L327:          ExecutionFlow.Push(L778);
L332:          PlayerController* mPlayerController = this->GetOwningPlayer();
L356:          Widget_CostSlotWrapper* mWidget_CostSlotWrapper = WidgetBlueprintLibrary->Create(this, ObjectConst(WidgetBlueprintGeneratedClass /Game/FactoryGame/Interface/UI/InGame/Widget_CostSlotWrapper.Widget_CostSlotWrapper_C), mPlayerController);
L417:          mWidget_CostSlotWrapper->mForceEmptyAnim = true;
L450:          int32 mint321 = KismetArrayLibrary->Array_Add([ref] this->mCostSlots, [ref] mWidget_CostSlotWrapper);
L518:          WrapBoxSlot* mWrapBoxSlot = this->mCostSlotsGrid->AddChildToWrapBox(mWidget_CostSlotWrapper);
L569:          goto ExecutionFlow.Pop();
L570:          FGHologram* mFGHologram = this->mOwningState->GetHologram();
L612:          this->mSetupCostHologram = mFGHologram;
L631:          TSubclassOf<FGItemDescriptor> mTSubclassOfFGItemDescriptor = this->mOwningState->GetDescriptor();
L673:          FText mFText = FGItemDescriptor->GetItemName(mTSubclassOfFGItemDescriptor);
L732:          this->mBuildingName->SetText(mFText);
L777:          goto ExecutionFlow.Pop();
L778:          int32 mint322 = Temp_int_Loop_Counter_Variable + 1;
L820:          Temp_int_Loop_Counter_Variable = mint322;
L847:          goto L189;
============ END FUNCTION CreateCostSlots ==============





============ BEGIN FUNCTION GetTextColor ==============
L0:            HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor, [ref] mLinearColor);
L55:           SlateColor ReturnValue = mSlateColor;
============ END FUNCTION GetTextColor ==============





============ BEGIN FUNCTION OnEscapePressed ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: OnEscapePressed;
L0:            // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L357;
============ END FUNCTION OnEscapePressed ==============





============ BEGIN FUNCTION Construct ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: Construct;
L0:            // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L493;
============ END FUNCTION Construct ==============





============ BEGIN FUNCTION PlayDismantleAnimation ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: PlayDismantleAnimation;
L0:            // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L2167;
============ END FUNCTION PlayDismantleAnimation ==============





============ BEGIN FUNCTION StopDismantleAnimation ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: StopDismantleAnimation;
L0:            // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L2256;
============ END FUNCTION StopDismantleAnimation ==============





============ BEGIN FUNCTION OnCustomTick ==============
L18:           // EventGraph implemented function stub;
L18:           // Function Name: OnCustomTick;
L18:           // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L2318;
============ END FUNCTION OnCustomTick ==============





============ BEGIN FUNCTION PlayOnSplineModeChangedAnimation ==============
L18:           // EventGraph implemented function stub;
L18:           // Function Name: PlayOnSplineModeChangedAnimation;
L18:           // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L2585;
============ END FUNCTION PlayOnSplineModeChangedAnimation ==============





============ BEGIN FUNCTION OnRecipeSampled ==============
L18:           // EventGraph implemented function stub;
L18:           // Function Name: OnRecipeSampled;
L18:           // Implementation: Function ExecuteUbergraph_Widget_BuildMode, from label L3407;
============ END FUNCTION OnRecipeSampled ==============





============ BEGIN FUNCTION ExecuteUbergraph_Widget_BuildMode ==============
L10:           this->mCostSlotTImer = 0;
L33:           this->UpdateCost();
L47:           bool mbool = KismetSystemLibrary->IsValid(this->mOwningState);
L98:           FGHologram* mFGHologram = this->mOwningState->GetHologram();
L140:          bool mbool1 = KismetSystemLibrary->IsValid(mFGHologram);
L191:          bool mbool2 = mbool && mbool1;
L229:          if (!mbool2) goto L325;
L243:          TArray<ItemAmount> mTArrayItemAmount = this->mOwningState->GetHologramCost();
L293:          this->mPrevHologramCost = mTArrayItemAmount;
L320:          // <End Inlined EventGraph Function>;
L325:          this->mPrevHologramCost = this->mCurrentHologramCost;
L352:          // <End Inlined EventGraph Function>;
L357:          Pawn* mPawn = this->GetOwningPlayerPawn();
L377:          FGCharacterPlayer* mFGCharacterPlayer = Cast<Class /Script/FactoryGame.FGCharacterPlayer>(mPawn);
L413:          bool mbool3 = mFGCharacterPlayer;
L442:          if (!mbool3) goto L3654;
L456:          mFGCharacterPlayer->ToggleBuildGun();
L488:          // <End Inlined EventGraph Function>;
L493:          this->Construct();
L503:          FGBuildGunStateBuild* mFGBuildGunStateBuild = Cast<Class /Script/FactoryGame.FGBuildGunStateBuild>(this->mInteractObject);
L539:          bool mbool4 = mFGBuildGunStateBuild;
L568:          this->mOwningState = mFGBuildGunStateBuild;
L587:          this->CreateCostSlots();
L601:          this->UpdateHintVisibility();
L615:          uint8 Temp_byte_Variable2 = 3;
L635:          uint8 Temp_byte_Variable4 = 1;
L655:          bool Temp_bool_Variable = this->isDismantleMode;
L674:          this->mBuildHints->SetVisibility(switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable2;
case true -> Temp_byte_Variable4;
default -> muint8;
});
L763:          uint8 Temp_byte_Variable3 = 1;
L783:          uint8 Temp_byte_Variable5 = 3;
L803:          bool Temp_bool_Variable1 = this->isDismantleMode;
L822:          this->mDismantleHints->SetVisibility(switch (Temp_bool_Variable1) {
case false -> Temp_byte_Variable3;
case true -> Temp_byte_Variable5;
default -> muint81;
});
L911:          UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->DisqualifierAnim, 0, 0, 0, 0.15000000596046448);
L957:          bool mbool5 = KismetSystemLibrary->IsValid(this->mOwningState);
L1008:         if (!mbool5) goto L3654;
L1022:         mFScriptDelegate->BindUFunction(this, PlayOnSplineModeChangedAnimation);
L1045:         this->mOwningState->OnSplineModeChangedDelegate.AddUnique(mFScriptDelegate);
L1086:         FGBuildGun* mFGBuildGun = this->mOwningState->GetBuildGun();
L1128:         mFScriptDelegate1->BindUFunction(this, OnRecipeSampled);
L1151:         mFGBuildGun->mOnRecipeSampled.AddUnique(mFScriptDelegate1);
L1192:         FGHologram* mFGHologram1 = this->mOwningState->GetHologram();
L1234:         bool mbool6 = KismetSystemLibrary->IsValid(mFGHologram1);
L1285:         if (!mbool6) goto L3654;
L1299:         mFGHologram1 = this->mOwningState->GetHologram();
L1341:         uint8 muint82 = mFGHologram1->GetSplineMode();
L1391:         FText Temp_text_Variable8 = "[object Object]";
L1455:         FText Temp_text_Variable9 = "[object Object]";
L1524:         FText Temp_text_Variable10 = "[object Object]";
L1591:         FText Temp_text_Variable11 = "[object Object]";
L1671:         FText Temp_text_Variable12 = "[object Object]";
L1737:         FText Temp_text_Variable13 = "[object Object]";
L1812:         FText Temp_text_Variable14 = "[object Object]";
L1889:         FText Temp_text_Variable15 = "[object Object]";
L1954:         uint8 Temp_byte_Variable1 = muint82;
L1981:         this->mCurrentModeText->SetText(switch (Temp_byte_Variable1) {
case 0 -> Temp_text_Variable15;
case 1 -> Temp_text_Variable14;
case 2 -> Temp_text_Variable13;
case 3 -> Temp_text_Variable12;
case 4 -> Temp_text_Variable11;
case 5 -> Temp_text_Variable10;
case 6 -> Temp_text_Variable9;
case 7 -> Temp_text_Variable8;
default -> mFText;
});
L2162:         // <End Inlined EventGraph Function>;
L2167:         // <Begin Inlined EventGraph Function PlayDismantleAnimation>;
L2167:         this->mDismantleText->SetVisibility(3);
L2205:         UMGSequencePlayer* mUMGSequencePlayer1 = this->PlayAnimation(this->DismantleAnim, 0, 0, 0, 1);
L2251:         // <End Inlined EventGraph Function>;
L2256:         // <Begin Inlined EventGraph Function StopDismantleAnimation>;
L2256:         this->mDismantleText->SetVisibility(2);
L2294:         this->StopAnimation(this->DismantleAnim);
L2313:         // <End Inlined EventGraph Function>;
L2318:         bool mbool7 = KismetSystemLibrary->IsValid(this->mOwningState);
L2369:         if (!mbool7) goto L3654;
L2383:         float mfloat = this->mCostSlotTImer + mfloat1;
L2429:         this->mCostSlotTImer = mfloat;
L2456:         this->UpdateHintVisibility();
L2470:         bool mbool8 = this->CheckHologramState();
L2494:         bool mbool9 = this->mCostSlotTImer >= 1;
L2528:         bool mbool10 = mbool8 || mbool9;
L2566:         if (!mbool10) goto L47;
L2580:         goto L10;
L2585:         UMGSequencePlayer* mUMGSequencePlayer2 = this->PlayAnimation(this->FadeInSplineAnim, 0, 1, 0, 1);
L2631:         FText Temp_text_Variable = "[object Object]";
L2695:         FText Temp_text_Variable1 = "[object Object]";
L2764:         FText Temp_text_Variable2 = "[object Object]";
L2831:         FText Temp_text_Variable3 = "[object Object]";
L2911:         FText Temp_text_Variable4 = "[object Object]";
L2977:         FText Temp_text_Variable5 = "[object Object]";
L3052:         FText Temp_text_Variable6 = "[object Object]";
L3129:         FText Temp_text_Variable7 = "[object Object]";
L3194:         uint8 Temp_byte_Variable = muint83;
L3221:         this->mCurrentModeText->SetText(switch (Temp_byte_Variable) {
case 0 -> Temp_text_Variable7;
case 1 -> Temp_text_Variable6;
case 2 -> Temp_text_Variable5;
case 3 -> Temp_text_Variable4;
case 4 -> Temp_text_Variable3;
case 5 -> Temp_text_Variable2;
case 6 -> Temp_text_Variable1;
case 7 -> Temp_text_Variable;
default -> mFText1;
});
L3402:         // <End Inlined EventGraph Function>;
L3407:         FText mFText2 = FGRecipe->GetRecipeName(mTSubclassOfFGRecipe);
L3466:         FString mFString = KismetTextLibrary->Conv_TextToString([ref] mFText2);
L3525:         KismetSystemLibrary->PrintString(this, mFString, true, true, ScriptStruct /Script/CoreUObject.LinearColor(R = 0, G = 0.6600000262260437, B = 1, A = 1), 2);
L3608:         UMGSequencePlayer* mUMGSequencePlayer3 = this->PlayAnimation(this->SampleAnim, 0, 1, 0, 1);
============ END FUNCTION ExecuteUbergraph_Widget_BuildMode ==============
