########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Interface/UI/InGame/-Shared/RadialMenu/Widget_RadialMenuButton.Widget_RadialMenuButton_C
########################





============ BEGIN FUNCTION Hover Lerp ==============
L0:            float mfloat = DeltaTime / 0.20000000298023224;
L42:           float mfloat1 = mfloat + this->T;
L88:           this->T = mfloat1;
L115:          float mfloat2 = FClamp(this->T, 0, 1);
L162:          HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor, [ref] mLinearColor);
L217:          LinearColor mLinearColor1 = LinearColorLerp(ScriptStruct /Script/CoreUObject.LinearColor(R = 1, G = 1, B = 1, A = 0), mLinearColor, mfloat2);
L297:          this->Radial Material->SetVectorParameterValue("Color", mLinearColor1);
L351:          mfloat2 = FClamp(this->T, 0, 1);
L398:          float mfloat3 = Lerp(this->InsideRadius, 0.3149999976158142, mfloat2);
L449:          this->Radial Material->SetScalarParameterValue("InsideRadius", mfloat3);
L503:          mfloat2 = FClamp(this->T, 0, 1);
L550:          float mfloat4 = Lerp(this->OutsideRadius, 0.5, mfloat2);
L601:          this->Radial Material->SetScalarParameterValue("OutsideRadius", mfloat4);
L655:          if (!this->SingleButton) goto L1486;
L669:          mfloat2 = FClamp(this->T, 0, 1);
L716:          float mfloat5 = this->IconOffset + -10;
L758:          float mfloat6 = Lerp(this->IconOffset, mfloat5, mfloat2);
L813:          Vector2D mVector2D = MakeVector2D(mfloat6, 0);
L855:          this->Icon->SetRenderTranslation(mVector2D);
L896:          mfloat2 = FClamp(this->T, 0, 1);
L943:          HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor1, [ref] mLinearColor2);
L998:          HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor2, [ref] mLinearColor3);
L1053:         LinearColor mLinearColor4 = LinearColorLerp(mLinearColor2, mLinearColor3, mfloat2);
L1108:         mSlateColor3.SpecifiedColor = mLinearColor4;
L1144:         mSlateColor3.ColorUseRule = 0;
L1173:         this->IconText->SetColorAndOpacity(mSlateColor3);
L1214:         if (!this->mMonochromeIcon) goto L1481;
L1228:         mfloat2 = FClamp(this->T, 0, 1);
L1275:         HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor1, [ref] mLinearColor2);
L1330:         HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor2, [ref] mLinearColor3);
L1385:         mLinearColor4 = LinearColorLerp(mLinearColor2, mLinearColor3, mfloat2);
L1440:         this->IconImage->SetColorAndOpacity(mLinearColor4);
L1481:         // <End Inlined EventGraph Function>;
L1486:         float mfloat7 = this->startPoint + 0.006000000052154064;
L1528:         this->Radial Material->SetScalarParameterValue("startPoint", mfloat7);
L1582:         float mfloat8 = this->endPoint - 0.012000000104308128;
L1624:         this->Radial Material->SetScalarParameterValue("DegreeInPercent", mfloat8);
L1678:         goto L669;
============ END FUNCTION Hover Lerp ==============





============ BEGIN FUNCTION Get Screen Position ==============
L0:            PlayerController* mPlayerController = this->GetOwningPlayer();
L24:           Vector2D mVector2D = WidgetLayoutLibrary->GetViewportSize(this);
L75:           bool mbool = WidgetLayoutLibrary->GetMousePositionScaledByDPI(mPlayerController, [ref] mfloat, [ref] mfloat1);
L144:          Vector2D mVector2D1 = mVector2D / 2;
L186:          BreakVector2D(mVector2D1, [ref] mfloat2, [ref] mfloat3);
L223:          float mfloat4 = mfloat2 - mfloat;
L269:          float mfloat5 = mfloat3 - mfloat1;
L315:          float mfloat6 = Square(mfloat4);
L352:          float mfloat7 = Square(mfloat5);
L389:          float mfloat8 = mfloat6 + mfloat7;
L435:          float mfloat9 = Sqrt(mfloat8);
L472:          float ReturnValue = mfloat9;
============ END FUNCTION Get Screen Position ==============





============ BEGIN FUNCTION Set Angle ==============
L0:            PlayerController* mPlayerController = this->GetOwningPlayer();
L24:           BP_PlayerController* mBP_PlayerController = Cast<BlueprintGeneratedClass /Game/FactoryGame/Character/Player/BP_PlayerController.BP_PlayerController_C>(mPlayerController);
L60:           bool mbool = mBP_PlayerController;
L89:           if (!mbool) goto L1765;
L103:          bool mbool1 = mBP_PlayerController->GetIsUsingGamepad();
L145:          if (!mbool1) goto L869;
L159:          PlayerController* mPlayerController1 = this->GetOwningPlayer();
L183:          mPlayerController1->GetInputAnalogStickState(1, [ref] mfloat, [ref] mfloat1);
L235:          Vector mVector = MakeVector(mfloat, mfloat1, 0);
L286:          Rotator mRotator = MakeRotFromY([ref] mVector);
L323:          BreakRotator(mRotator, [ref] mfloat2, [ref] mfloat3, [ref] mfloat4);
L369:          float mfloat5 = mfloat2 + 90;
L411:          float mfloat6 = mfloat5 / 360;
L453:          bool mbool2 = mfloat6 < 0;
L487:          if (!mbool2) goto L1444;
L501:          mPlayerController1 = this->GetOwningPlayer();
L525:          mPlayerController1->GetInputAnalogStickState(1, [ref] mfloat, [ref] mfloat1);
L577:          mVector = MakeVector(mfloat, mfloat1, 0);
L628:          mRotator = MakeRotFromY([ref] mVector);
L665:          BreakRotator(mRotator, [ref] mfloat2, [ref] mfloat3, [ref] mfloat4);
L711:          mfloat5 = mfloat2 + 90;
L753:          mfloat6 = mfloat5 / 360;
L795:          float mfloat7 = 1 + mfloat6;
L837:          this->Angle = mfloat7;
L864:          // <End Inlined EventGraph Function>;
L869:          PlayerController* mPlayerController2 = this->GetOwningPlayer();
L893:          bool mbool3 = WidgetLayoutLibrary->GetMousePositionScaledByDPI(mPlayerController2, [ref] mfloat8, [ref] mfloat9);
L962:          Vector mVector1 = MakeVector(mfloat8, mfloat9, 0);
L1013:         Vector2D mVector2D = WidgetLayoutLibrary->GetViewportSize(this);
L1064:         Vector2D mVector2D1 = mVector2D / 2;
L1106:         BreakVector2D(mVector2D1, [ref] mfloat10, [ref] mfloat11);
L1143:         Vector mVector2 = MakeVector(mfloat10, mfloat11, 0);
L1194:         Rotator mRotator1 = FindLookAtRotation([ref] mVector2, [ref] mVector1);
L1240:         BreakRotator(mRotator1, [ref] mfloat12, [ref] mfloat13, [ref] mfloat14);
L1286:         float mfloat15 = mfloat14 + 180;
L1328:         float mfloat16 = mfloat15 / 360;
L1370:         float mfloat17 = 1 - mfloat16;
L1412:         this->Angle = mfloat17;
L1439:         // <End Inlined EventGraph Function>;
L1444:         mPlayerController1 = this->GetOwningPlayer();
L1468:         mPlayerController1->GetInputAnalogStickState(1, [ref] mfloat, [ref] mfloat1);
L1520:         mVector = MakeVector(mfloat, mfloat1, 0);
L1571:         mRotator = MakeRotFromY([ref] mVector);
L1608:         BreakRotator(mRotator, [ref] mfloat2, [ref] mfloat3, [ref] mfloat4);
L1654:         mfloat5 = mfloat2 + 90;
L1696:         mfloat6 = mfloat5 / 360;
L1738:         this->Angle = mfloat6;
============ END FUNCTION Set Angle ==============





============ BEGIN FUNCTION Construct ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: Construct;
L0:            // Implementation: Function ExecuteUbergraph_Widget_RadialMenuButton, from label L1315;
============ END FUNCTION Construct ==============





============ BEGIN FUNCTION Create Style ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: Create Style;
L0:            // Implementation: Function ExecuteUbergraph_Widget_RadialMenuButton, from label L2196;
============ END FUNCTION Create Style ==============





============ BEGIN FUNCTION Set Icon Position ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: Set Icon Position;
L0:            // Implementation: Function ExecuteUbergraph_Widget_RadialMenuButton, from label L2229;
============ END FUNCTION Set Icon Position ==============





============ BEGIN FUNCTION Tick ==============
L36:           // EventGraph implemented function stub;
L36:           // Function Name: Tick;
L36:           // Implementation: Function ExecuteUbergraph_Widget_RadialMenuButton, from label L3550;
============ END FUNCTION Tick ==============





============ BEGIN FUNCTION ExecuteUbergraph_Widget_RadialMenuButton ==============
L10:           MaterialInstanceDynamic* mMaterialInstanceDynamic = KismetMaterialLibrary->CreateDynamicMaterialInstance(this, ObjectConst(MaterialInstanceConstant /Game/FactoryGame/Interface/UI/InGame/-Shared/RadialMenu/Radial_Material_Inst.Radial_Material_Inst), "None");
L75:           this->Radial Material = mMaterialInstanceDynamic;
L94:           this->Radial Material->SetScalarParameterValue("startPoint", this->startPoint);
L148:          this->Radial Material->SetScalarParameterValue("DegreeInPercent", this->endPoint);
L202:          mSlateColor.SpecifiedColor = ScriptStruct /Script/CoreUObject.LinearColor(R = 1, G = 1, B = 1, A = 1);
L263:          mSlateColor.ColorUseRule = 0;
L292:          mSlateBrush.ImageSize = ScriptStruct /Script/CoreUObject.Vector2D(X = 750, Y = 750);
L343:          mSlateBrush.Margin = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0);
L404:          mSlateBrush.TintColor = mSlateColor;
L440:          mSlateBrush.ResourceObject = this->Radial Material;
L468:          mButtonStyle.Normal = mSlateBrush;
L504:          mButtonStyle.Hovered = mSlateBrush;
L540:          mButtonStyle.Pressed = mSlateBrush;
L576:          mButtonStyle.Disabled = ScriptStruct /Script/SlateCore.SlateBrush(ImageSize = ScriptStruct /Script/CoreUObject.Vector2D(X = 0, Y = 0), Margin = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0), TintColor = ScriptStruct /Script/SlateCore.SlateColor(SpecifiedColor = ScriptStruct /Script/CoreUObject.LinearColor(R = 1, G = 1, B = 1, A = 1), ColorUseRule = 0), ResourceObject = nullptr, ResourceName = "None", UVRegion = ScriptStruct /Script/CoreUObject.Box2D(Min = ScriptStruct /Script/CoreUObject.Vector2D(X = 0, Y = 0), Max = ScriptStruct /Script/CoreUObject.Vector2D(X = 0, Y = 0), bIsValid = 0), DrawAs = 0, Tiling = 0, Mirroring = 0, ImageType = 0, bIsDynamicallyLoaded = false, bHasUObject = false);
L813:          mButtonStyle.NormalPadding = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0);
L874:          mButtonStyle.PressedPadding = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0);
L935:          mButtonStyle.PressedSlateSound = ScriptStruct /Script/SlateCore.SlateSound(ResourceObject = nullptr);
L977:          mButtonStyle.HoveredSlateSound = ScriptStruct /Script/SlateCore.SlateSound(ResourceObject = nullptr);
L1019:         this->Button_0->SetStyle([ref] mButtonStyle);
L1060:         Vector2D mVector2D = MakeVector2D(this->IconOffset, 0);
L1102:         this->Icon->SetRenderTranslation(mVector2D);
L1143:         // <End Inlined EventGraph Function>;
L1148:         this->Radial Material->SetVectorParameterValue("Color", ScriptStruct /Script/CoreUObject.LinearColor(R = 1, G = 1, B = 1, A = 0));
L1227:         Vector2D mVector2D1 = MakeVector2D(this->IconOffset, 0);
L1269:         this->Icon->SetRenderTranslation(mVector2D1);
L1310:         // <End Inlined EventGraph Function>;
L1315:         // <Begin Inlined EventGraph Function Construct>;
L1315:         this->Create Style();
L1329:         float mfloat = this->Radial Material->K2_GetScalarParameterValue("InsideRadius");
L1392:         this->InsideRadius = mfloat;
L1419:         float mfloat1 = this->Radial Material->K2_GetScalarParameterValue("OutsideRadius");
L1482:         this->OutsideRadius = mfloat1;
L1509:         this->Set Icon Position();
L1523:         uint8 Temp_byte_Variable = 0;
L1543:         uint8 Temp_byte_Variable1 = 1;
L1563:         bool mbool = KismetSystemLibrary->IsValid(this->mInputTextureIcon);
L1614:         bool Temp_bool_Variable = mbool;
L1633:         this->IconImage->SetVisibility(switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
});
L1722:         mSlateBrush1.ImageSize = this->IconImage->Brush.ImageSize;
L1789:         mSlateBrush1.Margin = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0);
L1850:         mSlateBrush1.TintColor = this->IconImage->Brush.TintColor;
L1917:         mSlateBrush1.ResourceObject = this->mInputTextureIcon;
L1945:         mSlateBrush1.DrawAs = this->IconImage->Brush.DrawAs;
L2012:         mSlateBrush1.Tiling = this->IconImage->Brush.Tiling;
L2079:         mSlateBrush1.Mirroring = this->IconImage->Brush.Mirroring;
L2146:         this->IconImage->SetBrush([ref] mSlateBrush1);
L2191:         // <End Inlined EventGraph Function>;
L2196:         // <Begin Inlined EventGraph Function Create Style>;
L2196:         goto L10;
L2201:         this->T = 0;
L2224:         goto L1148;
L2229:         // <Begin Inlined EventGraph Function Set Icon Position>;
L2229:         float mfloat2 = this->endPoint / 2;
L2271:         float mfloat3 = mfloat2 + this->startPoint;
L2317:         float mfloat4 = mfloat3 * 360;
L2359:         float mfloat5 = 0 - mfloat4;
L2401:         this->IconContainer->SetRenderAngle(mfloat5);
L2442:         mfloat2 = this->endPoint / 2;
L2484:         mfloat3 = mfloat2 + this->startPoint;
L2530:         mfloat4 = mfloat3 * 360;
L2572:         this->Icon->SetRenderAngle(mfloat4);
L2613:         FText mFText = KismetTextLibrary->Conv_NameToText(this->Name);
L2672:         this->IconText->SetText(mFText);
L2717:         // <End Inlined EventGraph Function>;
L2722:         bool mbool1 = KismetSystemLibrary->IsValid(this->mRadialMenu);
L2773:         if (!mbool1) goto L3555;
L2787:         bool mbool2 = InRange_FloatFloat(this->mRadialMenu->Angle, this->MinValue, this->MaxValue, true, true);
L2858:         bool mbool3 = this->mRadialMenu->OutsideDeadSpace && mbool2;
L2918:         if (!mbool3) goto L3034;
L2932:         this->Hover Lerp(mfloat6);
L2955:         bool mbool4 = this->Name == this->mRadialMenu->ActiveName;
L3015:         if (!mbool4) goto L3447;
L3029:         // <End Inlined EventGraph Function>;
L3034:         HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor1, [ref] mLinearColor);
L3089:         this->IconText->SetColorAndOpacity(mSlateColor1);
L3130:         HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor1, [ref] mLinearColor);
L3185:         this->IconImage->SetColorAndOpacity(mLinearColor);
L3226:         this->Radial Material->SetScalarParameterValue("startPoint", this->startPoint);
L3280:         this->Radial Material->SetScalarParameterValue("DegreeInPercent", this->endPoint);
L3334:         this->Radial Material->SetScalarParameterValue("InsideRadius", this->InsideRadius);
L3388:         this->Radial Material->SetScalarParameterValue("OutsideRadius", this->OutsideRadius);
L3442:         goto L2201;
L3447:         this->mRadialMenu->ActiveName = this->Name;
L3496:         this->mRadialMenu->SelectedInt = this->ButtonInteger;
L3545:         // <End Inlined EventGraph Function>;
L3550:         goto L2722;
============ END FUNCTION ExecuteUbergraph_Widget_RadialMenuButton ==============
