########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Interface/UI/Menu/Widget_AreaSelection_Button.Widget_AreaSelection_Button_C
########################





============ BEGIN FUNCTION SkipSizeLerp ==============
L0:            bool mbool = KismetSystemLibrary->K2_IsTimerActiveHandle(this, this->mLerpTimerHandle);
L52:           if (!mbool) goto L71;
L66:           // <End Inlined EventGraph Function>;
L71:           this->StartSizeLerp(isGrowing);
L94:           this->mLerpT = 1;
============ END FUNCTION SkipSizeLerp ==============





============ BEGIN FUNCTION StartSizeLerp ==============
L0:            bool mbool = Growing != this->mIsGrowing;
L38:           if (!mbool) goto L156;
L52:           float mfloat = 1 - this->mLerpT;
L94:           this->mLerpT = mfloat;
L121:          this->mIsGrowing = Growing;
L140:          this->mIsLerping = true;
L151:          // <End Inlined EventGraph Function>;
L156:          this->mLerpT = 0;
L179:          goto L140;
============ END FUNCTION StartSizeLerp ==============





============ BEGIN FUNCTION SetBorderTint ==============
L0:            this->mNameBG->SetColorAndOpacity(Color.SpecifiedColor);
L50:           this->mBorder->SetColorAndOpacity(Color.SpecifiedColor);
============ END FUNCTION SetBorderTint ==============





============ BEGIN FUNCTION DeselectAnim ==============
L0:            bool mbool = this->IsAnimationPlaying(this->IsHoveredAnim);
L29:           if (!mbool) goto L231;
L43:           float mfloat = this->IsHoveredAnim->GetEndTime();
L93:           float mfloat1 = this->GetAnimationCurrentTime(this->IsHoveredAnim);
L130:          float mfloat2 = mfloat - mfloat1;
L176:          UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->IsHoveredAnim, mfloat2, 1, 1, 1);
L226:          // <End Inlined EventGraph Function>;
L231:          UMGSequencePlayer* mUMGSequencePlayer1 = this->PlayAnimation(this->IsHoveredAnim, 0, 1, 1, 1);
============ END FUNCTION DeselectAnim ==============





============ BEGIN FUNCTION SelectAnim ==============
L0:            bool mbool = this->IsAnimationPlaying(this->IsHoveredAnim);
L29:           if (!mbool) goto L135;
L43:           float mfloat = this->GetAnimationCurrentTime(this->IsHoveredAnim);
L80:           UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->IsHoveredAnim, mfloat, 1, 0, 1);
L130:          // <End Inlined EventGraph Function>;
L135:          UMGSequencePlayer* mUMGSequencePlayer1 = this->PlayAnimation(this->IsHoveredAnim, 0, 1, 0, 1);
============ END FUNCTION SelectAnim ==============





============ BEGIN FUNCTION SetSelected ==============
L0:            bool LocalIsSelected = IsSelected;
L19:           if (!LocalIsSelected) goto L152;
L33:           this->SkipSizeLerp(true);
L48:           CanvasPanelSlot* mCanvasPanelSlot = WidgetLayoutLibrary->SlotAsCanvasSlot(this);
L91:           mCanvasPanelSlot->SetZOrder(3);
L128:          this->mIsSelected = LocalIsSelected;
L147:          // <End Inlined EventGraph Function>;
L152:          if (!this->mIsSelected) goto L266;
L166:          CanvasPanelSlot* mCanvasPanelSlot1 = WidgetLayoutLibrary->SlotAsCanvasSlot(this);
L209:          mCanvasPanelSlot1->SetZOrder(0);
L246:          this->StartSizeLerp(false);
L261:          goto L128;
============ END FUNCTION SetSelected ==============





============ BEGIN FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: BndEvt__mButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature;
L0:            // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L222;
============ END FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature ==============





============ BEGIN FUNCTION LerpSize ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: LerpSize;
L0:            // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L1215;
============ END FUNCTION LerpSize ==============





============ BEGIN FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: BndEvt__mButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature;
L0:            // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L2642;
============ END FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature ==============





============ BEGIN FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature ==============
L0:            // EventGraph implemented function stub;
L0:            // Function Name: BndEvt__mButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature;
L0:            // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L2647;
============ END FUNCTION BndEvt__mButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature ==============





============ BEGIN FUNCTION PreConstruct ==============
L18:           // EventGraph implemented function stub;
L18:           // Function Name: PreConstruct;
L18:           // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L3990;
============ END FUNCTION PreConstruct ==============





============ BEGIN FUNCTION Tick ==============
L36:           // EventGraph implemented function stub;
L36:           // Function Name: Tick;
L36:           // Implementation: Function ExecuteUbergraph_Widget_AreaSelection_Button, from label L3995;
============ END FUNCTION Tick ==============





============ BEGIN FUNCTION ExecuteUbergraph_Widget_AreaSelection_Button ==============
L10:           bool mbool = !this->mIsLocked;
L39:           if (!mbool) goto L4023;
L53:           this->Widget_ButtonShine->PlayShineAnim();
L89:           this->SetSelected(true);
L104:          this->OnClicked->ProcessMulticastDelegate(this->mStartingLocs);
L132:          PlayerController* mPlayerController = this->GetOwningPlayer();
L156:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(ObjectConst(AkAudioEvent /Game/FactoryGame/Interface/UI/Audio/MainMenu/Play_UI_MainMenu_Click.Play_UI_MainMenu_Click), mPlayerController, true);
L217:          // <End Inlined EventGraph Function>;
L222:          // <Begin Inlined EventGraph Function BndEvt__mButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature>;
L222:          bool mbool1 = !this->mIsLocked;
L251:          if (!mbool1) goto L555;
L265:          int32 Temp_int_Variable = 2;
L288:          int32 Temp_int_Variable1 = 0;
L311:          CanvasPanelSlot* mCanvasPanelSlot = WidgetLayoutLibrary->SlotAsCanvasSlot(this);
L354:          bool Temp_bool_Variable = this->mIsSelected;
L373:          mCanvasPanelSlot->SetZOrder(switch (Temp_bool_Variable) {
case false -> Temp_int_Variable1;
case true -> Temp_int_Variable;
default -> mint32;
});
L458:          if (!this->mIsSelected) goto L606;
L472:          HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor, [ref] mLinearColor);
L527:          this->SetBorderTint(mSlateColor);
L550:          // <End Inlined EventGraph Function>;
L555:          UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->LockedHover, 0, 1, 1, 1);
L601:          // <End Inlined EventGraph Function>;
L606:          this->StartSizeLerp(false);
L621:          // <End Inlined EventGraph Function>;
L626:          PlayerController* mPlayerController1 = this->GetOwningPlayer();
L650:          AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(ObjectConst(AkAudioEvent /Game/FactoryGame/Interface/UI/Audio/MainMenu/Play_UI_MainMenu_MouseOver.Play_UI_MainMenu_MouseOver), mPlayerController1, true);
L711:          this->StartSizeLerp(true);
L726:          HUDHelpers->GetFactoryGameOrange(this, [ref] mLinearColor1, [ref] mSlateColor1);
L781:          this->SetBorderTint(mSlateColor1);
L804:          // <End Inlined EventGraph Function>;
L809:          if (!this->mIsSelected) goto L626;
L823:          goto L726;
L828:          bool mbool2 = !this->mIsLocked;
L857:          if (!mbool2) goto L956;
L871:          CanvasPanelSlot* mCanvasPanelSlot1 = WidgetLayoutLibrary->SlotAsCanvasSlot(this);
L914:          mCanvasPanelSlot1->SetZOrder(3);
L951:          goto L809;
L956:          UMGSequencePlayer* mUMGSequencePlayer1 = this->PlayAnimation(this->LockedHover, 0, 1, 0, 1);
L1002:         // <End Inlined EventGraph Function>;
L1007:         if (!this->mIsLocked) goto L1118;
L1021:         MaterialInstanceDynamic* mMaterialInstanceDynamic = this->RetainerBox_0->GetEffectMaterial();
L1063:         mMaterialInstanceDynamic->SetScalarParameterValue("amount", 0.8999999761581421);
L1113:         // <End Inlined EventGraph Function>;
L1118:         mMaterialInstanceDynamic = this->RetainerBox_0->GetEffectMaterial();
L1160:         mMaterialInstanceDynamic->SetScalarParameterValue("amount", 0);
L1210:         // <End Inlined EventGraph Function>;
L1215:         // <Begin Inlined EventGraph Function LerpSize>;
L1215:         float mfloat = GameplayStatics->GetWorldDeltaSeconds(this);
L1266:         float mfloat1 = mfloat / this->mLerpDuration;
L1312:         float mfloat2 = this->mLerpT + mfloat1;
L1358:         this->mLerpT = mfloat2;
L1385:         float mfloat3 = SelectFloat(620, 700, this->mIsGrowing);
L1432:         float mfloat4 = SelectFloat(700, 620, this->mIsGrowing);
L1479:         float mfloat5 = Ease(mfloat3, mfloat4, this->mLerpT, 7, 2, 2);
L1546:         this->mButtonSize->SetHeightOverride(mfloat5);
L1587:         float mfloat6 = this->mWidth + this->mHoverWidthIncrease;
L1633:         float mfloat7 = this->mWidth + this->mHoverWidthIncrease;
L1679:         float mfloat8 = SelectFloat(this->mWidth, mfloat6, this->mIsGrowing);
L1734:         float mfloat9 = SelectFloat(mfloat7, this->mWidth, this->mIsGrowing);
L1789:         float mfloat10 = Ease(mfloat8, mfloat9, this->mLerpT, 7, 2, 2);
L1856:         this->mButtonSize->SetWidthOverride(mfloat10);
L1897:         float mfloat11 = SelectFloat(0, 1, this->mIsGrowing);
L1944:         float mfloat12 = SelectFloat(1, 0, this->mIsGrowing);
L1991:         float mfloat13 = Ease(mfloat11, mfloat12, this->mLerpT, 7, 2, 2);
L2058:         this->mBorder->SetRenderOpacity(mfloat13);
L2099:         this->mTitleContainer->SetRenderOpacity(mfloat13);
L2140:         this->mDescriptionContainer->SetRenderOpacity(mfloat13);
L2181:         OverlaySlot* mOverlaySlot = WidgetLayoutLibrary->SlotAsOverlaySlot(this->mButtonSize);
L2232:         float mfloat14 = SelectFloat(this->mSpacing, 0, this->mIsGrowing);
L2283:         float mfloat15 = SelectFloat(0, this->mSpacing, this->mIsGrowing);
L2334:         float mfloat16 = Ease(mfloat14, mfloat15, this->mLerpT, 7, 2, 2);
L2401:         mMargin.Left = mfloat16;
L2437:         mMargin.Top = 0;
L2469:         mMargin.Right = mfloat16;
L2505:         mMargin.Bottom = 0;
L2537:         mOverlaySlot->SetPadding(mMargin);
L2578:         bool mbool3 = this->mLerpT >= 1;
L2612:         if (!mbool3) goto L4023;
L2626:         this->mIsLerping = false;
L2637:         // <End Inlined EventGraph Function>;
L2642:         // <Begin Inlined EventGraph Function BndEvt__mButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature>;
L2642:         goto L828;
L2647:         // <Begin Inlined EventGraph Function BndEvt__mButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature>;
L2647:         goto L10;
L2652:         this->mButtonSize->SetWidthOverride(this->mWidth);
L2693:         OverlaySlot* mOverlaySlot1 = WidgetLayoutLibrary->SlotAsOverlaySlot(this->mButtonSize);
L2744:         mMargin1.Left = this->mSpacing;
L2780:         mMargin1.Top = 0;
L2812:         mMargin1.Right = this->mSpacing;
L2848:         mMargin1.Bottom = 0;
L2880:         mOverlaySlot1->SetPadding(mMargin1);
L2921:         float mfloat17 = this->mSpacing * 2;
L2963:         float mfloat18 = this->mWidth + mfloat17;
L3009:         CanvasPanelSlot* mCanvasPanelSlot2 = WidgetLayoutLibrary->SlotAsCanvasSlot(this->mScaleBox);
L3060:         Vector2D mVector2D = mCanvasPanelSlot2->GetSize();
L3110:         BreakVector2D(mVector2D, [ref] mfloat19, [ref] mfloat20);
L3147:         Vector2D mVector2D1 = MakeVector2D(mfloat18, mfloat20);
L3193:         mCanvasPanelSlot2->SetSize(mVector2D1);
L3234:         FString mFString = KismetTextLibrary->Conv_TextToString([ref] this->mStartingLocs.Name_15_B24B9E3F4D2123245CD4C3AC88089645);
L3302:         this->mAreaNameTextObject->SetTitle(mFString);
L3347:         this->mDescriptionTextObject->SetText(this->mStartingLocs.Description_16_FC7E65A7491E131F357F18A1353545CB);
L3401:         mSlateBrush.ImageSize = this->mLevelScreenshotObject->Brush.ImageSize;
L3468:         mSlateBrush.Margin = this->mLevelScreenshotObject->Brush.Margin;
L3535:         mSlateBrush.TintColor = this->mLevelScreenshotObject->Brush.TintColor;
L3602:         mSlateBrush.ResourceObject = this->mStartingLocs.Image_17_BEFE2AB0455E5D921A998EB9F17BDDC1;
L3639:         mSlateBrush.DrawAs = this->mLevelScreenshotObject->Brush.DrawAs;
L3706:         mSlateBrush.Tiling = this->mLevelScreenshotObject->Brush.Tiling;
L3773:         mSlateBrush.Mirroring = this->mLevelScreenshotObject->Brush.Mirroring;
L3840:         this->mLevelScreenshotObject->SetBrush([ref] mSlateBrush);
L3885:         this->mDifficultyText->SetText(this->mStartingLocs.Difficulty_20_AAA700CA4831D7D06DE1A8AED45C0E43);
L3939:         goto L1007;
L3944:         this->mDescriptionSizebox->SetWidthOverride(this->mWidth);
L3985:         goto L2652;
L3990:         goto L3944;
L3995:         if (!this->mIsLerping) goto L4023;
L4009:         this->LerpSize();
============ END FUNCTION ExecuteUbergraph_Widget_AreaSelection_Button ==============





============ BEGIN FUNCTION OnClicked__DelegateSignature ==============
============ END FUNCTION OnClicked__DelegateSignature ==============
