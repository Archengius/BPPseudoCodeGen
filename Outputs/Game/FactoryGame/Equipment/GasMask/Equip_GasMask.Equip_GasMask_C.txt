########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Equipment/GasMask/Equip_GasMask.Equip_GasMask_C
########################





============ BEGIN FUNCTION EnablePostProcessing ==============
L0:            bool mbool = this->IsLocalInstigator();
L20:           if (!mbool) goto L408;
L34:           if (!mEnabled) goto L89;
L48:           if (!this->PPComponent->bEnabled) goto L269;
L84:           <End of Inlined Event Graph Function>;
L89:           if (!this->PPComponent->bEnabled) goto L408;
L125:          this->PPComponent->bEnabled = false;
L158:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(Stop_EQ_GasMask, this, true);
L211:          AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(Bus_LowPass_GasMask_Reset, this, true);
L264:          <End of Inlined Event Graph Function>;
L269:          this->PPComponent->bEnabled = true;
L302:          AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEvent(Play_EQ_GasMask, this, true);
L355:          AkComponent* mAkComponent3 = AkGameplayStatics->PostAkEvent(Bus_LowPass_GasMask, this, true);
============ END FUNCTION EnablePostProcessing ==============





============ BEGIN FUNCTION AdjustDamage ==============
L0:            float mfloat = this->AdjustDamage(damageAmount, DamageType, InstigatedBy, DamageCauser);
L64:           float local_damage = mfloat;
L91:           const BP_DamageType* mconst BP_DamageType = Cast<BlueprintGeneratedClass /Game/FactoryGame/-Shared/Blueprint/BP_DamageType.BP_DamageType_C>(DamageType);
L127:          bool mbool = mconst BP_DamageType;
L156:          if (!mbool) goto L409;
L170:          bool mbool1 = this->IsEquipped();
L190:          bool mbool2 = BooleanAND(mconst BP_DamageType->mFromGas, mbool1);
L250:          bool mbool3 = BooleanAND(mbool2, this->mIsWorking);
L288:          if (!mbool3) goto L409;
L302:          this->mHasNegatedDamage = true;
L313:          float mfloat1 = Add_FloatFloat(local_damage, this->mDamageNegated);
L359:          this->mDamageNegated = mfloat1;
L386:          local_damage = 0;
L409:          float ReturnValue = local_damage;
============ END FUNCTION AdjustDamage ==============





============ BEGIN FUNCTION WasUnEquipped ==============
L0:            this->ExecuteUbergraph_Equip_GasMask(1826);
============ END FUNCTION WasUnEquipped ==============





============ BEGIN FUNCTION ReceiveTick ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Equipment/GasMask/Equip_GasMask.Equip_GasMask_C:ExecuteUbergraph_Equip_GasMask.K2Node_Event_DeltaSeconds) = DeltaSeconds;
L18:           this->ExecuteUbergraph_Equip_GasMask(1514);
============ END FUNCTION ReceiveTick ==============





============ BEGIN FUNCTION WasEquipped ==============
L0:            this->ExecuteUbergraph_Equip_GasMask(628);
============ END FUNCTION WasEquipped ==============





============ BEGIN FUNCTION ExecuteUbergraph_Equip_GasMask ==============
L5:            goto ComputedJump(EntryPoint);
L15:           this->ChargeForUse();
L25:           this->mHasNegatedDamage = false;
L36:           this->mCountdown = this->mFilterDuration;
L63:           this->mIsWorking = true;
L74:           goto ExecutionFlow.Pop();
L75:           bool mbool = LessEqual_FloatFloat(this->mCountdown, 0);
L109:          if (!mbool) goto ExecutionFlow.Pop();
L119:          bool mbool1 = this->CanAffordUse();
L139:          if (!mbool1) goto L370;
L153:          bool mbool2 = this->HasAuthority();
L173:          if (!mbool2) goto L36;
L187:          GameStateBase* mGameStateBase = GameplayStatics->GetGameState(this);
L230:          FGGameState* mFGGameState = Cast<Class /Script/FactoryGame.FGGameState>(mGameStateBase);
L266:          bool mbool3 = mFGGameState;
L295:          if (!mbool3) goto L15;
L309:          bool mbool4 = mFGGameState->GetCheatNoCost();
L351:          if (!mbool4) goto L15;
L365:          goto L25;
L370:          this->mIsWorking = false;
L381:          this->EnablePostProcessing(false);
L396:          this->mDisableEffectTimer = -1;
L419:          goto ExecutionFlow.Pop();
L420:          this->EnablePostProcessing(false);
L435:          FGCharacterPlayer* mFGCharacterPlayer = this->GetInstigatorCharacter();
L455:          SkeletalMeshComponent* mSkeletalMeshComponent = mFGCharacterPlayer->GetMesh1P();
L497:          AnimInstance* mAnimInstance = mSkeletalMeshComponent->GetAnimInstance();
L539:          AnimMontage* mAnimMontage = mAnimInstance->GetCurrentActiveMontage();
L581:          mAnimInstance->Montage_Stop(0, mAnimMontage);
L627:          goto ExecutionFlow.Pop();
L628:          this->WasEquipped();
L638:          ExecutionFlow.Push(L667);
L643:          this->mDisableEffectTimer = -1;
L666:          goto ExecutionFlow.Pop();
L667:          bool mbool5 = this->IsLocalInstigator();
L687:          if (!mbool5) goto ExecutionFlow.Pop();
L697:          FGCharacterPlayer* mFGCharacterPlayer1 = this->GetInstigatorCharacter();
L717:          SkeletalMeshComponent* mSkeletalMeshComponent1 = mFGCharacterPlayer1->GetMesh1P();
L759:          AnimInstance* mAnimInstance1 = mSkeletalMeshComponent1->GetAnimInstance();
L801:          bool mbool6 = mAnimInstance1->Montage_IsPlaying(GasMaskEquip_01_Montage);
L852:          if (!mbool6) goto L867;
L866:          goto ExecutionFlow.Pop();
L867:          mFGCharacterPlayer1 = this->GetInstigatorCharacter();
L887:          mSkeletalMeshComponent1 = mFGCharacterPlayer1->GetMesh1P();
L929:          mAnimInstance1 = mSkeletalMeshComponent1->GetAnimInstance();
L971:          float mfloat = mAnimInstance1->Montage_Play(GasMaskEquip_01_Montage, 1, 0, 0, true);
L1043:         Pawn* mPawn = this->GetInstigator();
L1063:         Controller* mController = mPawn->GetController();
L1105:         PlayerController* mPlayerController = Cast<Class /Script/Engine.PlayerController>(mController);
L1141:         bool mbool7 = mPlayerController;
L1170:         if (!mbool7) goto ExecutionFlow.Pop();
L1180:         mPlayerController->ClientPlayCameraAnim(GasMaskEquip_01_CameraAnim, 1, 1, 0, 0, false, false, 0, Rotator::FromPitchYawRoll(0, 0, 0));
L1262:         goto ExecutionFlow.Pop();
L1263:         bool mbool8 = this->IsEquipped();
L1283:         if (!mbool8) goto ExecutionFlow.Pop();
L1293:         bool mbool9 = this->CanAffordUse();
L1313:         this->mIsWorking = mbool9;
L1332:         bool mbool10 = LessEqual_FloatFloat(this->mDisableEffectTimer, 0);
L1366:         if (!mbool10) goto L1381;
L1380:         goto ExecutionFlow.Pop();
L1381:         float mfloat1 = Subtract_FloatFloat(this->mDisableEffectTimer, mfloat2);
L1427:         this->mDisableEffectTimer = mfloat1;
L1454:         bool mbool11 = LessEqual_FloatFloat(this->mDisableEffectTimer, 0);
L1488:         if (!mbool11) goto ExecutionFlow.Pop();
L1498:         this->EnablePostProcessing(false);
L1513:         goto ExecutionFlow.Pop();
L1514:         mbool8 = this->IsEquipped();
L1534:         bool mbool12 = BooleanAND(mbool8, this->mHasNegatedDamage);
L1572:         if (!mbool12) goto L1263;
L1586:         bool mbool13 = LessEqual_FloatFloat(this->mDisableEffectTimer, 0);
L1620:         if (!mbool13) goto L1649;
L1634:         this->EnablePostProcessing(true);
L1649:         this->mDisableEffectTimer = 6;
L1672:         float mfloat3 = Subtract_FloatFloat(this->mCountdown, this->mDamageNegated);
L1718:         float mfloat4 = FMax(mfloat3, 0);
L1760:         this->mCountdown = mfloat4;
L1787:         this->mDamageNegated = 0;
L1810:         this->mHasNegatedDamage = false;
L1821:         goto L75;
L1826:         bool mbool14 = this->IsLocalInstigator();
L1846:         if (!mbool14) goto ExecutionFlow.Pop();
L1856:         goto L420;
============ END FUNCTION ExecuteUbergraph_Equip_GasMask ==============
