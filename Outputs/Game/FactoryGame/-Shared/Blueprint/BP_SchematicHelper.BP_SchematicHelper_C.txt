########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/-Shared/Blueprint/BP_SchematicHelper.BP_SchematicHelper_C
########################





============ BEGIN FUNCTION DoSchematicHasUnlocks ==============
L0:            TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L59:           int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L118:          bool mbool = mint32 > 0;
L152:          if (!mbool) goto L182;
L166:          bool HasUnlocks = true;
L177:          // <End Inlined EventGraph Function>;
L182:          HasUnlocks = false;
============ END FUNCTION DoSchematicHasUnlocks ==============





============ BEGIN FUNCTION GetNumArmEquipmentSlotsUnlocked ==============
L0:            ExecutionFlow.Push(L676);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L570;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L602);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          FGUnlockArmEquipmentSlot* mFGUnlockArmEquipmentSlot = Cast<Class /Script/FactoryGame.FGUnlockArmEquipmentSlot>(mFGUnlock);
L407:          bool mbool1 = mFGUnlockArmEquipmentSlot;
L436:          if (!mbool1) goto ExecutionFlow.Pop();
L446:          int32 mint321 = mFGUnlockArmEquipmentSlot->GetNumArmEquipmentSlotsToUnlock();
L496:          int32 mint322 = localNumSlots + mint321;
L542:          int32 localNumSlots = mint322;
L569:          goto ExecutionFlow.Pop();
L570:          int32 numSlots = localNumSlots;
L597:          // <End Inlined EventGraph Function>;
L602:          int32 mint323 = Temp_int_Loop_Counter_Variable + 1;
L644:          Temp_int_Loop_Counter_Variable = mint323;
L671:          goto L51;
============ END FUNCTION GetNumArmEquipmentSlotsUnlocked ==============





============ BEGIN FUNCTION GetNumInventorySlotsUnlocked ==============
L0:            ExecutionFlow.Push(L676);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L570;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L602);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          FGUnlockInventorySlot* mFGUnlockInventorySlot = Cast<Class /Script/FactoryGame.FGUnlockInventorySlot>(mFGUnlock);
L407:          bool mbool1 = mFGUnlockInventorySlot;
L436:          if (!mbool1) goto ExecutionFlow.Pop();
L446:          int32 mint321 = mFGUnlockInventorySlot->GetNumInventorySlotsToUnlock();
L496:          int32 mint322 = localNumSlots + mint321;
L542:          int32 localNumSlots = mint322;
L569:          goto ExecutionFlow.Pop();
L570:          int32 numSlots = localNumSlots;
L597:          // <End Inlined EventGraph Function>;
L602:          int32 mint323 = Temp_int_Loop_Counter_Variable + 1;
L644:          Temp_int_Loop_Counter_Variable = mint323;
L671:          goto L51;
============ END FUNCTION GetNumInventorySlotsUnlocked ==============





============ BEGIN FUNCTION GetUnlocksHandSlots ==============
L0:            ExecutionFlow.Push(L552);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L462;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L478);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          FGUnlockArmEquipmentSlot* mFGUnlockArmEquipmentSlot = Cast<Class /Script/FactoryGame.FGUnlockArmEquipmentSlot>(mFGUnlock);
L407:          bool mbool1 = mFGUnlockArmEquipmentSlot;
L436:          if (!mbool1) goto ExecutionFlow.Pop();
L446:          bool Result = true;
L457:          // <End Inlined EventGraph Function>;
L462:          Result = false;
L473:          // <End Inlined EventGraph Function>;
L478:          int32 mint321 = Temp_int_Loop_Counter_Variable + 1;
L520:          Temp_int_Loop_Counter_Variable = mint321;
L547:          goto L51;
============ END FUNCTION GetUnlocksHandSlots ==============





============ BEGIN FUNCTION GetUnlocksInventorySlot ==============
L0:            ExecutionFlow.Push(L552);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L462;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L478);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          FGUnlockInventorySlot* mFGUnlockInventorySlot = Cast<Class /Script/FactoryGame.FGUnlockInventorySlot>(mFGUnlock);
L407:          bool mbool1 = mFGUnlockInventorySlot;
L436:          if (!mbool1) goto ExecutionFlow.Pop();
L446:          bool Result = true;
L457:          // <End Inlined EventGraph Function>;
L462:          Result = false;
L473:          // <End Inlined EventGraph Function>;
L478:          int32 mint321 = Temp_int_Loop_Counter_Variable + 1;
L520:          Temp_int_Loop_Counter_Variable = mint321;
L547:          goto L51;
============ END FUNCTION GetUnlocksInventorySlot ==============





============ BEGIN FUNCTION GetRecipesFromSchematic ==============
L0:            ExecutionFlow.Push(L653);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L547;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L579);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          FGUnlockRecipe* mFGUnlockRecipe = Cast<Class /Script/FactoryGame.FGUnlockRecipe>(mFGUnlock);
L407:          bool mbool1 = mFGUnlockRecipe;
L436:          if (!mbool1) goto ExecutionFlow.Pop();
L446:          TArray<TSubclassOf<FGRecipe>> mTArrayTSubclassOfFGRecipe = mFGUnlockRecipe->GetRecipesToUnlock();
L496:          KismetArrayLibrary->Array_Append([ref] localRecipes, [ref] mTArrayTSubclassOfFGRecipe);
L546:          goto ExecutionFlow.Pop();
L547:          TArray<TSubclassOf<FGRecipe>> recipes = localRecipes;
L574:          // <End Inlined EventGraph Function>;
L579:          int32 mint321 = Temp_int_Loop_Counter_Variable + 1;
L621:          Temp_int_Loop_Counter_Variable = mint321;
L648:          goto L51;
============ END FUNCTION GetRecipesFromSchematic ==============





============ BEGIN FUNCTION GetUnlockDataStructFromSchematic ==============
L0:            ExecutionFlow.Push(L699);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<FGUnlock*> mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L110:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArrayFGUnlock);
L169:          bool mbool = Temp_int_Loop_Counter_Variable < mint32;
L207:          if (!mbool) goto L547;
L221:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L248:          ExecutionFlow.Push(L579);
L253:          mTArrayFGUnlock = FGSchematic->GetUnlocks(schematic);
L312:          KismetArrayLibrary->Array_Get([ref] mTArrayFGUnlock, Temp_int_Array_Index_Variable, [ref] mFGUnlock);
L371:          TScriptInterface<BPI_UnlockableInterface> mTScriptInterfaceBPI_UnlockableInterface = QueryInterface<BlueprintGeneratedClass /Game/FactoryGame/Unlocks/BPI_UnlockableInterface.BPI_UnlockableInterface_C>(mFGUnlock);
L407:          bool mbool1 = mTScriptInterfaceBPI_UnlockableInterface;
L436:          if (!mbool1) goto L653;
L450:          GetInterfaceUObject(mTScriptInterfaceBPI_UnlockableInterface)->GetUnlockDataStruct([ref] mTArrayFUnlockDataStruct);
L496:          KismetArrayLibrary->Array_Append([ref] localUnlockDataStruct, [ref] mTArrayFUnlockDataStruct);
L546:          goto ExecutionFlow.Pop();
L547:          TArray<FUnlockDataStruct> UnlockDataStruct = localUnlockDataStruct;
L574:          // <End Inlined EventGraph Function>;
L579:          int32 mint321 = Temp_int_Loop_Counter_Variable + 1;
L621:          Temp_int_Loop_Counter_Variable = mint321;
L648:          goto L51;
L653:          KismetArrayLibrary->Array_Clear([ref] mTArrayFUnlockDataStruct);
L694:          goto L496;
============ END FUNCTION GetUnlockDataStructFromSchematic ==============





============ BEGIN FUNCTION IsSchematicLockedInAnyWay ==============
L0:            this->IsSchematicPhaseLocked(WolrdContext, schematic, WolrdContext, [ref] mbool);
L50:           this->IsSchematicLockedByTutorial(WolrdContext, schematic, WolrdContext, [ref] mbool1);
L100:          this->IsSchematicDependentLocked(WolrdContext, schematic, WolrdContext, [ref] mbool2);
L150:          bool mbool3 = mbool || mbool2;
L188:          bool mbool4 = mbool3 || mbool1;
L226:          bool IsLocked = mbool4;
============ END FUNCTION IsSchematicLockedInAnyWay ==============





============ BEGIN FUNCTION IsSchematicLockedByTutorial ==============
L0:            FGTutorialIntroManager* mFGTutorialIntroManager = FGTutorialIntroManager->Get(WorldContext);
L51:           uint8 muint8 = FGSchematic->GetType(SchematicClass);
L110:          bool mbool = mFGTutorialIntroManager->GetIsTutorialCompleted();
L152:          bool mbool1 = muint8 == 2;
L183:          bool mbool2 = BooleanNOR(mbool, mbool1);
L221:          bool IsSchematicLockedByTutorial = mbool2;
============ END FUNCTION IsSchematicLockedByTutorial ==============





============ BEGIN FUNCTION IsSchematicDependentLocked ==============
L0:            bool mbool = FGSchematic->AreSchematicDependenciesMet(SchematicClass, WorldContext);
L60:           bool mbool1 = !mbool;
L89:           bool IsSchematicDependentLocked = mbool1;
============ END FUNCTION IsSchematicDependentLocked ==============





============ BEGIN FUNCTION IsSchematicPartOfTutorial ==============
L0:            uint8 muint8 = FGSchematic->GetType(SchematicClass);
L59:           bool mbool = muint8 == 2;
L90:           bool IsSchematicPartOfTutortial = mbool;
============ END FUNCTION IsSchematicPartOfTutorial ==============





============ BEGIN FUNCTION IsSchematicPhaseLocked ==============
L0:            FGGamePhaseManager* mFGGamePhaseManager = FGGamePhaseManager->Get(WorldContext);
L51:           uint8 muint8 = mFGGamePhaseManager->GetGamePhase();
L101:          uint8 muint81 = mFGGamePhaseManager->GetGamePhaseForSchematic(SchematicClass);
L160:          int32 mint32 = Conv_ByteToInt(muint8);
L197:          int32 mint321 = Conv_ByteToInt(muint81);
L234:          bool mbool = mint32 < mint321;
L272:          bool IsSchematicPhaseLocked = mbool;
============ END FUNCTION IsSchematicPhaseLocked ==============
