########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C
########################





============ BEGIN FUNCTION GetActorCompassViewDistance ==============
L0:            uint8 ReturnValue = 4;
============ END FUNCTION GetActorCompassViewDistance ==============





============ BEGIN FUNCTION SetActorCompassViewDistance ==============
L0:            uint8 ReturnValue = 0;
============ END FUNCTION SetActorCompassViewDistance ==============





============ BEGIN FUNCTION SetActorRepresentationText ==============
L0:            this->FlushNetDormancy();
L10:           this->mMapText = newText;
L37:           FText ReturnValue = this->mMapText;
============ END FUNCTION SetActorRepresentationText ==============





============ BEGIN FUNCTION UpdateRepresentation ==============
L0:            bool mbool = this->HasAuthority();
L20:           if (!mbool) goto L145;
L34:           FGActorRepresentationManager* mFGActorRepresentationManager = FGActorRepresentationManager->Get(this);
L77:           bool mbool1 = mFGActorRepresentationManager->UpdateRepresentation(this, false);
L121:          bool ReturnValue = mbool1;
L140:          goto L156;
L145:          ReturnValue = false;
============ END FUNCTION UpdateRepresentation ==============





============ BEGIN FUNCTION GetActorRepresentationColor ==============
L0:            if (!this->mPossessed) goto L175;
L14:           FGPlayerState* mFGPlayerState = Cast<Class /Script/FactoryGame.FGPlayerState>(this->PlayerState);
L50:           bool mbool = mFGPlayerState;
L79:           if (!mbool) goto L175;
L93:           LinearColor mLinearColor = mFGPlayerState->GetNametagColor();
L143:          LinearColor ReturnValue = mLinearColor;
L170:          goto L257;
L175:          HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor, [ref] mLinearColor1);
L230:          ReturnValue = mLinearColor1;
============ END FUNCTION GetActorRepresentationColor ==============





============ BEGIN FUNCTION GetActorRepresentationText ==============
L0:            FText ReturnValue = this->mMapText;
============ END FUNCTION GetActorRepresentationText ==============





============ BEGIN FUNCTION GetActorRepresentationTexture ==============
L0:            Texture2D* ReturnValue = MapCompass_Icon_tractor;
============ END FUNCTION GetActorRepresentationTexture ==============





============ BEGIN FUNCTION GetActorRepresentationType ==============
L0:            uint8 ReturnValue = 12;
============ END FUNCTION GetActorRepresentationType ==============





============ BEGIN FUNCTION GetActorShouldShowInCompass ==============
L0:            bool ReturnValue = true;
============ END FUNCTION GetActorShouldShowInCompass ==============





============ BEGIN FUNCTION GetActorFogOfWarRevealRadius ==============
L0:            float ReturnValue = 50000;
============ END FUNCTION GetActorFogOfWarRevealRadius ==============





============ BEGIN FUNCTION GetActorFogOfWarRevealType ==============
L0:            uint8 Temp_byte_Variable = 3;
L20:           uint8 Temp_byte_Variable1 = 0;
L40:           bool Temp_bool_Variable = this->mPossessed;
L59:           uint8 ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
};
============ END FUNCTION GetActorFogOfWarRevealType ==============





============ BEGIN FUNCTION RemoveAsRepresentation ==============
L0:            bool mbool = this->HasAuthority();
L20:           if (!mbool) goto L144;
L34:           FGActorRepresentationManager* mFGActorRepresentationManager = FGActorRepresentationManager->Get(this);
L77:           bool mbool1 = mFGActorRepresentationManager->RemoveRepresentationOfActor(this);
L120:          bool ReturnValue = mbool1;
L139:          goto L155;
L144:          ReturnValue = false;
============ END FUNCTION RemoveAsRepresentation ==============





============ BEGIN FUNCTION AddAsRepresentation ==============
L0:            bool mbool = this->HasAuthority();
L20:           if (!mbool) goto L145;
L34:           FGActorRepresentationManager* mFGActorRepresentationManager = FGActorRepresentationManager->Get(this);
L77:           bool mbool1 = mFGActorRepresentationManager->CreateAndAddNewRepresentation(this, false);
L121:          bool ReturnValue = mbool1;
L140:          goto L156;
L145:          ReturnValue = false;
============ END FUNCTION AddAsRepresentation ==============





============ BEGIN FUNCTION GetActorShouldShowOnMap ==============
L0:            bool ReturnValue = true;
============ END FUNCTION GetActorShouldShowOnMap ==============





============ BEGIN FUNCTION GetRealActorLocation ==============
L0:            FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L20:           bool mbool = KismetSystemLibrary->IsValid(mFGTargetPointLinkedList);
L71:           if (!mbool) goto L590;
L85:           FGTargetPointLinkedList* mFGTargetPointLinkedList1 = this->GetTargetNodeLinkedList();
L105:          FGTargetPoint* mFGTargetPoint = mFGTargetPointLinkedList1->GetCurrentTarget();
L147:          bool mbool1 = KismetSystemLibrary->IsValid(mFGTargetPoint);
L198:          bool mbool2 = this->IsSimulated();
L218:          bool mbool3 = BooleanAND(mbool2, mbool1);
L256:          if (!mbool3) goto L650;
L270:          Vector mVector = this->K2_GetActorLocation();
L298:          FGTargetPointLinkedList* mFGTargetPointLinkedList2 = this->GetTargetNodeLinkedList();
L318:          float mfloat = Divide_FloatFloat(this->mTimeSpentOnTarget, this->mRecordInterval);
L364:          FGTargetPoint* mFGTargetPoint1 = mFGTargetPointLinkedList2->GetCurrentTarget();
L406:          float mfloat1 = FClamp(mfloat, 0, 1);
L453:          Vector mVector1 = mFGTargetPoint1->K2_GetActorLocation();
L503:          Vector mVector2 = VLerp(mVector, mVector1, mfloat1);
L558:          Vector ReturnValue = mVector2;
L585:          goto L705;
L590:          Vector mVector3 = this->K2_GetActorLocation();
L618:          ReturnValue = mVector3;
L645:          goto L705;
L650:          Vector mVector4 = this->K2_GetActorLocation();
L678:          ReturnValue = mVector4;
============ END FUNCTION GetRealActorLocation ==============





============ BEGIN FUNCTION GetRealActorRotation ==============
L0:            Rotator ReturnValue = Rotator::FromPitchYawRoll(0, 0, 0);
============ END FUNCTION GetRealActorRotation ==============





============ BEGIN FUNCTION IsActorStatic ==============
L0:            bool ReturnValue = false;
============ END FUNCTION IsActorStatic ==============





============ BEGIN FUNCTION UpdateAudioGear ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           int32 mint32 = mWheeledVehicleMovementComponent->GetCurrentGear();
L70:           bool mbool = NotEqual_IntInt(mint32, this->mAudioCurrentGear);
L108:          if (!mbool) goto L751;
L122:          mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L142:          mint32 = mWheeledVehicleMovementComponent->GetCurrentGear();
L192:          this->mAudioCurrentGear = mint32;
L219:          if (!this->mIsAudioOnloading) goto L374;
L233:          float mfloat = this->GetInputAxisValue("MoveForward");
L274:          bool mbool1 = Less_FloatFloat(mfloat, 0);
L308:          if (!mbool1) goto L476;
L322:          AkGameplayStatics->SetActorRTPCValue(this->mAudioGearRTPC, -1, 0, this);
L374:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L394:          int32 mint321 = mWheeledVehicleMovementComponent1->GetCurrentGear();
L444:          this->mAudioPreviousGear = mint321;
L471:          <End of Inlined Event Graph Function>;
L476:          float mfloat1 = Conv_IntToFloat(this->mAudioCurrentGear);
L513:          AkGameplayStatics->SetActorRTPCValue(this->mAudioGearRTPC, mfloat1, 0, this);
L569:          bool mbool2 = Greater_IntInt(this->mAudioCurrentGear, 1);
L603:          bool mbool3 = Greater_IntInt(this->mAudioCurrentGear, this->mAudioPreviousGear);
L641:          bool mbool4 = BooleanAND(mbool3, mbool2);
L679:          if (!mbool4) goto L374;
L693:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(this->MPlayVehicleTransmission, this, true);
L746:          goto L374;
============ END FUNCTION UpdateAudioGear ==============





============ BEGIN FUNCTION UpdateOutline ==============
L0:            bool Temp_bool_Variable = aimingAtWorkbench;
L19:           uint8 Temp_byte_Variable = 0;
L39:           uint8 Temp_byte_Variable1 = 252;
L59:           FGBlueprintFunctionLibrary->ShowOutline(this->mMesh, switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
});
============ END FUNCTION UpdateOutline ==============





============ BEGIN FUNCTION UpdateTireSound ==============
L0:            PhysicalMaterial* mPhysicalMaterial = this->GetCachedSurfaceMaterial();
L20:           bool mbool = KismetSystemLibrary->IsValid(mPhysicalMaterial);
L71:           if (!mbool) goto L1343;
L85:           float mfloat = RandomFloatInRange(this->mMinAudioPeakFlutter, this->mMaxAudioPeakFlutter);
L131:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L151:          float mfloat1 = RandomFloatInRange(this->mMinSteeringAudioFlutter, this->mMaxSteeringAudioFlutter);
L197:          float mfloat2 = mWheeledVehicleMovementComponent->GetSteering();
L247:          float mfloat3 = Abs(mfloat2);
L284:          bool mbool1 = EqualEqual_FloatFloat(mfloat3, 1);
L318:          bool Temp_bool_Variable = mbool1;
L337:          this->mAudioPeakFlutter = switch (Temp_bool_Variable) {
case false -> mfloat;
case true -> mfloat1;
default -> mfloat4;
};
L408:          FName Temp_name_Variable = "None";
L439:          FName Temp_name_Variable1 = "Surface_Panel";
L470:          FName Temp_name_Variable2 = "Surface_Coral";
L501:          FName Temp_name_Variable3 = "Surface_Grate";
L532:          FName Temp_name_Variable4 = "Surface_Cement";
L563:          FName Temp_name_Variable5 = "Surface_Soil";
L594:          FName Temp_name_Variable6 = "Surface_SandCracked";
L625:          FName Temp_name_Variable7 = "Surface_RockGravel";
L656:          FName Temp_name_Variable8 = "Surface_Grass_High";
L687:          FName Temp_name_Variable9 = "Surface_Gravel";
L718:          FName Temp_name_Variable10 = "Surface_Moist";
L749:          FName Temp_name_Variable11 = "Surface_Grass";
L780:          FName Temp_name_Variable12 = "Surface_Rock";
L811:          FName Temp_name_Variable13 = "Surface_Metal";
L842:          FName Temp_name_Variable14 = "Surface_Sand";
L873:          FName Temp_name_Variable15 = "Surface_Default";
L904:          mPhysicalMaterial = this->GetCachedSurfaceMaterial();
L924:          uint8 Temp_byte_Variable = mPhysicalMaterial->SurfaceType;
L973:          FString mFString = KismetStringLibrary->Conv_NameToString(switch (Temp_byte_Variable) {
case 0 -> Temp_name_Variable15;
case 1 -> Temp_name_Variable14;
case 2 -> Temp_name_Variable13;
case 3 -> Temp_name_Variable12;
case 4 -> Temp_name_Variable11;
case 5 -> Temp_name_Variable10;
case 6 -> Temp_name_Variable9;
case 7 -> Temp_name_Variable8;
case 8 -> Temp_name_Variable7;
case 9 -> Temp_name_Variable6;
case 10 -> Temp_name_Variable5;
case 11 -> Temp_name_Variable4;
case 12 -> Temp_name_Variable3;
case 13 -> Temp_name_Variable2;
case 14 -> Temp_name_Variable1;
case 15 -> Temp_name_Variable;
default -> mFName;
});
L1288:         this->mTireSoundLoop->SetSwitch(this->mTireSoundSwitchGroup, mFString);
L1338:         <End of Inlined Event Graph Function>;
L1343:         bool mbool2 = this->GetIsInAir();
L1363:         if (!mbool2) goto L1435;
L1377:         this->mTireSoundLoop->SetSwitch(this->mTireSoundSwitchGroup, "Surface_IsInAir");
============ END FUNCTION UpdateTireSound ==============





============ BEGIN FUNCTION BurnOutSound ==============
L0:            ExecutionFlow.Push(L1514);
L5:            ExecutionFlow.Push(L375);
L10:           WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L30:           bool mbool = GreaterEqual_IntInt(this->mSpeedInKMH, 25);
L64:           float mfloat = mWheeledVehicleMovementComponent->GetSteering();
L114:          float mfloat1 = Abs(mfloat);
L151:          bool mbool1 = EqualEqual_FloatFloat(mfloat1, 1);
L185:          bool mbool2 = BooleanAND(mbool1, mbool);
L223:          PhysicalMaterial* mPhysicalMaterial = this->GetCachedSurfaceMaterial();
L243:          bool mbool3 = KismetSystemLibrary->IsValid(mPhysicalMaterial);
L294:          bool mbool4 = BooleanAND(mbool2, mbool3);
L332:          if (!mbool4) goto L1173;
L346:          if (!this->mIsUsingGolfCartRPM) goto L1248;
L360:          if (!this->mIsTopDrifting) goto L1346;
L374:          goto ExecutionFlow.Pop();
L375:          bool mbool5 = Greater_FloatFloat(ForwardInputInput, 0);
L409:          PhysicalMaterial* mPhysicalMaterial1 = this->GetCachedSurfaceMaterial();
L429:          bool mbool6 = KismetSystemLibrary->IsValid(mPhysicalMaterial1);
L480:          bool mbool7 = Less_IntInt(this->mSpeedInKMH, this->mBurnOutSpeedThres);
L518:          bool mbool8 = BooleanAND(mbool5, mbool7);
L556:          bool mbool9 = BooleanAND(mbool8, mbool6);
L594:          if (!mbool9) goto L971;
L608:          float mfloat2 = Conv_IntToFloat(this->mSpeedInKMH);
L645:          bool mbool10 = GreaterEqual_FloatFloat(mfloat2, this->mCheckValueForBurnOut);
L683:          if (!mbool10) goto L971;
L697:          mfloat2 = Conv_IntToFloat(this->mSpeedInKMH);
L734:          this->mCheckValueForBurnOut = mfloat2;
L761:          float mfloat3 = Conv_IntToFloat(this->mBurnOutSpeedThres);
L798:          mfloat2 = Conv_IntToFloat(this->mSpeedInKMH);
L835:          float mfloat4 = MapRangeClamped(mfloat2, 0, mfloat3, 0, this->BurnOutRTPCRange);
L900:          AkGameplayStatics->SetActorRTPCValue(this->mBurnOutRTPC, mfloat4, 0, this);
L956:          if (!this->mIsBurningOut) goto L1430;
L970:          goto ExecutionFlow.Pop();
L971:          mfloat2 = Conv_IntToFloat(this->mSpeedInKMH);
L1008:         this->mCheckValueForBurnOut = mfloat2;
L1035:         if (!this->mIsBurningOut) goto ExecutionFlow.Pop();
L1045:         bool mbool11 = LessEqual_FloatFloat(ForwardInputInput, 0);
L1079:         if (!mbool11) goto ExecutionFlow.Pop();
L1089:         AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(this->mStopBurnOutSound, this, true);
L1142:         this->StopIsBurningOut = mAkComponent;
L1161:         this->mIsBurningOut = false;
L1172:         goto ExecutionFlow.Pop();
L1173:         if (!this->mIsTopDrifting) goto ExecutionFlow.Pop();
L1183:         AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(this->mStopAudioTopDrift, this, true);
L1236:         this->mIsTopDrifting = false;
L1247:         goto ExecutionFlow.Pop();
L1248:         float mfloat5 = Conv_IntToFloat(this->mSpeedInKMH);
L1285:         AkGameplayStatics->SetActorRTPCValue(this->mTopDriftRTPC, mfloat5, 0, this);
L1341:         goto L360;
L1346:         AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEvent(this->mPlayAudioTopDrift, this, true);
L1399:         this->mPlayTopDrift = mAkComponent2;
L1418:         this->mIsTopDrifting = true;
L1429:         goto ExecutionFlow.Pop();
L1430:         AkComponent* mAkComponent3 = AkGameplayStatics->PostAkEvent(this->mPlayBurnOutSound, this, true);
L1483:         this->mPlayIsBurningOut = mAkComponent3;
L1502:         this->mIsBurningOut = true;
L1513:         goto ExecutionFlow.Pop();
============ END FUNCTION BurnOutSound ==============





============ BEGIN FUNCTION GetDriftForceOffset ==============
L0:            Vector mVector = this->DriftForceLocation->K2_GetComponentLocation();
L50:           Vector ReturnValue = mVector;
============ END FUNCTION GetDriftForceOffset ==============





============ BEGIN FUNCTION ShouldStopVehicle ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           bool mbool = this->GetIsDrifting();
L40:           float mfloat = mWheeledVehicleMovementComponent->GetThrottle();
L90:           bool mbool1 = NearlyEqual_FloatFloat(mfloat, 0, 0.009999999776482582);
L129:          bool mbool2 = BooleanAND(mbool, mbool1);
L167:          bool ShouldStop = mbool2;
============ END FUNCTION ShouldStopVehicle ==============





============ BEGIN FUNCTION TurnOverVehicle ==============
L0:            Rotator mRotator = this->K2_GetActorRotation();
L28:           BreakRotator(mRotator, [ref] mfloat, [ref] mfloat1, [ref] mfloat2);
L74:           Rotator mRotator1 = MakeRotator(0, 0, mfloat2);
L121:          bool mbool = this->K2_SetActorRotation(mRotator1, true);
============ END FUNCTION TurnOverVehicle ==============





============ BEGIN FUNCTION AdjustThrottle ==============
L0:            float local_throttle = Throttle;
L27:           bool mbool = this->HasFuel();
L47:           if (!mbool) goto L93;
L61:           float adjustedThrottle = local_throttle;
L88:           <End of Inlined Event Graph Function>;
L93:           local_throttle = 0;
L116:          goto L61;
============ END FUNCTION AdjustThrottle ==============





============ BEGIN FUNCTION TogglePathVisibility ==============
L0:            bool mbool = this->GetPathVisibility();
L20:           bool mbool1 = Not_PreBool(mbool);
L49:           this->SetPathVisibility(mbool1);
L68:           bool mbool2 = this->GetPathVisibility();
L88:           FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L108:          mFGTargetPointLinkedList->SetPathVisibility(mbool2);
============ END FUNCTION TogglePathVisibility ==============





============ BEGIN FUNCTION ToggleAutoPilot ==============
L0:            this->FlushNetDormancy();
L10:           bool mbool = Not_PreBool(this->mIsAutoPilotEnabled);
L39:           this->mIsAutoPilotEnabled = mbool;
============ END FUNCTION ToggleAutoPilot ==============





============ BEGIN FUNCTION TogglePauseRecording ==============
L0:            this->FlushNetDormancy();
L10:           bool mbool = Not_PreBool(this->mIsRecording);
L39:           this->mIsRecording = mbool;
L58:           this->OnRep_mIsRecording();
============ END FUNCTION TogglePauseRecording ==============





============ BEGIN FUNCTION TickSimulationMovement ==============
L0:            bool mbool = this->HasFuel();
L20:           bool mbool1 = KismetSystemLibrary->K2_IsValidTimerHandle(this->mUpdateMovementHandle);
L71:           bool mbool2 = this->IsSimulated();
L91:           bool mbool3 = BooleanAND(mbool1, mbool2);
L129:          bool mbool4 = BooleanAND(mbool3, mbool);
L167:          if (!mbool4) goto L544;
L181:          FloatingPawnMovement* mFloatingPawnMovement = this->GetSimulationComponent();
L201:          Rotator mRotator = this->K2_GetActorRotation();
L229:          Vector mVector = GetForwardVector(mRotator);
L266:          Vector mVector1 = Multiply_VectorFloat(mVector, 800);
L308:          mFloatingPawnMovement->AddInputVector(mVector1, false);
L354:          FloatingPawnMovement* mFloatingPawnMovement1 = this->GetSimulationComponent();
L374:          float mfloat = Conv_IntToFloat(this->mSpeedLimit);
L411:          float mfloat1 = Divide_FloatFloat(mfloat, 3.5999999046325684);
L453:          float mfloat2 = Multiply_FloatFloat(mfloat1, 100);
L495:          mFloatingPawnMovement1->MaxSpeed = mfloat2;
============ END FUNCTION TickSimulationMovement ==============





============ BEGIN FUNCTION CalculateReverseSteering ==============
L0:            float mfloat = RandomFloatInRange(-0.800000011920929, 0.800000011920929);
L38:           Rotator mRotator = this->K2_GetActorRotation();
L66:           Vector mVector = this->K2_GetActorLocation();
L94:           Rotator mRotator1 = FindLookAtRotation([ref] mVector, [ref] this->mCurrentDestination);
L140:          Rotator mRotator2 = NormalizedDeltaRotator(mRotator1, mRotator);
L186:          BreakRotator(mRotator2, [ref] mfloat1, [ref] mfloat2, [ref] mfloat3);
L232:          float mfloat4 = MapRangeUnclamped(mfloat3, -180, 180, 1, -1);
L289:          float mfloat5 = Abs(mfloat4);
L326:          bool mbool = Less_FloatFloat(mfloat5, 0.20000000298023224);
L360:          float mfloat6 = SelectFloat(mfloat, mfloat4, mbool);
L415:          this->mReverseSteering = mfloat6;
============ END FUNCTION CalculateReverseSteering ==============





============ BEGIN FUNCTION StopVehicle ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           mWheeledVehicleMovementComponent->SetBrakeInput(1);
L57:           mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L77:           mWheeledVehicleMovementComponent->SetThrottleInput(0);
L114:          mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L134:          mWheeledVehicleMovementComponent->SetHandbrakeInput(true);
============ END FUNCTION StopVehicle ==============





============ BEGIN FUNCTION canMove ==============
L0:            FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L20:           FGTargetPoint* mFGTargetPoint = mFGTargetPointLinkedList->GetCurrentTarget();
L62:           bool mbool = KismetSystemLibrary->IsValid(mFGTargetPoint);
L113:          if (!mbool) goto L284;
L127:          mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L147:          mFGTargetPoint = mFGTargetPointLinkedList->GetCurrentTarget();
L189:          bool mbool1 = mFGTargetPoint->IsTargetSpeedStill();
L231:          bool mbool2 = Not_PreBool(mbool1);
L260:          bool canMove = mbool2;
L279:          <End of Inlined Event Graph Function>;
L284:          canMove = false;
============ END FUNCTION canMove ==============





============ BEGIN FUNCTION UpdateEngineLoadSound ==============
L0:            float mfloat = Multiply_FloatFloat(dt, 1);
L42:           float mfloat1 = Multiply_FloatFloat(mfloat, this->mAudioSign);
L88:           float mfloat2 = Add_FloatFloat(this->mEngineLoadTimer, mfloat1);
L134:          float mfloat3 = FMin(mfloat2, this->mEngineLoadTimerMax);
L180:          float mfloat4 = FMax(mfloat3, 0);
L222:          this->mEngineLoadTimer = mfloat4;
L249:          bool mbool = EqualEqual_FloatFloat(this->mEngineLoadTimer, this->mEngineLoadTimerMax);
L287:          if (!mbool) goto L315;
L301:          this->DidGearUp();
============ END FUNCTION UpdateEngineLoadSound ==============





============ BEGIN FUNCTION UpdateAccelerationSound ==============
L0:            if (!this->mDidSwitchThrottleState) goto L483;
L14:           WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L34:           float mfloat = mWheeledVehicleMovementComponent->GetThrottle();
L84:           bool mbool = Greater_FloatFloat(mfloat, 0);
L118:          if (!mbool) goto L230;
L132:          this->mAudioSign = 1;
L155:          this->StartAccelerating();
L169:          AkGameplayStatics->SetActorRTPCValue("RTPC_Industrial_Truck_AccelState", 1, 100, this);
L225:          <End of Inlined Event Graph Function>;
L230:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L250:          float mfloat1 = mWheeledVehicleMovementComponent1->GetThrottle();
L300:          bool mbool1 = Less_FloatFloat(mfloat1, 0);
L334:          if (!mbool1) goto L390;
L348:          this->mAudioSign = 1;
L371:          this->StartAccelerating();
L385:          goto L169;
L390:          this->mAudioSign = -1;
L413:          this->StopAccelerating();
L427:          AkGameplayStatics->SetActorRTPCValue("RTPC_Industrial_Truck_AccelState", 0, 100, this);
============ END FUNCTION UpdateAccelerationSound ==============





============ BEGIN FUNCTION UpdateThrottleState ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           float mfloat = mWheeledVehicleMovementComponent->GetThrottle();
L70:           bool mbool = NotEqual_FloatFloat(this->mPreviousThrottleValue, mfloat);
L108:          if (!mbool) goto L235;
L122:          mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L142:          mfloat = mWheeledVehicleMovementComponent->GetThrottle();
L192:          this->mPreviousThrottleValue = mfloat;
L219:          this->mDidSwitchThrottleState = true;
L230:          <End of Inlined Event Graph Function>;
L235:          this->mDidSwitchThrottleState = false;
============ END FUNCTION UpdateThrottleState ==============





============ BEGIN FUNCTION DidGearDown ==============
L0:            float mfloat = Multiply_FloatFloat(this->mEngineLoadTimer, 0.699999988079071);
L42:           this->mEngineLoadTimer = mfloat;
L69:           bool mbool = this->GetIsSignificant();
L89:           bool mbool1 = this->HasFuel();
L109:          bool mbool2 = BooleanAND(mbool1, mbool);
L147:          if (!mbool2) goto L214;
L161:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(this->mEngineRevDown, this, true);
============ END FUNCTION DidGearDown ==============





============ BEGIN FUNCTION DidGearUp ==============
L0:            float mfloat = Multiply_FloatFloat(this->mEngineLoadTimer, 0.5);
L42:           float mfloat1 = Multiply_FloatFloat(this->mEngineLoadTimerMax, 0.800000011920929);
L84:           bool mbool = Greater_FloatFloat(this->mEngineLoadTimer, mfloat1);
L122:          float mfloat2 = SelectFloat(mfloat, this->mEngineLoadTimer, mbool);
L177:          this->mEngineLoadTimer = mfloat2;
L204:          bool mbool1 = this->GetIsSignificant();
L224:          bool mbool2 = this->HasFuel();
L244:          bool mbool3 = BooleanAND(mbool2, mbool1);
L282:          if (!mbool3) goto L349;
L296:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(this->mEngineRevUp, this, true);
============ END FUNCTION DidGearUp ==============





============ BEGIN FUNCTION CheckCurrentGear ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           int32 mint32 = mWheeledVehicleMovementComponent->GetCurrentGear();
L70:           bool mbool = NotEqual_IntInt(mint32, 0);
L104:          bool mbool1 = NotEqual_IntInt(mint32, this->mCachedGear);
L142:          bool mbool2 = BooleanAND(mbool, mbool1);
L180:          if (!mbool2) goto L451;
L194:          mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L214:          mint32 = mWheeledVehicleMovementComponent->GetCurrentGear();
L264:          bool mbool3 = Greater_IntInt(mint32, this->mCachedGear);
L302:          if (!mbool3) goto L432;
L316:          this->DidGearUp();
L330:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L350:          int32 mint321 = mWheeledVehicleMovementComponent1->GetCurrentGear();
L400:          this->mCachedGear = mint321;
L427:          <End of Inlined Event Graph Function>;
L432:          this->DidGearDown();
L446:          goto L330;
============ END FUNCTION CheckCurrentGear ==============





============ BEGIN FUNCTION StopSoundLoops ==============
L0:            if (!this->mDidStartSoundLoops) goto L455;
L14:           this->mDidStartSoundLoops = false;
L25:           AkComponent* mAkComponent = AkGameplayStatics->PostAkEventAttached(this->mEngineLoopStop, this->mMesh, this->mEngineSocketName, true);
L95:           AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(this->mTireLoopStop, this, true);
L148:          AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEventAttached(this->mExhaustLoopStop, this->mMesh, this->mExhaustSocketName, true);
L218:          AkComponent* mAkComponent3 = AkGameplayStatics->PostAkEventAttached(this->mStopRevEngine, this->mMesh, this->mExhaustSocketName, true);
L288:          AkComponent* mAkComponent4 = AkGameplayStatics->PostAkEventAttached(this->mStopRevExhaust, this->mMesh, this->mEngineSocketName, true);
L358:          if (!this->mShouldUpdateTireSurfaces) goto L414;
L372:          KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mTireSoundTimer);
L414:          AkGameplayStatics->StopAndDestroyComponent(this->mTireSoundLoop);
============ END FUNCTION StopSoundLoops ==============





============ BEGIN FUNCTION StartSoundLoops ==============
L0:            if (!this->mDidStartSoundLoops) goto L19;
L14:           <End of Inlined Event Graph Function>;
L19:           bool mbool = this->HasFuel();
L39:           if (!mbool) goto L424;
L53:           this->mDidStartSoundLoops = true;
L64:           AkComponent* mAkComponent = AkGameplayStatics->PostAkEventAttached(this->mEngineLoopStart, this->mMesh, this->mEngineSocketName, true);
L134:          this->mEngineSoundLoop = mAkComponent;
L153:          AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(this->mTireLoopStart, this, true);
L206:          this->mTireSoundLoop = mAkComponent1;
L225:          AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEventAttached(this->mExhaustLoopStart, this->mMesh, this->mExhaustSocketName, true);
L295:          if (!this->mShouldUpdateTireSurfaces) goto L424;
L309:          mFScriptDelegate->BindUFunction(this, UpdateTireSound);
L332:          TimerHandle mTimerHandle = KismetSystemLibrary->K2_SetTimerDelegate(mFScriptDelegate, 1, true);
L397:          this->mTireSoundTimer = mTimerHandle;
============ END FUNCTION StartSoundLoops ==============





============ BEGIN FUNCTION ToggleFreeCamera ==============
L0:            bool mbool = Not_PreBool(this->mIsFreeCamera);
L29:           this->mIsFreeCamera = mbool;
============ END FUNCTION ToggleFreeCamera ==============





============ BEGIN FUNCTION GetLookAtDecription ==============
L0:            bool mbool = EqualEqual_ClassClass(State.State, UseState_WorkBench);
L47:           if (!mbool) goto L484;
L61:           Controller* mController = byCharacter->GetController();
L103:          HUDHelpers->GetKeyNameForActionSimple(mController, "Use", this, [ref] mFText);
L171:          mFormatArgumentData.ArgumentName = "BUTTON";
L206:          mFormatArgumentData.ArgumentValueType = 4;
L235:          mFormatArgumentData.ArgumentValue = mFText;
L271:          mFormatArgumentData.ArgumentValueInt = 0;
L303:          mFormatArgumentData.ArgumentValueFloat = 0;
L335:          mFormatArgumentData.ArgumentValueGender = 0;
L364:          TArray<FormatArgumentData> mTArray<FormatArgumentData> = [mFormatArgumentData];
L384:          FText mFText1 = KismetTextLibrary->Format(this->mLookAtText, mTArray<FormatArgumentData>);
L452:          FText ReturnValue = mFText1;
L479:          goto L557;
L484:          FText mFText2 = this->GetLookAtDecription(byCharacter, [ref] State);
L530:          ReturnValue = mFText2;
============ END FUNCTION GetLookAtDecription ==============





============ BEGIN FUNCTION OpenVehicleUI ==============
L0:            FGCharacterPlayer* localCharacter = inCharacter;
L19:           Controller* mController = inCharacter->GetController();
L61:           FGPlayerController* mFGPlayerController = Cast<Class /Script/FactoryGame.FGPlayerController>(mController);
L97:           bool mbool = mFGPlayerController;
L126:          if (!mbool) goto L525;
L140:          BP_RemoteCallObject* mBP_RemoteCallObject = mFGPlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L191:          mBP_RemoteCallObject->ServerOpenVehicleTrunk(this, localCharacter);
L237:          Controller* mController1 = localCharacter->GetController();
L279:          FGPlayerController* mFGPlayerController1 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController1);
L315:          bool mbool1 = mFGPlayerController1;
L344:          if (!mbool1) goto L525;
L358:          HUD* mHUD = mFGPlayerController1->GetHUD();
L400:          FGHUD* mFGHUD = Cast<Class /Script/FactoryGame.FGHUD>(mHUD);
L436:          bool mbool2 = mFGHUD;
L465:          if (!mbool2) goto L525;
L479:          mFGHUD->OpenInteractUI(this->mInteractWidget, this);
============ END FUNCTION OpenVehicleUI ==============





============ BEGIN FUNCTION PonderOpeningTrunk ==============
L0:            FGCharacterPlayer* localCharacter = inCharacter;
L19:           bool mbool = localCharacter->IsLocallyControlled();
L65:           bool mbool1 = EqualEqual_ObjectObject(this->mTrunkUser, nullptr);
L95:           bool mbool2 = EqualEqual_ObjectObject(this->mTrunkUser, localCharacter);
L133:          bool mbool3 = BooleanOR(mbool2, mbool1);
L171:          bool mbool4 = BooleanAND(mbool3, mbool);
L209:          if (!mbool4) goto L265;
L223:          if (!this->mIsInventoryOpen) goto L242;
L237:          <End of Inlined Event Graph Function>;
L242:          this->OpenVehicleUI(localCharacter);
============ END FUNCTION PonderOpeningTrunk ==============





============ BEGIN FUNCTION UpdateUseState ==============
L0:            bool mbool = EqualEqual_ObjectObject(componentHit, this->Box);
L38:           if (!mbool) goto L458;
L52:           FGBlueprintFunctionLibrary->UpdateUseState([ref] out_useState, UseState_WorkBench);
L102:          bool mbool1 = byCharacter->IsLocallyControlled();
L148:          if (!mbool1) goto L860;
L162:          Controller* mController = byCharacter->GetController();
L204:          FGPlayerController* mFGPlayerController = Cast<Class /Script/FactoryGame.FGPlayerController>(mController);
L240:          bool mbool2 = mFGPlayerController;
L269:          if (!mbool2) goto L860;
L283:          HUD* mHUD = mFGPlayerController->GetHUD();
L325:          FGHUD* mFGHUD = Cast<Class /Script/FactoryGame.FGHUD>(mHUD);
L361:          bool mbool3 = mFGHUD;
L390:          if (!mbool3) goto L860;
L404:          mFGHUD->SetCrosshairState(5);
L438:          this->UpdateOutline(true);
L453:          <End of Inlined Event Graph Function>;
L458:          this->UpdateUseState(byCharacter, [ref] atLocation, componentHit, [ref] out_useState);
L504:          mbool1 = byCharacter->IsLocallyControlled();
L550:          if (!mbool1) goto L860;
L564:          mController = byCharacter->GetController();
L606:          FGPlayerController* mFGPlayerController1 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController);
L642:          bool mbool4 = mFGPlayerController1;
L671:          if (!mbool4) goto L860;
L685:          HUD* mHUD1 = mFGPlayerController1->GetHUD();
L727:          FGHUD* mFGHUD1 = Cast<Class /Script/FactoryGame.FGHUD>(mHUD1);
L763:          bool mbool5 = mFGHUD1;
L792:          if (!mbool5) goto L860;
L806:          mFGHUD1->SetCrosshairState(3);
L840:          this->UpdateOutline(false);
L855:          goto L453;
============ END FUNCTION UpdateUseState ==============





============ BEGIN FUNCTION OnRep_mIsFollowingPath ==============
L0:            if (!this->mIsFollowingPath) goto L33;
L14:           this->StartSoundLoops();
L28:           <End of Inlined Event Graph Function>;
L33:           bool mbool = this->IsDriving();
L53:           if (!mbool) goto L72;
L67:           <End of Inlined Event Graph Function>;
L72:           this->StopSoundLoops();
============ END FUNCTION OnRep_mIsFollowingPath ==============





============ BEGIN FUNCTION UpdateSpeedLimit ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(TargetPoint);
L51:           if (!mbool) goto L199;
L65:           this->FlushNetDormancy();
L75:           int32 mint32 = TargetPoint->GetTargetSpeed();
L125:          int32 mint321 = Max(mint32, 10);
L167:          this->mSpeedLimit = mint321;
L194:          <End of Inlined Event Graph Function>;
L199:          this->FlushNetDormancy();
L209:          this->mSpeedLimit = -1;
============ END FUNCTION UpdateSpeedLimit ==============





============ BEGIN FUNCTION DoReverseToFreedom ==============
L0:            float mfloat = Add_FloatFloat(this->mTimeSpentOnTarget, this->mUpdateDelta);
L46:           this->mTimeSpentOnTarget = mfloat;
L73:           bool mbool = Less_FloatFloat(this->mTimeSpentOnTarget, this->mMaxReverseTime);
L111:          if (!mbool) goto L280;
L125:          this->AdjustThrottle(-0.699999988079071, [ref] mfloat1);
L153:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L173:          mWheeledVehicleMovementComponent->SetThrottleInput(mfloat1);
L214:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L234:          mWheeledVehicleMovementComponent1->SetSteeringInput(this->mReverseSteering);
L275:          <End of Inlined Event Graph Function>;
L280:          this->StopVehicle();
L294:          KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mUpdateMovementHandle);
L336:          this->LocationReached->ProcessMulticastDelegate();
============ END FUNCTION DoReverseToFreedom ==============





============ BEGIN FUNCTION ReverseToFreedom ==============
L0:            this->mTimeSpentOnTarget = 0;
L23:           KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mUpdateMovementHandle);
L65:           float mfloat = RandomFloatInRange(1.2999999523162842, 2.5);
L103:          this->mMaxReverseTime = mfloat;
L130:          this->CalculateReverseSteering();
L144:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L164:          mWheeledVehicleMovementComponent->SetHandbrakeInput(false);
L197:          mFScriptDelegate->BindUFunction(this, DoReverseToFreedom);
L220:          TimerHandle mTimerHandle = KismetSystemLibrary->K2_SetTimerDelegate(mFScriptDelegate, this->mUpdateDelta, true);
L289:          this->mUpdateMovementHandle = mTimerHandle;
============ END FUNCTION ReverseToFreedom ==============





============ BEGIN FUNCTION CacheSpeedInKMH ==============
L0:            float mfloat = this->GetForwardSpeed();
L28:           float mfloat1 = Multiply_FloatFloat(mfloat, 0.035999998450279236);
L70:           int32 mint32 = FTrunc(mfloat1);
L107:          this->mSpeedInKMH = mint32;
============ END FUNCTION CacheSpeedInKMH ==============





============ BEGIN FUNCTION OnRep_mIsRecording ==============
L0:            if (!this->mIsRecording) goto L38;
L14:           this->OnStartRecording->ProcessMulticastDelegate();
L33:           <End of Inlined Event Graph Function>;
L38:           this->OnStopRecording->ProcessMulticastDelegate();
============ END FUNCTION OnRep_mIsRecording ==============





============ BEGIN FUNCTION MoveToLocation ==============
L0:            this->mTimeSpentOnTarget = 0;
L23:           mFScriptDelegate->BindUFunction(this, UpdateVehicleMovement);
L46:           TimerHandle mTimerHandle = KismetSystemLibrary->K2_SetTimerDelegate(mFScriptDelegate, this->mUpdateDelta, true);
L115:          this->mUpdateMovementHandle = mTimerHandle;
============ END FUNCTION MoveToLocation ==============





============ BEGIN FUNCTION TickRecording ==============
L0:            bool mbool = Not_PreBool(this->mIsMenuOpen);
L29:           bool mbool1 = this->HasAuthority();
L49:           bool mbool2 = BooleanAND(this->mIsRecording, mbool1);
L87:           bool mbool3 = BooleanAND(mbool2, mbool);
L125:          if (!mbool3) goto L301;
L139:          float mfloat = Add_FloatFloat(this->mRecordCounter, dt);
L185:          this->mRecordCounter = mfloat;
L212:          bool mbool4 = GreaterEqual_FloatFloat(this->mRecordCounter, this->mRecordInterval);
L250:          if (!mbool4) goto L301;
L264:          this->mRecordCounter = 0;
L287:          this->PlaceTargetPoint();
============ END FUNCTION TickRecording ==============





============ BEGIN FUNCTION UpdateVehicleMovement ==============
L0:            float mfloat = Add_FloatFloat(this->mTimeSpentOnTarget, this->mUpdateDelta);
L46:           this->mTimeSpentOnTarget = mfloat;
L73:           FGCharacterPlayer* mFGCharacterPlayer = this->GetDriver();
L93:           bool mbool = KismetSystemLibrary->IsValid(mFGCharacterPlayer);
L144:          if (!mbool) goto L163;
L158:          <End of Inlined Event Graph Function>;
L163:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L183:          mWheeledVehicleMovementComponent->SetHandbrakeInput(false);
L216:          bool mbool1 = this->HasFuel();
L236:          bool mbool2 = this->IsSimulated();
L256:          bool mbool3 = BooleanAND(mbool2, mbool1);
L294:          if (!mbool3) goto L775;
L308:          bool mbool4 = GreaterEqual_FloatFloat(this->mTimeSpentOnTarget, this->mRecordInterval);
L346:          if (!mbool4) goto L822;
L360:          FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L380:          FGTargetPoint* mFGTargetPoint = mFGTargetPointLinkedList->GetCurrentTarget();
L422:          Vector mVector = mFGTargetPoint->K2_GetActorLocation();
L472:          Rotator mRotator = mFGTargetPoint->K2_GetActorRotation();
L522:          bool mbool5 = this->K2_SetActorLocationAndRotation(mVector, mRotator, false, [ref] mHitResult, true);
L571:          this->GetTargetDistance([ref] mfloat1);
L594:          bool mbool6 = Less_FloatFloat(mfloat1, 500);
L628:          if (!mbool6) goto L822;
L642:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L662:          mWheeledVehicleMovementComponent1->SetHandbrakeInput(true);
L695:          this->TargetReached();
L709:          this->LocationReached->ProcessMulticastDelegate();
L728:          KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mUpdateMovementHandle);
L770:          <End of Inlined Event Graph Function>;
L775:          this->GatherData();
L789:          this->UpdateSteering();
L803:          this->UpdateThrottle();
L817:          goto L571;
============ END FUNCTION UpdateVehicleMovement ==============





============ BEGIN FUNCTION StartRecording ==============
L0:            this->FlushNetDormancy();
L10:           this->mIsRecording = true;
L21:           this->OnRep_mIsRecording();
L35:           this->FlushNetDormancy();
L45:           this->mIsRecordSessionActive = true;
L56:           this->mRecordCounter = this->mRecordInterval;
L83:           this->RemoveOldTargets();
============ END FUNCTION StartRecording ==============





============ BEGIN FUNCTION StopRecording ==============
L0:            this->FlushNetDormancy();
L10:           this->mIsRecordSessionActive = false;
L21:           this->FlushNetDormancy();
L31:           this->mIsRecording = false;
L42:           this->OnRep_mIsRecording();
L56:           this->mRecordCounter = 0;
============ END FUNCTION StopRecording ==============





============ BEGIN FUNCTION GatherData ==============
L0:            Rotator mRotator = this->K2_GetActorRotation();
L28:           Vector mVector = this->K2_GetActorLocation();
L56:           Rotator mRotator1 = FindLookAtRotation([ref] mVector, [ref] this->mCurrentDestination);
L102:          Rotator mRotator2 = NormalizedDeltaRotator(mRotator1, mRotator);
L148:          BreakRotator(mRotator2, [ref] mfloat, [ref] mfloat1, [ref] mfloat2);
L194:          float mfloat3 = MapRangeClamped(mfloat2, -25, 25, -1, 1);
L251:          this->mDesiredSteering = mfloat3;
L278:          mRotator = this->K2_GetActorRotation();
L306:          mVector = this->K2_GetActorLocation();
L334:          mRotator1 = FindLookAtRotation([ref] mVector, [ref] this->mCurrentDestination);
L380:          mRotator2 = NormalizedDeltaRotator(mRotator1, mRotator);
L426:          BreakRotator(mRotator2, [ref] mfloat, [ref] mfloat1, [ref] mfloat2);
L472:          bool mbool = InRange_FloatFloat(mfloat2, -120, 120, true, true);
L513:          this->mObjectInFront = mbool;
L532:          this->GetTargetDistance([ref] mfloat4);
L555:          bool mbool1 = Less_FloatFloat(mfloat4, this->mReverseMaxDistance);
L593:          bool mbool2 = Not_PreBool(this->mObjectInFront);
L622:          bool mbool3 = BooleanAND(mbool2, mbool1);
L660:          this->mCloseEnoughToReverse = mbool3;
============ END FUNCTION GatherData ==============





============ BEGIN FUNCTION RemoveOldTargets ==============
L0:            FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L20:           bool mbool = KismetSystemLibrary->IsValid(mFGTargetPointLinkedList);
L71:           if (!mbool) goto L137;
L85:           mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L105:          mFGTargetPointLinkedList->ClearRecording();
============ END FUNCTION RemoveOldTargets ==============





============ BEGIN FUNCTION PlaceTargetPoint ==============
L0:            FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L20:           FGTargetPoint* mFGTargetPoint = mFGTargetPointLinkedList->GetLastTarget();
L62:           bool mbool = KismetSystemLibrary->IsValid(mFGTargetPoint);
L113:          if (!mbool) goto L476;
L127:          FGTargetPointLinkedList* mFGTargetPointLinkedList1 = this->GetTargetNodeLinkedList();
L147:          FGTargetPoint* mFGTargetPoint1 = mFGTargetPointLinkedList1->GetLastTarget();
L189:          bool mbool1 = mFGTargetPoint1->IsTargetSpeedStill();
L231:          float mfloat = mFGTargetPoint1->GetDistanceTo(this);
L282:          bool mbool2 = Less_FloatFloat(mfloat, 100);
L316:          bool mbool3 = BooleanAND(mbool1, mbool2);
L354:          if (!mbool3) goto L476;
L368:          FGTargetPointLinkedList* mFGTargetPointLinkedList2 = this->GetTargetNodeLinkedList();
L388:          FGTargetPoint* mFGTargetPoint2 = mFGTargetPointLinkedList2->GetLastTarget();
L430:          mFGTargetPoint2->IncreaseWaitTime(this->mRecordInterval);
L471:          <End of Inlined Event Graph Function>;
L476:          Transform mTransform = this->GetTransform();
L504:          Actor* mActor = GameplayStatics->BeginDeferredActorSpawnFromClass(this, BP_VehicleTargetPoint, [ref] mTransform, 0, nullptr);
L568:          int32 mint32 = Abs_Int(this->mSpeedInKMH);
L605:          KismetSystemLibrary->SetIntPropertyByName(mActor, "mTargetSpeed", mint32);
L668:          KismetSystemLibrary->SetObjectPropertyByName(mActor, "Instigator", this);
L723:          mTransform = this->GetTransform();
L751:          BP_VehicleTargetPoint* mBP_VehicleTargetPoint = GameplayStatics->FinishSpawningActor(mActor, [ref] mTransform);
L811:          BP_VehicleTargetPoint* localNewPoint = mBP_VehicleTargetPoint;
L830:          localNewPoint->SetOwningVehicle(this);
L863:          localNewPoint->SetMeshRotation();
L899:          FGTargetPointLinkedList* mFGTargetPointLinkedList3 = this->GetTargetNodeLinkedList();
L919:          mFGTargetPointLinkedList3->InsertItem(localNewPoint);
============ END FUNCTION PlaceTargetPoint ==============





============ BEGIN FUNCTION TargetReached ==============
============ END FUNCTION TargetReached ==============





============ BEGIN FUNCTION SetNewPath ==============
L0:            FGTargetPointLinkedList* mFGTargetPointLinkedList = this->GetTargetNodeLinkedList();
L20:           mFGTargetPointLinkedList->SetNextTarget();
L52:           this->mTimeSpentOnTarget = 0;
L75:           FGTargetPointLinkedList* mFGTargetPointLinkedList1 = this->GetTargetNodeLinkedList();
L95:           FGTargetPoint* mFGTargetPoint = mFGTargetPointLinkedList1->GetCurrentTarget();
L137:          BP_VehicleTargetPoint* mBP_VehicleTargetPoint = Cast<BlueprintGeneratedClass /Game/FactoryGame/Buildable/Vehicle/BP_VehicleTargetPoint.BP_VehicleTargetPoint_C>(mFGTargetPoint);
L173:          bool mbool = mBP_VehicleTargetPoint;
L202:          BP_VehicleTargetPoint* localElement = mBP_VehicleTargetPoint;
L221:          this->UpdateSpeedLimit(localElement);
L244:          Vector mVector = localElement->K2_GetActorLocation();
L294:          this->mCurrentDestination = mVector;
L321:          BP_VehicleTargetPoint* newTarget = localElement;
============ END FUNCTION SetNewPath ==============





============ BEGIN FUNCTION GetTargetDistance ==============
L0:            Vector mVector = this->K2_GetActorLocation();
L28:           Vector mVector1 = Subtract_VectorVector(mVector, this->mCurrentDestination);
L74:           float mfloat = VSize(mVector1);
L111:          float Distance = mfloat;
============ END FUNCTION GetTargetDistance ==============





============ BEGIN FUNCTION UpdateThrottle ==============
L0:            float mfloat = Abs(this->mDesiredSteering);
L37:           bool mbool = Greater_FloatFloat(mfloat, 0.5);
L71:           bool mbool1 = GreaterEqual_IntInt(this->mSpeedInKMH, 10);
L105:          bool mbool2 = BooleanAND(mbool1, mbool);
L143:          bool localSpeedToHighForTurn = mbool2;
L162:          bool mbool3 = Greater_IntInt(this->mSpeedInKMH, this->mSpeedLimit);
L200:          bool mbool4 = NotEqual_IntInt(this->mSpeedLimit, -1);
L234:          bool mbool5 = BooleanAND(mbool4, mbool3);
L272:          if (!mbool5) goto L529;
L286:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L306:          mWheeledVehicleMovementComponent->SetThrottleInput(0);
L343:          bool mbool6 = EqualEqual_IntInt(this->mSpeedLimit, 0);
L377:          bool mbool7 = GreaterEqual_IntInt(this->mSpeedInKMH, this->mSpeedLimit);
L415:          bool mbool8 = BooleanOR(mbool6, mbool7);
L453:          if (!mbool8) goto L994;
L467:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L487:          mWheeledVehicleMovementComponent1->SetBrakeInput(1);
L524:          <End of Inlined Event Graph Function>;
L529:          bool mbool9 = Not_PreBool(this->mObjectInFront);
L558:          bool mbool10 = BooleanAND(mbool9, this->mCloseEnoughToReverse);
L596:          float mfloat1 = SelectFloat(-1, 1, mbool10);
L643:          this->AdjustThrottle(mfloat1, [ref] mfloat2);
L675:          float localThrottle = mfloat2;
L702:          WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent2 = this->GetVehicleMovementComponent();
L722:          mWheeledVehicleMovementComponent2->SetThrottleInput(localThrottle);
L763:          float Temp_float_Variable = 1;
L786:          float Temp_float_Variable1 = 0;
L809:          bool Temp_bool_Variable = localSpeedToHighForTurn;
L828:          mWheeledVehicleMovementComponent2 = this->GetVehicleMovementComponent();
L848:          mWheeledVehicleMovementComponent2->SetBrakeInput(switch (Temp_bool_Variable) {
case false -> Temp_float_Variable1;
case true -> Temp_float_Variable;
default -> mfloat3;
});
L933:          mWheeledVehicleMovementComponent2 = this->GetVehicleMovementComponent();
L953:          mWheeledVehicleMovementComponent2->SetHandbrakeInput(localSpeedToHighForTurn);
============ END FUNCTION UpdateThrottle ==============





============ BEGIN FUNCTION UpdateSteering ==============
L0:            WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L20:           bool mbool = Not_PreBool(this->mObjectInFront);
L49:           bool mbool1 = BooleanAND(mbool, this->mCloseEnoughToReverse);
L87:           float mfloat = SelectFloat(0, this->mDesiredSteering, mbool1);
L138:          mWheeledVehicleMovementComponent->SetSteeringInput(mfloat);
============ END FUNCTION UpdateSteering ==============





============ BEGIN FUNCTION InpActEvt_Use_K2Node_InputActionEvent_6 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key6) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(7756);
============ END FUNCTION InpActEvt_Use_K2Node_InputActionEvent_6 ==============





============ BEGIN FUNCTION InpActEvt_Reload_K2Node_InputActionEvent_5 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key5) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(7103);
============ END FUNCTION InpActEvt_Reload_K2Node_InputActionEvent_5 ==============





============ BEGIN FUNCTION InpActEvt_Jump_Drift_K2Node_InputActionEvent_4 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key4) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6462);
============ END FUNCTION InpActEvt_Jump_Drift_K2Node_InputActionEvent_4 ==============





============ BEGIN FUNCTION InpActEvt_Jump_Drift_K2Node_InputActionEvent_3 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key3) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6423);
============ END FUNCTION InpActEvt_Jump_Drift_K2Node_InputActionEvent_3 ==============





============ BEGIN FUNCTION InpActEvt_ResourceScanner_ToggleVehicleRecording_K2Node_InputActionEvent_2 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key2) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6156);
============ END FUNCTION InpActEvt_ResourceScanner_ToggleVehicleRecording_K2Node_InputActionEvent_2 ==============





============ BEGIN FUNCTION InpActEvt_ResourceScanner_ToggleVehicleRecording_K2Node_InputActionEvent_1 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key1) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(4698);
============ END FUNCTION InpActEvt_ResourceScanner_ToggleVehicleRecording_K2Node_InputActionEvent_1 ==============





============ BEGIN FUNCTION InpActEvt_PrimaryFire_K2Node_InputActionEvent_0 ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputActionEvent_Key) = Key;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(4003);
============ END FUNCTION InpActEvt_PrimaryFire_K2Node_InputActionEvent_0 ==============





============ BEGIN FUNCTION SetActorRepresentationColor ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_newColor) = NewColor;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6400);
============ END FUNCTION SetActorRepresentationColor ==============





============ BEGIN FUNCTION ReceiveBeginPlay ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(6395);
============ END FUNCTION ReceiveBeginPlay ==============





============ BEGIN FUNCTION ReceiveTick ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_DeltaSeconds) = DeltaSeconds;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6371);
============ END FUNCTION ReceiveTick ==============





============ BEGIN FUNCTION TickVehicleSound ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_CustomEvent_dt) = dt;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(5035);
============ END FUNCTION TickVehicleSound ==============





============ BEGIN FUNCTION ServerToggleRecording ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(3257);
============ END FUNCTION ServerToggleRecording ==============





============ BEGIN FUNCTION ReceiveUnpossessed ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_OldController) = OldController;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(2163);
============ END FUNCTION ReceiveUnpossessed ==============





============ BEGIN FUNCTION ReceiveHit ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_MyComp) = MyComp;
L18:           PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_Other) = Other;
L36:           PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_OtherComp) = OtherComp;
L54:           PERSISTENT_FRAME(BoolProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_bSelfMoved) = bSelfMoved;
L72:           PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_HitLocation) = HitLocation;
L90:           PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_HitNormal) = HitNormal;
L108:          PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_NormalImpulse) = NormalImpulse;
L126:          PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_Hit) = Hit;
L144:          this->ExecuteUbergraph_BP_WheeledVehicle(830);
============ END FUNCTION ReceiveHit ==============





============ BEGIN FUNCTION ReceiveDestroyed ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(1532);
============ END FUNCTION ReceiveDestroyed ==============





============ BEGIN FUNCTION ResetImpactSound ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(1567);
============ END FUNCTION ResetImpactSound ==============





============ BEGIN FUNCTION OnUse ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_byCharacter) = byCharacter;
L18:           PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_state) = State;
L36:           this->ExecuteUbergraph_BP_WheeledVehicle(1807);
============ END FUNCTION OnUse ==============





============ BEGIN FUNCTION Multicast_OpenTrunk ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(2161);
============ END FUNCTION Multicast_OpenTrunk ==============





============ BEGIN FUNCTION Multicast_CloseTrunk ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(2162);
============ END FUNCTION Multicast_CloseTrunk ==============





============ BEGIN FUNCTION ReceivePossessed ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_NewController) = NewController;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(2399);
============ END FUNCTION ReceivePossessed ==============





============ BEGIN FUNCTION ClientClearAIMovment ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(2438);
============ END FUNCTION ClientClearAIMovment ==============





============ BEGIN FUNCTION StartAccelerating ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(2481);
============ END FUNCTION StartAccelerating ==============





============ BEGIN FUNCTION StopAccelerating ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(2560);
============ END FUNCTION StopAccelerating ==============





============ BEGIN FUNCTION UpdateCamera ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(3934);
============ END FUNCTION UpdateCamera ==============





============ BEGIN FUNCTION WasDocked ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_atStation) = atStation;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(3949);
============ END FUNCTION WasDocked ==============





============ BEGIN FUNCTION ServerSetMenuOpen ==============
L0:            PERSISTENT_FRAME(BoolProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_CustomEvent_menuOpen) = menuOpen;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(4079);
============ END FUNCTION ServerSetMenuOpen ==============





============ BEGIN FUNCTION ServerClearPathRecording ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4421);
============ END FUNCTION ServerClearPathRecording ==============





============ BEGIN FUNCTION WasUndocked ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4450);
============ END FUNCTION WasUndocked ==============





============ BEGIN FUNCTION ServerTogglePauseRecording ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4495);
============ END FUNCTION ServerTogglePauseRecording ==============





============ BEGIN FUNCTION ServerToggleAutoPilot ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4510);
============ END FUNCTION ServerToggleAutoPilot ==============





============ BEGIN FUNCTION ServerTogglePathVisibility ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4525);
============ END FUNCTION ServerTogglePathVisibility ==============





============ BEGIN FUNCTION Server_Leave ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(4913);
============ END FUNCTION Server_Leave ==============





============ BEGIN FUNCTION ReceiveOnVehicleStartup ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(6106);
============ END FUNCTION ReceiveOnVehicleStartup ==============





============ BEGIN FUNCTION ReceiveOnVehicleShutDown ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(6131);
============ END FUNCTION ReceiveOnVehicleShutDown ==============





============ BEGIN FUNCTION ReceiveOnDriverEnter ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(6401);
============ END FUNCTION ReceiveOnDriverEnter ==============





============ BEGIN FUNCTION ReceiveOnDriverLeave ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(6412);
============ END FUNCTION ReceiveOnDriverLeave ==============





============ BEGIN FUNCTION InpAxisEvt_MoveForward_K2Node_InputAxisEvent_1 ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputAxisEvent_AxisValue1) = AxisValue;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(6657);
============ END FUNCTION InpAxisEvt_MoveForward_K2Node_InputAxisEvent_1 ==============





============ BEGIN FUNCTION InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2 ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_InputAxisEvent_AxisValue) = AxisValue;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(7016);
============ END FUNCTION InpAxisEvt_MoveRight_K2Node_InputAxisEvent_2 ==============





============ BEGIN FUNCTION Server_Honk ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(7108);
============ END FUNCTION Server_Honk ==============





============ BEGIN FUNCTION Multicast_Honk ==============
L0:            this->ExecuteUbergraph_BP_WheeledVehicle(7123);
============ END FUNCTION Multicast_Honk ==============





============ BEGIN FUNCTION Client_PlayFoliageDestroyedEffect ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_destroyEffect) = destroyEffect;
L18:           PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_destroyAudioEvent) = destroyAudioEvent;
L36:           PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_location) = Location;
L54:           this->ExecuteUbergraph_BP_WheeledVehicle(7741);
============ END FUNCTION Client_PlayFoliageDestroyedEffect ==============





============ BEGIN FUNCTION OpenVehicleTrunk ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_player1) = Player;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(7746);
============ END FUNCTION OpenVehicleTrunk ==============





============ BEGIN FUNCTION CloseVehicleTrunk ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/Vehicle/BP_WheeledVehicle.BP_WheeledVehicle_C:ExecuteUbergraph_BP_WheeledVehicle.K2Node_Event_player) = Player;
L18:           this->ExecuteUbergraph_BP_WheeledVehicle(7751);
============ END FUNCTION CloseVehicleTrunk ==============





============ BEGIN FUNCTION ExecuteUbergraph_BP_WheeledVehicle ==============
L5:            goto ComputedJump(EntryPoint);
L15:           this->ResetImpactSound();
L29:           goto ExecutionFlow.Pop();
L30:           this->FlushNetDormancy();
L40:           this->mIsInventoryOpen = true;
L51:           this->Multicast_OpenTrunk();
L65:           goto ExecutionFlow.Pop();
L66:           this->FlushNetDormancy();
L76:           this->mIsInventoryOpen = false;
L87:           this->Multicast_CloseTrunk();
L101:          goto ExecutionFlow.Pop();
L102:          this->FlushNetDormancy();
L112:          this->mIsAtStation = true;
L123:          goto ExecutionFlow.Pop();
L124:          this->FlushNetDormancy();
L134:          this->mIsAtStation = false;
L145:          goto ExecutionFlow.Pop();
L146:          BP_RemoteCallObject* mBP_RemoteCallObject = mFGPlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L197:          bool mbool = KismetSystemLibrary->IsValid(mBP_RemoteCallObject);
L248:          if (!mbool) goto L360;
L262:          mBP_RemoteCallObject = mFGPlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L313:          mBP_RemoteCallObject->Client_AddPawnHUD(this->mHUDClass, this);
L359:          goto ExecutionFlow.Pop();
L360:          KismetSystemLibrary->Delay(this, 0.20000000298023224, ScriptStruct /Script/Engine.LatentActionInfo(Linkage = 146, UUID = 1114818605, ExecutionFunction = "ExecuteUbergraph_BP_WheeledVehicle", CallbackTarget = this));
L436:          goto ExecutionFlow.Pop();
L437:          this->FlushNetDormancy();
L447:          this->mPossessed = true;
L458:          bool mbool1 = this->UpdateRepresentation();
L482:          FGPlayerController* mFGPlayerController = Cast<Class /Script/FactoryGame.FGPlayerController>(mController);
L518:          bool mbool2 = mFGPlayerController;
L547:          if (!mbool2) goto ExecutionFlow.Pop();
L557:          goto L146;
L562:          this->FlushNetDormancy();
L572:          this->mPossessed = false;
L583:          bool mbool3 = this->UpdateRepresentation();
L607:          FGPlayerController* mFGPlayerController1 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController1);
L643:          bool mbool4 = mFGPlayerController1;
L672:          if (!mbool4) goto ExecutionFlow.Pop();
L682:          BP_RemoteCallObject* mBP_RemoteCallObject1 = mFGPlayerController1->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L733:          mBP_RemoteCallObject1->Client_RemovePawnHUD();
L769:          goto ExecutionFlow.Pop();
L770:          this->FlushNetDormancy();
L780:          this->mTrunkUser = mFGCharacterPlayer;
L799:          goto L30;
L804:          this->FlushNetDormancy();
L814:          this->mTrunkUser = nullptr;
L825:          goto L66;
L830:          int32 mint32 = Abs_Int(this->mSpeedInKMH);
L867:          bool mbool5 = Greater_IntInt(mint32, 1);
L901:          bool mbool6 = this->GetIsSignificant();
L921:          bool mbool7 = BooleanAND(mbool5, mbool6);
L959:          if (!mbool7) goto ExecutionFlow.Pop();
L969:          float mfloat = mPrimitiveComponent->GetMass();
L1023:         int32 mint321 = Abs_Int(this->mSpeedInKMH);
L1060:         float mfloat1 = Conv_IntToFloat(mint321);
L1097:         Vector mVector = this->GetVelocity();
L1129:         float mfloat2 = VSize(mVector);
L1166:         float mfloat3 = Multiply_FloatFloat(mfloat2, mfloat);
L1212:         bool Temp_bool_Variable4 = this->mUseVehicleImpactForce;
L1231:         AkGameplayStatics->SetActorRTPCValue(this->RTPCVehicleCrashSpeed, switch (Temp_bool_Variable4) {
case false -> mfloat1;
case true -> mfloat3;
default -> mfloat4;
}, 0, this);
L1331:         ExecutionFlow.Push(L1351);
L1336:         if (!Temp_bool_Has_Been_Initd_Variable) goto L1507;
L1350:         goto ExecutionFlow.Pop();
L1351:         if (!Temp_bool_IsClosed_Variable) goto L1366;
L1365:         goto ExecutionFlow.Pop();
L1366:         bool Temp_bool_IsClosed_Variable = true;
L1377:         AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(this->mCrashSound, this, true);
L1430:         KismetSystemLibrary->Delay(this, 0.5, ScriptStruct /Script/Engine.LatentActionInfo(Linkage = 15, UUID = 6232677, ExecutionFunction = "ExecuteUbergraph_BP_WheeledVehicle", CallbackTarget = this));
L1506:         goto ExecutionFlow.Pop();
L1507:         bool Temp_bool_Has_Been_Initd_Variable = true;
L1518:         if (!false) goto ExecutionFlow.Pop();
L1520:         Temp_bool_IsClosed_Variable = true;
L1531:         goto ExecutionFlow.Pop();
L1532:         this->ReceiveDestroyed();
L1542:         bool mbool8 = this->RemoveAsRepresentation();
L1566:         goto ExecutionFlow.Pop();
L1567:         Temp_bool_IsClosed_Variable = false;
L1578:         Temp_bool_Has_Been_Initd_Variable = true;
L1589:         goto ExecutionFlow.Pop();
L1590:         this->UpdateCamera();
L1604:         this->CacheSpeedInKMH();
L1618:         this->CheckCurrentGear();
L1632:         bool mbool9 = this->IsSelfDriving();
L1652:         bool mbool10 = Not_PreBool(mbool9);
L1681:         if (!mbool10) goto ExecutionFlow.Pop();
L1691:         this->ShouldStopVehicle([ref] mbool11);
L1714:         if (!mbool11) goto L1743;
L1728:         this->StopVehicle();
L1742:         goto ExecutionFlow.Pop();
L1743:         if (!this->mPossessed) goto ExecutionFlow.Pop();
L1753:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent = this->GetVehicleMovementComponent();
L1773:         mWheeledVehicleMovementComponent->SetHandbrakeInput(false);
L1806:         goto ExecutionFlow.Pop();
L1807:         Rotator mRotator = this->K2_GetActorRotation();
L1835:         BreakRotator(mRotator, [ref] mfloat5, [ref] mfloat6, [ref] mfloat7);
L1881:         float mfloat8 = Abs(mfloat5);
L1918:         bool mbool12 = GreaterEqual_FloatFloat(mfloat8, 80);
L1952:         if (!mbool12) goto L1981;
L1966:         this->TurnOverVehicle();
L1980:         goto ExecutionFlow.Pop();
L1981:         bool mbool13 = EqualEqual_ClassClass(mconst UseState.State, UseState_WorkBench);
L2028:         if (!mbool13) goto L2066;
L2042:         this->PonderOpeningTrunk(mFGCharacterPlayer1);
L2065:         goto ExecutionFlow.Pop();
L2066:         bool mbool14 = KismetSystemLibrary->IsValid(this->mTrunkUser);
L2117:         if (!mbool14) goto L2132;
L2131:         goto ExecutionFlow.Pop();
L2132:         this->OnUse(mFGCharacterPlayer1, [ref] mconst UseState);
L2160:         goto ExecutionFlow.Pop();
L2161:         goto ExecutionFlow.Pop();
L2162:         goto ExecutionFlow.Pop();
L2163:         this->ReceiveUnpossessed(mController1);
L2182:         goto L562;
L2187:         this->ReceiveBeginPlay();
L2197:         bool mbool15 = this->AddAsRepresentation();
L2221:         if (!this->mIsAutoPilotEnabled) goto L2260;
L2235:         bool mbool16 = this->SelfDriverEnter(nullptr);
L2260:         SpringArmComponent* mSpringArmComponent = this->GetComponentByClass(SpringArmComponent);
L2289:         bool mbool17 = KismetSystemLibrary->IsValid(mSpringArmComponent);
L2340:         if (!mbool17) goto ExecutionFlow.Pop();
L2350:         mSpringArmComponent = this->GetComponentByClass(SpringArmComponent);
L2379:         this->mSpringArmComponent = mSpringArmComponent;
L2398:         goto ExecutionFlow.Pop();
L2399:         this->ReceivePossessed(mController);
L2418:         goto L437;
L2423:         this->ToggleFreeCamera();
L2437:         goto ExecutionFlow.Pop();
L2438:         KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mUpdateMovementHandle);
L2480:         goto ExecutionFlow.Pop();
L2481:         if (!this->mIsAudioOnloading) goto L2496;
L2495:         goto ExecutionFlow.Pop();
L2496:         AkGameplayStatics->SetActorRTPCValue(this->mVehicleAccelerationStateRTPC, 1, 0, this);
L2548:         this->mIsAudioOnloading = true;
L2559:         goto ExecutionFlow.Pop();
L2560:         if (!this->mIsUsingNewAudioGears) goto L2764;
L2574:         AkGameplayStatics->SetActorRTPCValue(this->mVehicleAccelerationStateRTPC, -1, 0, this);
L2626:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent1 = this->GetVehicleMovementComponent();
L2646:         float mfloat9 = mWheeledVehicleMovementComponent1->GetEngineRotationSpeed();
L2696:         AkGameplayStatics->SetActorRTPCValue(this->mRTPCOffloadState, mfloat9, 0, this);
L2752:         this->mIsAudioOnloading = false;
L2763:         goto ExecutionFlow.Pop();
L2764:         AkGameplayStatics->SetActorRTPCValue(this->mVehicleAccelerationStateRTPC, -1, 0, this);
L2816:         this->mIsAudioOnloading = false;
L2827:         goto ExecutionFlow.Pop();
L2828:         this->StartRecording();
L2842:         goto ExecutionFlow.Pop();
L2843:         this->StopRecording();
L2857:         goto ExecutionFlow.Pop();
L2858:         bool mbool18 = this->GetIsInAir();
L2878:         float mfloat10 = Conv_BoolToFloat(mbool18);
L2915:         AkGameplayStatics->SetActorRTPCValue("RTPC_Vehicle_IsFlying", mfloat10, 0, this);
L2975:         this->UpdateEngineLoadSound(mfloat11);
L2998:         this->UpdateAccelerationSound();
L3012:         if (!this->mIsUsingNewAudioGears) goto ExecutionFlow.Pop();
L3022:         this->UpdateAudioGear();
L3036:         goto ExecutionFlow.Pop();
L3037:         this->UpdateThrottleState();
L3051:         this->TickVehicleSound(mfloat12);
L3074:         this->TickRecording(mfloat12);
L3097:         this->TickSimulationMovement();
L3111:         goto L1590;
L3116:         if (!this->mIsRecording) goto L2828;
L3130:         goto L2843;
L3135:         float mfloat13 = MapRangeUnclamped(this->mEngineLoadTimer, 0, this->mEngineLoadTimerMax, 0, 11);
L3196:         AkGameplayStatics->SetActorRTPCValue(this->mEngineLoadRTPCName, mfloat13, 0, this);
L3252:         goto L2858;
L3257:         goto L3116;
L3262:         bool mbool19 = this->IsLocallyControlled();
L3286:         bool mbool20 = BooleanAND(this->mIsFreeCamera, mbool19);
L3324:         if (!mbool20) goto L3820;
L3338:         float mfloat14 = this->GetInputAxisValue("Turn");
L3379:         float mfloat15 = this->GetInputAxisValue("LookUp");
L3420:         float mfloat16 = Multiply_FloatFloat(mfloat15, -1);
L3462:         BreakRotator(this->mSpringArmComponent->RelativeRotation, [ref] mfloat17, [ref] mfloat18, [ref] mfloat19);
L3530:         float mfloat20 = Add_FloatFloat(mfloat19, mfloat14);
L3576:         float mfloat21 = Add_FloatFloat(mfloat16, mfloat18);
L3622:         float mfloat22 = ClampAngle(mfloat20, -179, 179);
L3669:         float mfloat23 = ClampAngle(mfloat21, -89, 89);
L3716:         Rotator mRotator1 = MakeRotator(0, mfloat23, mfloat22);
L3767:         this->mSpringArmComponent->K2_SetRelativeRotation(mRotator1, false, [ref] mHitResult, false);
L3819:         goto ExecutionFlow.Pop();
L3820:         bool mbool21 = KismetSystemLibrary->IsValid(this->mSpringArmComponent);
L3871:         if (!mbool21) goto ExecutionFlow.Pop();
L3881:         this->mSpringArmComponent->K2_SetRelativeRotation(this->mDefaultCameraRotation, false, [ref] mHitResult1, false);
L3933:         goto ExecutionFlow.Pop();
L3934:         if (!this->mIsMenuOpen) goto L3262;
L3948:         goto ExecutionFlow.Pop();
L3949:         this->WasDocked(mFGBuildableDockingStation);
L3968:         bool mbool22 = this->HasAuthority();
L3988:         if (!mbool22) goto ExecutionFlow.Pop();
L3998:         goto L102;
L4003:         bool mbool23 = KismetSystemLibrary->IsValid(this->mHonkSound);
L4054:         if (!mbool23) goto ExecutionFlow.Pop();
L4064:         this->Server_Honk();
L4078:         goto ExecutionFlow.Pop();
L4079:         this->mIsMenuOpen = mbool24;
L4098:         goto ExecutionFlow.Pop();
L4099:         Controller* mController2 = this->GetController();
L4119:         PlayerController* mPlayerController = Cast<Class /Script/Engine.PlayerController>(mController2);
L4155:         bool mbool25 = mPlayerController;
L4184:         Widget_RecordMenu* mWidget_RecordMenu = WidgetBlueprintLibrary->Create(this, Widget_RecordMenu, mPlayerController);
L4245:         KismetSystemLibrary->SetObjectPropertyByName(mWidget_RecordMenu, "mVehicle", this);
L4300:         this->mRecordMenu = mWidget_RecordMenu;
L4319:         Controller* mController3 = this->GetController();
L4339:         BPHUDHelpers->PushStackWidget(mController3, this->mRecordMenu, this);
L4394:         this->mIsMenuOpen = true;
L4405:         this->ServerSetMenuOpen(true);
L4420:         goto ExecutionFlow.Pop();
L4421:         this->StopRecording();
L4435:         this->RemoveOldTargets();
L4449:         goto ExecutionFlow.Pop();
L4450:         this->WasUndocked();
L4460:         bool mbool26 = this->HasAuthority();
L4480:         if (!mbool26) goto ExecutionFlow.Pop();
L4490:         goto L124;
L4495:         this->TogglePauseRecording();
L4509:         goto ExecutionFlow.Pop();
L4510:         this->ToggleAutoPilot();
L4524:         goto ExecutionFlow.Pop();
L4525:         this->TogglePathVisibility();
L4539:         goto ExecutionFlow.Pop();
L4540:         if (!this->mIsMenuOpen) goto ExecutionFlow.Pop();
L4550:         bool mbool27 = KismetSystemLibrary->IsValid(this->mRecordMenu);
L4601:         if (!mbool27) goto ExecutionFlow.Pop();
L4611:         Controller* mController4 = this->GetController();
L4631:         BPHUDHelpers->PopStackWidget(mController4, this->mRecordMenu, this);
L4686:         this->mRecordMenu = nullptr;
L4697:         goto ExecutionFlow.Pop();
L4698:         Key Temp_struct_Variable = mKey;
L4725:         Controller* mController5 = this->GetController();
L4745:         FGPlayerController* mFGPlayerController2 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController5);
L4781:         bool mbool28 = mFGPlayerController2;
L4810:         DisabledInputGate mDisabledInputGate = mFGPlayerController2->GetDisabledInputGate();
L4860:         bool mbool29 = Not_PreBool(mDisabledInputGate.mVehicleRecording);
L4898:         if (!mbool29) goto ExecutionFlow.Pop();
L4908:         goto L4099;
L4913:         bool mbool30 = this->DriverLeave(this->mIsAutoPilotEnabled);
L4946:         bool mbool31 = BooleanAND(mbool30, this->mIsAutoPilotEnabled);
L4984:         if (!mbool31) goto ExecutionFlow.Pop();
L4994:         bool mbool32 = this->SelfDriverEnter(nullptr);
L5019:         goto ExecutionFlow.Pop();
L5020:         this->Server_Leave();
L5034:         goto ExecutionFlow.Pop();
L5035:         bool mbool33 = this->GetIsSignificant();
L5055:         if (!mbool33) goto ExecutionFlow.Pop();
L5065:         PhysicalMaterial* mPhysicalMaterial = this->GetCachedSurfaceMaterial();
L5085:         bool mbool34 = KismetSystemLibrary->IsValid(mPhysicalMaterial);
L5136:         float mfloat24 = Subtract_FloatFloat(this->mSetMaxClampRangeSpeed, this->mAudioPeakFlutter);
L5182:         bool mbool35 = Not_PreBool(mbool34);
L5211:         float mfloat25 = Conv_IntToFloat(this->mSpeedInKMH);
L5248:         bool mbool36 = Greater_FloatFloat(mfloat25, this->mThresholdForAudioFlutterKMH);
L5286:         float mfloat26 = Conv_IntToFloat(this->mSpeedInKMH);
L5323:         float mfloat27 = Divide_FloatFloat(this->mSetMaxClampSpeed, 2);
L5365:         float mfloat28 = Conv_IntToFloat(this->mSpeedInKMH);
L5402:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent2 = this->GetVehicleMovementComponent();
L5422:         float mfloat29 = Abs(mfloat28);
L5459:         float mfloat30 = mWheeledVehicleMovementComponent2->GetEngineRotationSpeed();
L5509:         float mfloat31 = Divide_FloatFloat(mfloat29, 2);
L5551:         float mfloat32 = MapRangeClamped(mfloat30, 0, 5700, 0, mfloat27);
L5612:         float mfloat33 = Add_FloatFloat(mfloat32, mfloat31);
L5658:         bool Temp_bool_Variable = this->mIsUsingGolfCartRPM;
L5677:         bool Temp_bool_Variable2 = mbool36;
L5696:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent3 = this->GetVehicleMovementComponent();
L5716:         float mfloat34 = mWheeledVehicleMovementComponent3->GetEngineRotationSpeed();
L5766:         bool Temp_bool_Variable1 = this->mIsUsingNewAudioVehicleRPM;
L5785:         bool Temp_bool_Variable3 = mbool35;
L5804:         float mfloat35 = MapRangeClamped(mfloat33, 0, this->mSetMaxClampSpeed, 0, switch (Temp_bool_Variable3) {
case false -> switch (Temp_bool_Variable2) {
case false -> this->mSetMaxClampRangeSpeed;
case true -> mfloat24;
default -> mfloat37;
};
case true -> this->mSetMaxClampRangeAirSpeed;
default -> mfloat36;
});
L5957:         AkGameplayStatics->SetActorRTPCValue(this->mVehicleSpeedRTPC, switch (Temp_bool_Variable1) {
case false -> switch (Temp_bool_Variable) {
case false -> mfloat26;
case true -> mfloat35;
default -> mfloat39;
};
case true -> mfloat34;
default -> mfloat38;
}, 0, this);
L6101:         goto L3135;
L6106:         this->ReceiveOnVehicleStartup();
L6116:         this->StartSoundLoops();
L6130:         goto ExecutionFlow.Pop();
L6131:         this->ReceiveOnVehicleShutDown();
L6141:         this->StopSoundLoops();
L6155:         goto ExecutionFlow.Pop();
L6156:         Temp_struct_Variable = mKey1;
L6183:         mController5 = this->GetController();
L6203:         mFGPlayerController2 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController5);
L6239:         mbool28 = mFGPlayerController2;
L6268:         mDisabledInputGate = mFGPlayerController2->GetDisabledInputGate();
L6318:         mbool29 = Not_PreBool(mDisabledInputGate.mVehicleRecording);
L6356:         if (!mbool29) goto ExecutionFlow.Pop();
L6366:         goto L4540;
L6371:         this->ReceiveTick(mfloat12);
L6390:         goto L3037;
L6395:         goto L2187;
L6400:         goto ExecutionFlow.Pop();
L6401:         this->ReceiveOnDriverEnter();
L6411:         goto ExecutionFlow.Pop();
L6412:         this->ReceiveOnDriverLeave();
L6422:         goto ExecutionFlow.Pop();
L6423:         Key Temp_struct_Variable1 = mKey2;
L6450:         this->SetIsDrifting(true);
L6461:         goto ExecutionFlow.Pop();
L6462:         Temp_struct_Variable1 = mKey3;
L6489:         this->SetIsDrifting(false);
L6500:         goto ExecutionFlow.Pop();
L6501:         bool mbool37 = KismetSystemLibrary->IsValid(this->mRecordMenu);
L6552:         if (!mbool37) goto L5020;
L6566:         Controller* mController6 = this->GetController();
L6586:         BPHUDHelpers->PopStackWidget(mController6, this->mRecordMenu, this);
L6641:         this->mRecordMenu = nullptr;
L6652:         goto L5020;
L6657:         Controller* mController7 = this->GetController();
L6677:         FGPlayerController* mFGPlayerController3 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController7);
L6713:         bool mbool38 = mFGPlayerController3;
L6742:         bool mbool39 = KismetSystemLibrary->IsValid(mFGPlayerController3);
L6793:         if (!mbool39) goto ExecutionFlow.Pop();
L6803:         ExecutionFlow.Push(L6922);
L6808:         this->SetAddedAngularVelocityPitch(mfloat40);
L6827:         bool mbool40 = KismetSystemLibrary->IsValid(this->mPlayBurnOutSound);
L6878:         if (!mbool40) goto ExecutionFlow.Pop();
L6888:         if (!this->mShouldUseAudioBurnout) goto ExecutionFlow.Pop();
L6898:         this->BurnOutSound(mfloat40);
L6921:         goto ExecutionFlow.Pop();
L6922:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent4 = this->GetVehicleMovementComponent();
L6942:         this->AdjustThrottle(mfloat40, [ref] mfloat41);
L6974:         mWheeledVehicleMovementComponent4->SetThrottleInput(mfloat41);
L7015:         goto ExecutionFlow.Pop();
L7016:         ExecutionFlow.Push(L7041);
L7021:         this->SetAddedAngularVelocityYaw(mfloat42);
L7040:         goto ExecutionFlow.Pop();
L7041:         WheeledVehicleMovementComponent* mWheeledVehicleMovementComponent5 = this->GetVehicleMovementComponent();
L7061:         mWheeledVehicleMovementComponent5->SetSteeringInput(mfloat42);
L7102:         goto ExecutionFlow.Pop();
L7103:         goto L2423;
L7108:         this->Multicast_Honk();
L7122:         goto ExecutionFlow.Pop();
L7123:         bool mbool41 = this->GetIsSignificant();
L7143:         if (!mbool41) goto ExecutionFlow.Pop();
L7153:         if (!this->mCarShouldNotHonk) goto L7168;
L7167:         goto ExecutionFlow.Pop();
L7168:         AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(this->mHonkSound, this, true);
L7221:         goto ExecutionFlow.Pop();
L7222:         Controller* mController8 = this->GetController();
L7242:         FGPlayerController* mFGPlayerController4 = Cast<Class /Script/FactoryGame.FGPlayerController>(mController8);
L7278:         bool mbool42 = mFGPlayerController4;
L7307:         if (!mbool42) goto ExecutionFlow.Pop();
L7317:         DisabledInputGate mDisabledInputGate1 = mFGPlayerController4->GetDisabledInputGate();
L7367:         bool mbool43 = Not_PreBool(mDisabledInputGate1.mUse);
L7405:         if (!mbool43) goto ExecutionFlow.Pop();
L7415:         goto L6501;
L7420:         bool mbool44 = this->GetIsSignificant();
L7440:         if (!mbool44) goto ExecutionFlow.Pop();
L7450:         bool mbool45 = KismetSystemLibrary->IsValid(mParticleSystem);
L7501:         if (!mbool45) goto L7605;
L7515:         ParticleSystemComponent* mParticleSystemComponent = GameplayStatics->SpawnEmitterAtLocation(this, mParticleSystem, mVector1, Rotator::FromPitchYawRoll(0, 0, 0), Vector(1, 1, 1), true, 0);
L7605:         bool mbool46 = KismetSystemLibrary->IsValid(mAkAudioEvent);
L7656:         if (!mbool46) goto ExecutionFlow.Pop();
L7666:         AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEventAtLocation(this, mAkAudioEvent, mVector1, Rotator::FromPitchYawRoll(0, 0, 0));
L7740:         goto ExecutionFlow.Pop();
L7741:         goto L7420;
L7746:         goto L770;
L7751:         goto L804;
L7756:         goto L7222;
============ END FUNCTION ExecuteUbergraph_BP_WheeledVehicle ==============





============ BEGIN FUNCTION OnStartRecording__DelegateSignature ==============
============ END FUNCTION OnStartRecording__DelegateSignature ==============





============ BEGIN FUNCTION OnStopRecording__DelegateSignature ==============
============ END FUNCTION OnStopRecording__DelegateSignature ==============





============ BEGIN FUNCTION LocationReached__DelegateSignature ==============
============ END FUNCTION LocationReached__DelegateSignature ==============
