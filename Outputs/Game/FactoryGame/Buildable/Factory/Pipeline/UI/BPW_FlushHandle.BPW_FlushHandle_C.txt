########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Buildable/Factory/Pipeline/UI/BPW_FlushHandle.BPW_FlushHandle_C
########################





============ BEGIN FUNCTION StartFluidLerp ==============
L0:            this->mFluidLerpDuration = Duration;
L27:           KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mFluidLerpTimer);
L69:           this->mFluidLerpT = 0;
L92:           this->mFluidFillingUp = false;
L103:          mFScriptDelegate->BindUFunction(this, LerpFluid);
L126:          TimerHandle mTimerHandle = KismetSystemLibrary->K2_SetTimerDelegate(mFScriptDelegate, this->mLerpUpdate, true);
L195:          this->mFluidLerpTimer = mTimerHandle;
============ END FUNCTION StartFluidLerp ==============





============ BEGIN FUNCTION PlayHandleNoise ==============
L0:            float FastSpeed = 0;
L23:           float MediumSpeed = 0.03999999910593033;
L46:           float SlowSpeed = 0.02500000037252903;
L69:           bool mbool = Greater_FloatFloat(Speed, SlowSpeed);
L107:          if (!mbool) goto L354;
L121:          bool mbool1 = Greater_FloatFloat(Speed, MediumSpeed);
L159:          if (!mbool1) goto L535;
L173:          PlayerController* mPlayerController = this->GetOwningPlayer();
L197:          AkGameplayStatics->SetSwitch("Pipeline_FlushHandle", "fast", mPlayerController);
L264:          mPlayerController = this->GetOwningPlayer();
L288:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(Play_UI_Pipeline_Handle, mPlayerController, true);
L349:          <End of Inlined Event Graph Function>;
L354:          PlayerController* mPlayerController1 = this->GetOwningPlayer();
L378:          AkGameplayStatics->SetSwitch("Pipeline_FlushHandle", "Slow", mPlayerController1);
L445:          mPlayerController1 = this->GetOwningPlayer();
L469:          AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(Play_UI_Pipeline_Handle, mPlayerController1, true);
L530:          <End of Inlined Event Graph Function>;
L535:          PlayerController* mPlayerController2 = this->GetOwningPlayer();
L559:          AkGameplayStatics->SetSwitch("Pipeline_FlushHandle", "Medium", mPlayerController2);
L626:          mPlayerController2 = this->GetOwningPlayer();
L650:          AkComponent* mAkComponent2 = AkGameplayStatics->PostAkEvent(Play_UI_Pipeline_Handle, mPlayerController2, true);
============ END FUNCTION PlayHandleNoise ==============





============ BEGIN FUNCTION StartLerp ==============
L0:            this->mLerpEnd = EndValue;
L27:           this->mFullFlush = FullFlush;
L46:           this->mLerpStart = this->mCurrentValue;
L73:           KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mLerpTimer);
L115:          this->mLerpT = 0;
L138:          mFScriptDelegate->BindUFunction(this, LerpHandle);
L161:          TimerHandle mTimerHandle = KismetSystemLibrary->K2_SetTimerDelegate(mFScriptDelegate, this->mLerpUpdate, true);
L230:          this->mLerpTimer = mTimerHandle;
============ END FUNCTION StartLerp ==============





============ BEGIN FUNCTION RotateHandle ==============
L0:            RuntimeFloatCurve FlushHandleCurve = ScriptStruct /Script/Engine.RuntimeFloatCurve(EditorCurveData = ScriptStruct /Script/Engine.RichCurve(Keys = StructProperty /Script/Engine.RichCurve:Keys.Keys[] {[]}, PreInfinityExtrap = 4, PostInfinityExtrap = 4, DefaultValue = 3.4028234663852886e+38), ExternalCurve = Curve_FlushHandle);
L78:           float mfloat = Ease(0, 1, amount, 7, 2, 2);
L137:          bool Temp_bool_Variable = this->mFullFlush;
L156:          float mfloat1 = FGSkySphere->GetFloatCurveValue([ref] FlushHandleCurve, amount);
L224:          float mfloat2 = Multiply_FloatFloat(this->mMaxAngle, -1);
L266:          float mfloat3 = Lerp(this->mMinAngle, mfloat2, switch (Temp_bool_Variable) {
case false -> mfloat1;
case true -> mfloat;
default -> mfloat4;
});
L365:          this->mHandleBottom->SetRenderAngle(mfloat3);
L406:          this->mHandleHighlight->SetRenderAngle(mfloat3);
L447:          this->mHandleTop->SetRenderAngle(mfloat3);
L488:          this->mHandleShadow->SetRenderAngle(mfloat3);
============ END FUNCTION RotateHandle ==============





============ BEGIN FUNCTION BndEvt__Slider_28_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature ==============
L0:            PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Factory/Pipeline/UI/BPW_FlushHandle.BPW_FlushHandle_C:ExecuteUbergraph_BPW_FlushHandle.K2Node_ComponentBoundEvent_Value) = Value;
L18:           this->ExecuteUbergraph_BPW_FlushHandle(1484);
============ END FUNCTION BndEvt__Slider_28_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature ==============





============ BEGIN FUNCTION BndEvt__Slider_28_K2Node_ComponentBoundEvent_1_OnMouseCaptureEndEvent__DelegateSignature ==============
L0:            this->ExecuteUbergraph_BPW_FlushHandle(1516);
============ END FUNCTION BndEvt__Slider_28_K2Node_ComponentBoundEvent_1_OnMouseCaptureEndEvent__DelegateSignature ==============





============ BEGIN FUNCTION LerpHandle ==============
L0:            this->ExecuteUbergraph_BPW_FlushHandle(1738);
============ END FUNCTION LerpHandle ==============





============ BEGIN FUNCTION BndEvt__mSlider_K2Node_ComponentBoundEvent_2_OnMouseCaptureBeginEvent__DelegateSignature ==============
L0:            this->ExecuteUbergraph_BPW_FlushHandle(2339);
============ END FUNCTION BndEvt__mSlider_K2Node_ComponentBoundEvent_2_OnMouseCaptureBeginEvent__DelegateSignature ==============





============ BEGIN FUNCTION ResetFlush ==============
L0:            this->ExecuteUbergraph_BPW_FlushHandle(2374);
============ END FUNCTION ResetFlush ==============





============ BEGIN FUNCTION LerpFluid ==============
L0:            this->ExecuteUbergraph_BPW_FlushHandle(2397);
============ END FUNCTION LerpFluid ==============





============ BEGIN FUNCTION ExecuteUbergraph_BPW_FlushHandle ==============
L5:            goto ComputedJump(EntryPoint);
L15:           this->StartLerp(0, true);
L35:           this->OnFlushCompleted->ProcessMulticastDelegate();
L54:           goto ExecutionFlow.Pop();
L55:           this->OnFlush->ProcessMulticastDelegate(this->mFluidDrainDuration);
L83:           this->mInteractable = false;
L94:           this->StartFluidLerp(this->mFluidDrainDuration);
L117:          PlayerController* mPlayerController = this->GetOwningPlayer();
L141:          AkComponent* mAkComponent = AkGameplayStatics->PostAkEvent(Play_UI_Pipeline_FlushSwitch, mPlayerController, true);
L202:          bool mbool = KismetSystemLibrary->IsValidClass(this->mFluidDescriptor);
L253:          if (!mbool) goto ExecutionFlow.Pop();
L263:          FText mFText = FGItemDescriptor->GetItemName(this->mFluidDescriptor);
L322:          FName Temp_name_Variable = "No_Fluid";
L353:          FName Temp_name_Variable1 = "Water";
L384:          FName Temp_name_Variable2 = "Heavy_Oil_Residue";
L415:          FName Temp_name_Variable3 = "Fuel";
L446:          FName Temp_name_Variable4 = "Crude_Oil";
L477:          PlayerController* mPlayerController1 = this->GetOwningPlayer();
L501:          int32 mint32 = KismetArrayLibrary->Array_Find([ref] this->mWWiseNameConverter, [ref] mFText);
L569:          int32 Temp_int_Variable = mint32;
L596:          AkGameplayStatics->SetSwitch("Pipeline_Flush_Type", switch (Temp_int_Variable) {
case 0 -> Temp_name_Variable4;
case 1 -> Temp_name_Variable3;
case 2 -> Temp_name_Variable2;
case 3 -> Temp_name_Variable1;
case 4 -> Temp_name_Variable;
default -> mFName;
}, mPlayerController1);
L765:          mPlayerController1 = this->GetOwningPlayer();
L789:          AkComponent* mAkComponent1 = AkGameplayStatics->PostAkEvent(Play_UI_Pipeline_Flush, mPlayerController1, true);
L850:          goto ExecutionFlow.Pop();
L851:          ExecutionFlow.Push(L871);
L856:          if (!Temp_bool_Has_Been_Initd_Variable) goto L945;
L870:          goto ExecutionFlow.Pop();
L871:          if (!Temp_bool_IsClosed_Variable) goto L886;
L885:          goto ExecutionFlow.Pop();
L886:          bool Temp_bool_IsClosed_Variable = true;
L897:          this->StartLerp(1, false);
L917:          this->mCurrentValue = 1;
L940:          goto L55;
L945:          bool Temp_bool_Has_Been_Initd_Variable = true;
L956:          if (!false) goto ExecutionFlow.Pop();
L958:          Temp_bool_IsClosed_Variable = true;
L969:          goto ExecutionFlow.Pop();
L970:          ExecutionFlow.Push(L1076);
L975:          bool mbool1 = Greater_FloatFloat(this->mCurrentValue, 0.30000001192092896);
L1009:         if (!mbool1) goto L1038;
L1023:         if (!Temp_bool_Variable2) goto L1438;
L1037:         goto ExecutionFlow.Pop();
L1038:         bool Temp_bool_Variable2 = false;
L1049:         if (!Temp_bool_Variable3) goto L1064;
L1063:         goto ExecutionFlow.Pop();
L1064:         bool Temp_bool_Variable3 = true;
L1075:         goto ExecutionFlow.Pop();
L1076:         float mfloat = FClamp(mfloat1, 0, 1);
L1123:         this->mCurrentValue = mfloat;
L1150:         float mfloat2 = Subtract_FloatFloat(this->mCurrentValue, this->mOldValue);
L1196:         float mfloat3 = Abs(mfloat2);
L1233:         float mfloat4 = Add_FloatFloat(Multiply_FloatFloat(0.30000001192092896, mfloat3), Multiply_FloatFloat(Subtract_FloatFloat(1, 0.30000001192092896), this->mFlushSpeed));
L1324:         this->mFlushSpeed = mfloat4;
L1351:         this->mFullFlush = false;
L1362:         this->RotateHandle(this->mCurrentValue);
L1385:         bool mbool2 = Greater_FloatFloat(this->mCurrentValue, this->mThreshold);
L1423:         if (!mbool2) goto ExecutionFlow.Pop();
L1433:         goto L851;
L1438:         Temp_bool_Variable2 = true;
L1449:         Temp_bool_Variable3 = false;
L1460:         this->PlayHandleNoise(this->mFlushSpeed);
L1483:         goto ExecutionFlow.Pop();
L1484:         this->mOldValue = this->mCurrentValue;
L1511:         goto L970;
L1516:         this->mHasMouseCapture = false;
L1527:         this->mSlider->SetValue(0);
L1564:         bool mbool3 = Greater_FloatFloat(this->mCurrentValue, this->mThreshold);
L1602:         if (!mbool3) goto L1717;
L1616:         bool mbool4 = KismetSystemLibrary->K2_IsTimerActiveHandle(this, this->mLerpTimer);
L1668:         bool mbool5 = Not_PreBool(mbool4);
L1697:         this->mInteractable = mbool5;
L1716:         goto ExecutionFlow.Pop();
L1717:         this->StartLerp(0, false);
L1737:         goto ExecutionFlow.Pop();
L1738:         float Temp_float_Variable = 0.5;
L1761:         bool Temp_bool_Variable = this->mFullFlush;
L1780:         float mfloat5 = Divide_FloatFloat(this->mLerpUpdate, switch (Temp_bool_Variable) {
case false -> this->mLerpDuration;
case true -> Temp_float_Variable;
default -> mfloat6;
});
L1870:         float mfloat7 = Add_FloatFloat(mfloat5, this->mLerpT);
L1916:         this->mLerpT = mfloat7;
L1943:         float mfloat8 = Lerp(this->mLerpStart, this->mLerpEnd, this->mLerpT);
L1998:         this->RotateHandle(mfloat8);
L2021:         bool mbool6 = GreaterEqual_FloatFloat(this->mLerpT, 1);
L2055:         if (!mbool6) goto ExecutionFlow.Pop();
L2065:         bool mbool7 = EqualEqual_FloatFloat(this->mLerpEnd, 0);
L2099:         if (!mbool7) goto L2258;
L2113:         KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mLerpTimer);
L2155:         this->ResetFlush();
L2169:         bool mbool8 = Not_PreBool(this->mHasMouseCapture);
L2198:         bool mbool9 = BooleanAND(this->mFullFlush, mbool8);
L2236:         if (!mbool9) goto ExecutionFlow.Pop();
L2246:         this->mInteractable = true;
L2257:         goto ExecutionFlow.Pop();
L2258:         KismetSystemLibrary->Delay(this, this->mFlushDuration, ScriptStruct /Script/Engine.LatentActionInfo(Linkage = 15, UUID = -2056763286, ExecutionFunction = "ExecuteUbergraph_BPW_FlushHandle", CallbackTarget = this));
L2338:         goto ExecutionFlow.Pop();
L2339:         this->mHasMouseCapture = true;
L2350:         this->mFlushSpeed = 0;
L2373:         goto ExecutionFlow.Pop();
L2374:         Temp_bool_IsClosed_Variable = false;
L2385:         Temp_bool_Has_Been_Initd_Variable = true;
L2396:         goto ExecutionFlow.Pop();
L2397:         float mfloat9 = Divide_FloatFloat(this->mLerpUpdate, this->mFluidLerpDuration);
L2443:         float mfloat10 = Add_FloatFloat(this->mFluidLerpT, mfloat9);
L2489:         this->mFluidLerpT = mfloat10;
L2516:         bool Temp_bool_Variable1 = this->mFluidFillingUp;
L2535:         float mfloat11 = Subtract_FloatFloat(1, this->mFluidLerpT);
L2577:         float mfloat12 = FClamp(switch (Temp_bool_Variable1) {
case false -> this->mFluidLerpT;
case true -> mfloat11;
default -> mfloat13;
}, 0, 1);
L2668:         this->OnFluidLerp->ProcessMulticastDelegate(mfloat12);
L2696:         bool mbool10 = GreaterEqual_FloatFloat(this->mFluidLerpT, 1);
L2730:         if (!mbool10) goto ExecutionFlow.Pop();
L2740:         if (!this->mFluidFillingUp) goto L2816;
L2754:         KismetSystemLibrary->K2_ClearAndInvalidateTimerHandle(this, [ref] this->mFluidLerpTimer);
L2796:         this->OnFluidFilledUp->ProcessMulticastDelegate();
L2815:         goto ExecutionFlow.Pop();
L2816:         this->mFluidLerpT = 0;
L2839:         this->mFluidFillingUp = true;
L2850:         this->OnDrainCompleted->ProcessMulticastDelegate();
L2869:         goto ExecutionFlow.Pop();
============ END FUNCTION ExecuteUbergraph_BPW_FlushHandle ==============





============ BEGIN FUNCTION OnDrainCompleted__DelegateSignature ==============
============ END FUNCTION OnDrainCompleted__DelegateSignature ==============





============ BEGIN FUNCTION OnFluidFilledUp__DelegateSignature ==============
============ END FUNCTION OnFluidFilledUp__DelegateSignature ==============





============ BEGIN FUNCTION OnFluidLerp__DelegateSignature ==============
============ END FUNCTION OnFluidLerp__DelegateSignature ==============





============ BEGIN FUNCTION OnFlushCompleted__DelegateSignature ==============
============ END FUNCTION OnFlushCompleted__DelegateSignature ==============





============ BEGIN FUNCTION OnFlush__DelegateSignature ==============
============ END FUNCTION OnFlush__DelegateSignature ==============
