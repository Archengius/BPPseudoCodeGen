########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C
########################





============ BEGIN FUNCTION SetSelectedSchematic ==============
L0:            this->mSelectedSchematic = mSelectedSchematic;
L19:           this->Widget_TradingPost_ActivateSchematicButton->SetSelectedSchematic(this->mSelectedSchematic);
============ END FUNCTION SetSelectedSchematic ==============





============ BEGIN FUNCTION DropInventorySlotStack ==============
L0:            this->mPayOffGrid->DropInventorySlotStack(InventorySlot, [ref] mbool);
L54:           bool WasStackMoved = mbool;
============ END FUNCTION DropInventorySlotStack ==============





============ BEGIN FUNCTION GetLowestNonFullyResearchedTier ==============
L0:            ExecutionFlow.Push(L1068);
L5:            int32 mint32 = this->mCachedSchematicManager->GetMaxAllowedTechTier();
L55:           bool mbool = Less_IntInt(mint32, 1000);
L89:           if (!mbool) goto ExecutionFlow.Pop();
L99:           bool Temp_bool_Variable = false;
L110:          int32 Temp_int_Variable = 0;
L133:          bool mbool1 = Not_PreBool(Temp_bool_Variable);
L162:          mint32 = this->mCachedSchematicManager->GetMaxAllowedTechTier();
L212:          bool mbool2 = LessEqual_IntInt(Temp_int_Variable, mint32);
L250:          bool mbool3 = BooleanAND(mbool1, mbool2);
L288:          if (!mbool3) goto L490;
L302:          ExecutionFlow.Push(L634);
L307:          this->CheckIfTierIsFullyResearched(Temp_int_Variable, [ref] mbool4);
L339:          if (!mbool4) goto L751;
L353:          int32 mint321 = this->mCachedSchematicManager->GetMaxAllowedTechTier();
L403:          bool mbool5 = EqualEqual_IntInt(mint321, Temp_int_Variable);
L441:          if (!mbool5) goto ExecutionFlow.Pop();
L451:          int32 tier = 0;
L474:          bool FoundTier = false;
L485:          <End of Inlined Event Graph Function>;
L490:          int32 mint322 = this->mCachedSchematicManager->GetMaxAllowedTechTier();
L540:          int32 mint323 = Clamp(LocalTier, 0, mint322);
L591:          tier = mint323;
L618:          FoundTier = true;
L629:          <End of Inlined Event Graph Function>;
L634:          mbool1 = Not_PreBool(Temp_bool_Variable);
L663:          if (!mbool1) goto L490;
L677:          int32 mint324 = Add_IntInt(Temp_int_Variable, 1);
L719:          Temp_int_Variable = mint324;
L746:          goto L133;
L751:          FGGamePhaseManager* mFGGamePhaseManager = FGGamePhaseManager->Get(this);
L794:          uint8 muint8 = mFGGamePhaseManager->GetGamePhase();
L844:          uint8 muint81 = mFGGamePhaseManager->GetGamePhaseForTechTier(Temp_int_Variable);
L903:          bool mbool6 = GreaterEqual_ByteByte(muint8, muint81);
L941:          if (!mbool6) goto L994;
L955:          int32 LocalTier = Temp_int_Variable;
L982:          Temp_bool_Variable = true;
L993:          goto ExecutionFlow.Pop();
L994:          int32 mint325 = Subtract_IntInt(Temp_int_Variable, 1);
L1036:         LocalTier = mint325;
L1063:         goto L982;
============ END FUNCTION GetLowestNonFullyResearchedTier ==============





============ BEGIN FUNCTION CheckIfTierIsFullyResearched ==============
L0:            ExecutionFlow.Push(L719);
L5:            bool IsReasearched = true;
L16:           bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L67:           if (!mbool) goto ExecutionFlow.Pop();
L77:           TArray<TSubclassOf<FGSchematic>> mTArray<TSubclassOf<FGSchematic>> = [];
L88:           this->mCachedSchematicManager->GetAvailableSchematics([ref] mTArray<TSubclassOf<FGSchematic>>);
L129:          int32 Temp_int_Loop_Counter_Variable = 0;
L152:          int32 Temp_int_Array_Index_Variable = 0;
L175:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<TSubclassOf<FGSchematic>>);
L234:          bool mbool1 = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L272:          if (!mbool1) goto L609;
L286:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L313:          ExecutionFlow.Push(L633);
L318:          KismetArrayLibrary->Array_Get([ref] mTArray<TSubclassOf<FGSchematic>>, Temp_int_Array_Index_Variable, [ref] mTSubclassOf<FGSchematic>);
L377:          int32 mint321 = FGSchematic->GetTechTier(mTSubclassOf<FGSchematic>);
L436:          bool mbool2 = EqualEqual_IntInt(tier, mint321);
L474:          if (!mbool2) goto ExecutionFlow.Pop();
L484:          KismetArrayLibrary->Array_Get([ref] mTArray<TSubclassOf<FGSchematic>>, Temp_int_Array_Index_Variable, [ref] mTSubclassOf<FGSchematic>);
L543:          bool mbool3 = this->mCachedSchematicManager->IsSchematicPurchased(mTSubclassOf<FGSchematic>);
L594:          if (!mbool3) goto L707;
L608:          goto ExecutionFlow.Pop();
L609:          bool IsResearched = IsReasearched;
L628:          <End of Inlined Event Graph Function>;
L633:          int32 mint322 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L675:          Temp_int_Loop_Counter_Variable = mint322;
L702:          goto L175;
L707:          IsReasearched = false;
L718:          goto ExecutionFlow.Pop();
============ END FUNCTION CheckIfTierIsFullyResearched ==============





============ BEGIN FUNCTION SetTierAndDeafultSchematic ==============
L0:            this->mActiveTier = tier;
L27:           this->mSchematicList->mCurrentDisplayedTier = this->mActiveTier;
L76:           this->mSchematicList->CreateSchematicButtons();
============ END FUNCTION SetTierAndDeafultSchematic ==============





============ BEGIN FUNCTION GetSchematicHintTextVisibility ==============
L0:            uint8 muint8 = this->GetTierHintVisibility();
L32:           bool mbool = NotEqual_ByteByte(muint8, 0);
L63:           if (!mbool) goto L138;
L77:           this->PuslingSchematic->mPlayPulseAnim();
L113:          uint8 ReturnValue = 0;
L133:          goto L194;
L138:          this->PuslingSchematic->mStopPulseAnim();
L174:          ReturnValue = 2;
============ END FUNCTION GetSchematicHintTextVisibility ==============





============ BEGIN FUNCTION GetSchematicHintVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValidClass(this->mSelectedSchematic);
L51:           if (!mbool) goto L90;
L65:           uint8 ReturnValue = 1;
L85:           goto L110;
L90:           ReturnValue = 0;
============ END FUNCTION GetSchematicHintVisibility ==============





============ BEGIN FUNCTION GetTierHintVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L284;
L65:           int32 mint32 = this->mCachedSchematicManager->GetHighestAvailableTechTier();
L115:          bool mbool1 = LessEqual_IntInt(this->mActiveTier, mint32);
L153:          if (!mbool1) goto L228;
L167:          this->PuslingTier->mStopPulseAnim();
L203:          uint8 ReturnValue = 2;
L223:          goto L284;
L228:          this->PuslingTier->mPlayPulseAnim();
L264:          ReturnValue = 0;
============ END FUNCTION GetTierHintVisibility ==============





============ BEGIN FUNCTION GenerateTierList ==============
L0:            ExecutionFlow.Push(L397);
L5:            int32 mint32 = this->mCachedSchematicManager->GetHighestAvailableTechTier();
L55:           int32 Temp_int_Variable = 0;
L78:           bool mbool = LessEqual_IntInt(Temp_int_Variable, mint32);
L116:          if (!mbool) goto L318;
L130:          ExecutionFlow.Push(L323);
L135:          PlayerController* mPlayerController = this->GetOwningPlayer();
L159:          Widget_TradingPost_TierButton* mWidget_TradingPost_TierButton = WidgetBlueprintLibrary->Create(this, Widget_TradingPost_TierButton, mPlayerController);
L220:          mWidget_TradingPost_TierButton->SetTierNumber(Temp_int_Variable, this);
L266:          HorizontalBoxSlot* mHorizontalBoxSlot = this->TierList->AddChildToHorizontalBox(mWidget_TradingPost_TierButton);
L317:          goto ExecutionFlow.Pop();
L318:          <End of Inlined Event Graph Function>;
L323:          int32 mint321 = Add_IntInt(Temp_int_Variable, 1);
L365:          Temp_int_Variable = mint321;
L392:          goto L78;
============ END FUNCTION GenerateTierList ==============





============ BEGIN FUNCTION UpdateInventoryVisibility ==============
============ END FUNCTION UpdateInventoryVisibility ==============





============ BEGIN FUNCTION GetRewardVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L205;
L65:           bool mbool1 = this->mCachedSchematicManager->IsShipAtTradingPost();
L107:          bool mbool2 = Not_PreBool(mbool1);
L136:          bool mbool3 = BooleanAND(mbool2, false);
L166:          if (!mbool3) goto L230;
L180:          uint8 ReturnValue = 2;
L200:          goto L250;
L205:          ReturnValue = 2;
L225:          goto L250;
L230:          ReturnValue = 0;
============ END FUNCTION GetRewardVisibility ==============





============ BEGIN FUNCTION GetShipAwayFeedback ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L301;
L65:           bool mbool1 = this->mCachedSchematicManager->IsShipAtTradingPost();
L107:          bool mbool2 = Not_PreBool(mbool1);
L136:          bool mbool3 = BooleanAND(mbool2, true);
L166:          uint8 Temp_byte_Variable = 3;
L186:          bool Temp_bool_Variable = mbool3;
L205:          uint8 Temp_byte_Variable1 = 1;
L225:          uint8 ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
};
L296:          goto L321;
L301:          ReturnValue = 1;
============ END FUNCTION GetShipAwayFeedback ==============





============ BEGIN FUNCTION SetRewardInformation ==============
L0:            this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->SetItemDescriptionText(inDesc);
L67:           this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->SetItemTitle(inTitle);
L134:          mSlateBrush.ImageSize = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.ImageSize;
L245:          mSlateBrush.Margin = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Margin;
L356:          mSlateBrush.TintColor = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.TintColor;
L467:          mSlateBrush.ResourceObject = inIcon.ResourceObject;
L504:          mSlateBrush.DrawAs = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.DrawAs;
L615:          mSlateBrush.Tiling = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Tiling;
L726:          mSlateBrush.Mirroring = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Mirroring;
L837:          this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->SetBrush([ref] mSlateBrush);
L926:          UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->IconFade, 0, 1, 0, 1);
============ END FUNCTION SetRewardInformation ==============





============ BEGIN FUNCTION GetActiveSchematicTabEnabled ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L376;
L65:           bool mbool1 = this->mCachedSchematicManager->IsShipAtTradingPost();
L107:          bool mbool2 = Not_PreBool(mbool1);
L136:          TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L178:          bool mbool3 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>);
L229:          bool Temp_bool_Variable1 = true;
L240:          bool mbool4 = BooleanOR(mbool3, mbool2);
L278:          bool Temp_bool_Variable = mbool4;
L297:          bool Temp_bool_Variable2 = false;
L308:          bool ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_bool_Variable2;
case true -> Temp_bool_Variable1;
default -> mbool5;
};
L371:          goto L387;
L376:          ReturnValue = false;
============ END FUNCTION GetActiveSchematicTabEnabled ==============





============ BEGIN FUNCTION SetActiveTab ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L416;
L65:           bool mbool1 = this->mCachedSchematicManager->IsShipAtTradingPost();
L107:          if (!mbool1) goto L374;
L121:          TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L163:          bool mbool2 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>);
L214:          int32 Temp_int_Variable = 1;
L237:          bool Temp_bool_Variable = mbool2;
L256:          int32 Temp_int_Variable1 = 0;
L279:          this->Widget_SlidingTabs->SetActiveIndex(switch (Temp_bool_Variable) {
case false -> Temp_int_Variable1;
case true -> Temp_int_Variable;
default -> mint32;
}, false);
L369:          <End of Inlined Event Graph Function>;
L374:          this->Widget_SlidingTabs->SetActiveIndex(1, false);
============ END FUNCTION SetActiveTab ==============





============ BEGIN FUNCTION GetShipInventoryVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L166;
L65:           bool mbool1 = this->mCachedSchematicManager->IsShipAtTradingPost();
L107:          if (!mbool1) goto L146;
L121:          uint8 ReturnValue = 0;
L141:          goto L166;
L146:          ReturnValue = 2;
============ END FUNCTION GetShipInventoryVisibility ==============





============ BEGIN FUNCTION ActivateSelectedSchematic ==============
L0:            bool mbool = this->mCachedSchematicManager->SetActiveSchematic(this->mSelectedSchematic);
L51:           if (!mbool) goto L394;
L65:           PlayerController* mPlayerController = this->GetOwningPlayer();
L89:           BP_PlayerController* mBP_PlayerController = Cast<BlueprintGeneratedClass /Game/FactoryGame/Character/Player/BP_PlayerController.BP_PlayerController_C>(mPlayerController);
L125:          bool mbool1 = mBP_PlayerController;
L154:          if (!mbool1) goto L474;
L168:          BP_RemoteCallObject* mBP_RemoteCallObject = mBP_PlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L219:          mBP_RemoteCallObject->ServerSetActiveSchematic(this->mSelectedSchematic);
L264:          this->mPayOffGrid->SetUpPayOffSlots(this->mSelectedSchematic);
L309:          this->Widget_SlidingTabs->SetActiveIndex(1, true);
L351:          this->mWindow->SetInventoryVisibility(true, true);
L389:          <End of Inlined Event Graph Function>;
L394:          this->Widget_SlidingTabs->SetActiveIndex(1, true);
L436:          this->mWindow->SetInventoryVisibility(true, true);
============ END FUNCTION ActivateSelectedSchematic ==============





============ BEGIN FUNCTION GetSelectedRecipeBoxVisibility ==============
L0:            uint8 Temp_byte_Variable = 0;
L20:           uint8 Temp_byte_Variable1 = 2;
L40:           bool mbool = KismetSystemLibrary->IsValidClass(this->mSelectedSchematic);
L91:           bool Temp_bool_Variable = mbool;
L110:          uint8 ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
};
============ END FUNCTION GetSelectedRecipeBoxVisibility ==============





============ BEGIN FUNCTION SetDefaultDescriptionText ==============
L0:            bool mbool = KismetSystemLibrary->IsValidClass(mSchematicClass);
L51:           if (!mbool) goto L1283;
L65:           FText mFText = FGSchematic->GetSchematicDisplayName(mSchematicClass);
L124:          this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mProductTitleText->SetText(mFText);
L213:          this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mProductDescriptionText->SetText();
L295:          this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mCategoryIcon->SetVisibility(0);
L377:          mSlateBrush.ImageSize = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.ImageSize;
L488:          mSlateBrush.Margin = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Margin;
L599:          mSlateBrush.TintColor = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.TintColor;
L710:          mSlateBrush.ResourceObject = nullptr;
L730:          mSlateBrush.DrawAs = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.DrawAs;
L841:          mSlateBrush.Tiling = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Tiling;
L952:          mSlateBrush.Mirroring = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->Brush.Mirroring;
L1063:         this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mIcon->SetBrush([ref] mSlateBrush);
L1152:         SlateBrush mSlateBrush1 = FGSchematic->GetItemIcon(this->mSelectedSchematic);
L1211:         this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->mCategoryIconImage = mSlateBrush1.ResourceObject;
============ END FUNCTION SetDefaultDescriptionText ==============





============ BEGIN FUNCTION UpdateRewardInfoFromProduct ==============
L0:            UMGSequencePlayer* mUMGSequencePlayer = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->PlayAnimation(this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->IconFade, 0, 1, 0, 1);
L134:          Widget_RewardProduct* mWidget_RewardProduct = Cast<WidgetBlueprintGeneratedClass /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_RewardProduct.Widget_RewardProduct_C>(Reward Widget);
L170:          bool mbool = mWidget_RewardProduct;
L199:          if (!mbool) goto L361;
L213:          FText mFText = KismetTextLibrary->Conv_StringToText("");
L265:          bool mbool1 = KismetTextLibrary->NotEqual_TextText([ref] Reward Widget->mTitle, [ref] mFText);
L347:          if (!mbool1) goto L473;
L361:          this->SetRewardInformation(Reward Widget->mTitle, Reward Widget->mDescription, Reward Widget->mBigIconBrush);
L468:          <End of Inlined Event Graph Function>;
L473:          KismetArrayLibrary->Array_Get([ref] mWidget_RewardProduct->mProducts, 0, [ref] mItemAmount);
L550:          ItemAmount localProduct = mItemAmount;
L577:          bool mbool2 = ClassIsChildOf(localProduct.ItemClass, FGItemDescriptor);
L624:          if (!mbool2) goto L1687;
L638:          bool mbool3 = KismetSystemLibrary->IsValidClass(this->mSelectedSchematic);
L689:          if (!mbool3) goto L1687;
L703:          Texture2D* mTexture2D = FGItemDescriptor->GetBigIcon(localProduct.ItemClass);
L763:          bool mbool4 = KismetSystemLibrary->IsValid(mTexture2D);
L814:          if (!mbool4) goto L1603;
L828:          mTexture2D = FGItemDescriptor->GetBigIcon(localProduct.ItemClass);
L888:          Texture* localIcon = mTexture2D;
L907:          mSlateBrush.ImageSize = ScriptStruct /Script/CoreUObject.Vector2D(X = 20, Y = 20);
L958:          mSlateBrush.Margin = ScriptStruct /Script/SlateCore.Margin(Left = 0, Top = 0, Right = 0, Bottom = 0);
L1019:         mSlateBrush.TintColor = ScriptStruct /Script/SlateCore.SlateColor(SpecifiedColor = ScriptStruct /Script/CoreUObject.LinearColor(R = 1, G = 1, B = 1, A = 1), ColorUseRule = 0);
L1096:         mSlateBrush.ResourceObject = localIcon;
L1124:         mSlateBrush.DrawAs = 3;
L1153:         mSlateBrush.Tiling = 0;
L1182:         mSlateBrush.Mirroring = 0;
L1211:         FText mFText1 = FGItemDescriptor->GetItemName(localProduct.ItemClass);
L1279:         FText mFText2 = FGItemDescriptor->GetItemDescription(localProduct.ItemClass);
L1347:         this->SetRewardInformation(mFText1, mFText2, mSlateBrush);
L1388:         mFText1 = FGItemDescriptor->GetItemName(localProduct.ItemClass);
L1456:         FString mFString = KismetTextLibrary->Conv_TextToString([ref] mFText1);
L1515:         KismetSystemLibrary->PrintString(this, mFString, true, true, ScriptStruct /Script/CoreUObject.LinearColor(R = 0, G = 0.6600000262260437, B = 1, A = 1), 2);
L1598:         <End of Inlined Event Graph Function>;
L1603:         Texture2D* mTexture2D1 = FGItemDescriptor->GetSmallIcon(localProduct.ItemClass);
L1663:         localIcon = mTexture2D1;
L1682:         goto L907;
============ END FUNCTION UpdateRewardInfoFromProduct ==============





============ BEGIN FUNCTION GetTabFeedback ==============
L0:            ExecutionFlow.Push(L617);
L5:            int32 Temp_int_Variable = 0;
L28:           int32 mint32 = this->mWindow->ButtonSlot->GetChildrenCount();
L100:          bool mbool = LessEqual_IntInt(Temp_int_Variable, mint32);
L138:          if (!mbool) goto ExecutionFlow.Pop();
L148:          ExecutionFlow.Push(L446);
L153:          Widget* mWidget = this->mWindow->ButtonSlot->GetChildAt(Temp_int_Variable);
L226:          Widget_ImageTabButton* mWidget_ImageTabButton = Cast<WidgetBlueprintGeneratedClass /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_ImageTabButton.Widget_ImageTabButton_C>(mWidget);
L262:          bool mbool1 = mWidget_ImageTabButton;
L291:          if (!mbool1) goto ExecutionFlow.Pop();
L301:          bool mbool2 = EqualEqual_IntInt(Temp_int_Variable, 0);
L335:          if (!mbool2) goto L520;
L349:          HUDHelpers->GetFactoryGameWhite(this, [ref] mSlateColor, [ref] mLinearColor);
L404:          mWidget_ImageTabButton->SetColorAndOpacity(mLinearColor);
L445:          goto ExecutionFlow.Pop();
L446:          int32 mint321 = Add_IntInt(Temp_int_Variable, 1);
L488:          Temp_int_Variable = mint321;
L515:          goto L28;
L520:          HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor1, [ref] mLinearColor1);
L575:          mWidget_ImageTabButton->SetColorAndOpacity(mLinearColor1);
L616:          goto ExecutionFlow.Pop();
============ END FUNCTION GetTabFeedback ==============





============ BEGIN FUNCTION OnSchematicClicked ==============
L0:            ExecutionFlow.Push(L940);
L5:            this->Widget_TradingPost_RecipePreview->SetupSchematicContents(schematic);
L50:           this->Widget_TradingPost_RecipePreview->Widget_TradingPostSchematicCostInfo->UpdateSchematicCosts(schematic);
L117:          this->SetSelectedSchematic(schematic);
L140:          this->SetDefaultDescriptionText(this->mSelectedSchematic);
L163:          this->Widget_TradingPost_ActivateSchematicButton->SetVisibility(0);
L201:          UMGSequencePlayer* mUMGSequencePlayer = this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->PlayAnimation(this->Widget_TradingPost_RecipePreview->mRecipeInfoBox->CategoryFade, 0, 1, 0, 1);
L335:          KismetArrayLibrary->Array_Clear([ref] this->mRelevantItems);
L376:          int32 Temp_int_Loop_Counter_Variable = 0;
L399:          int32 Temp_int_Array_Index_Variable = 0;
L422:          TArray<ItemAmount> mTArray<ItemAmount> = FGSchematic->GetCost(this->mSelectedSchematic);
L481:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L540:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L578:          if (!mbool) goto L820;
L592:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L619:          ExecutionFlow.Push(L866);
L624:          mTArray<ItemAmount> = FGSchematic->GetCost(this->mSelectedSchematic);
L683:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, Temp_int_Array_Index_Variable, [ref] mItemAmount);
L742:          int32 mint321 = KismetArrayLibrary->Array_Add([ref] this->mRelevantItems, [ref] mItemAmount.ItemClass);
L819:          goto ExecutionFlow.Pop();
L820:          this->mWindow->SetupRelevantInventory([ref] this->mRelevantItems);
L865:          goto ExecutionFlow.Pop();
L866:          int32 mint322 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L908:          Temp_int_Loop_Counter_Variable = mint322;
L935:          goto L422;
============ END FUNCTION OnSchematicClicked ==============





============ BEGIN FUNCTION GetActiveSchematicInfoVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L293;
L65:           TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L107:          bool mbool1 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>);
L158:          bool Temp_bool_Variable = mbool1;
L177:          uint8 Temp_byte_Variable = 0;
L197:          uint8 Temp_byte_Variable1 = 2;
L217:          uint8 ReturnValue = switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
};
L288:          goto L313;
L293:          ReturnValue = 2;
============ END FUNCTION GetActiveSchematicInfoVisibility ==============





============ BEGIN FUNCTION SetActiveSchematicInfo ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mCachedSchematicManager);
L51:           if (!mbool) goto L305;
L65:           TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L107:          bool mbool1 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>);
L158:          if (!mbool1) goto L330;
L172:          mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L214:          FText mFText = FGSchematic->GetSchematicDisplayName(mTSubclassOf<FGSchematic>);
L273:          FText ReturnValue = mFText;
L300:          goto L350;
L305:          ReturnValue = ;
L325:          goto L350;
L330:          ReturnValue = ;
============ END FUNCTION SetActiveSchematicInfo ==============





============ BEGIN FUNCTION Cleanup ==============
L0:            mFScriptDelegate->BindUFunction(this, OnActiveSchematicChanged);
L23:           this->mCachedSchematicManager->mOnActiveSchematicChanged.Remove(mFScriptDelegate);
============ END FUNCTION Cleanup ==============





============ BEGIN FUNCTION CloseTradepost ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(668);
============ END FUNCTION CloseTradepost ==============





============ BEGIN FUNCTION Destruct ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(697);
============ END FUNCTION Destruct ==============





============ BEGIN FUNCTION Init ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(722);
============ END FUNCTION Init ==============





============ BEGIN FUNCTION Tick ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C:ExecuteUbergraph_Widget_TradingPost.K2Node_Event_MyGeometry) = MyGeometry;
L18:           PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C:ExecuteUbergraph_Widget_TradingPost.K2Node_Event_InDeltaTime) = InDeltaTime;
L36:           this->ExecuteUbergraph_Widget_TradingPost(2585);
============ END FUNCTION Tick ==============





============ BEGIN FUNCTION OnActiveSchematicChanged ==============
L0:            PERSISTENT_FRAME(ClassProperty /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C:ExecuteUbergraph_Widget_TradingPost.K2Node_CustomEvent_Schematic) = schematic;
L18:           this->ExecuteUbergraph_Widget_TradingPost(3221);
============ END FUNCTION OnActiveSchematicChanged ==============





============ BEGIN FUNCTION Construct ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(3267);
============ END FUNCTION Construct ==============





============ BEGIN FUNCTION purchasedSchematic ==============
L0:            PERSISTENT_FRAME(ClassProperty /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C:ExecuteUbergraph_Widget_TradingPost.K2Node_CustomEvent_purchasedSchematic) = purchasedSchematic;
L18:           this->ExecuteUbergraph_Widget_TradingPost(3621);
============ END FUNCTION purchasedSchematic ==============





============ BEGIN FUNCTION mShakeWindow ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(3683);
============ END FUNCTION mShakeWindow ==============





============ BEGIN FUNCTION BndEvt__mWindow_K2Node_ComponentBoundEvent_0_OnClose__DelegateSignature ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(3688);
============ END FUNCTION BndEvt__mWindow_K2Node_ComponentBoundEvent_0_OnClose__DelegateSignature ==============





============ BEGIN FUNCTION CreateSmoke ==============
L0:            this->ExecuteUbergraph_Widget_TradingPost(3693);
============ END FUNCTION CreateSmoke ==============





============ BEGIN FUNCTION BndEvt__mWindow_K2Node_ComponentBoundEvent_3_OnTabButtonClicked__DelegateSignature ==============
L0:            PERSISTENT_FRAME(IntProperty /Game/FactoryGame/Buildable/Factory/TradingPost/Widget_TradingPost.Widget_TradingPost_C:ExecuteUbergraph_Widget_TradingPost.K2Node_ComponentBoundEvent_ButtonIndex) = ButtonIndex;
L18:           this->ExecuteUbergraph_Widget_TradingPost(4102);
============ END FUNCTION BndEvt__mWindow_K2Node_ComponentBoundEvent_3_OnTabButtonClicked__DelegateSignature ==============





============ BEGIN FUNCTION ExecuteUbergraph_Widget_TradingPost ==============
L5:            goto ComputedJump(EntryPoint);
L15:           ExecutionFlow.Push(L258);
L20:           TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L62:           TArray<ItemAmount> mTArray<ItemAmount> = FGSchematic->GetCost(mTSubclassOf<FGSchematic>);
L121:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, Temp_int_Array_Index_Variable, [ref] mItemAmount);
L180:          int32 mint32 = KismetArrayLibrary->Array_Add([ref] this->mRelevantItems, [ref] mItemAmount.ItemClass);
L257:          goto ExecutionFlow.Pop();
L258:          int32 mint321 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L300:          int32 Temp_int_Loop_Counter_Variable = mint321;
L327:          mTSubclassOf<FGSchematic> = this->mCachedSchematicManager->GetActiveSchematic();
L369:          mTArray<ItemAmount> = FGSchematic->GetCost(mTSubclassOf<FGSchematic>);
L428:          int32 mint322 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L487:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint322);
L525:          if (!mbool) goto L571;
L539:          int32 Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L566:          goto L15;
L571:          this->mWindow->SetupRelevantInventory([ref] this->mRelevantItems);
L616:          goto ExecutionFlow.Pop();
L617:          Temp_int_Loop_Counter_Variable = 0;
L640:          Temp_int_Array_Index_Variable = 0;
L663:          goto L327;
L668:          this->OnEscapePressed();
L696:          goto ExecutionFlow.Pop();
L697:          this->Destruct();
L707:          this->Cleanup();
L721:          goto ExecutionFlow.Pop();
L722:          this->Init();
L732:          GameStateBase* mGameStateBase = GameplayStatics->GetGameState(this);
L775:          FGGameState* mFGGameState = Cast<Class /Script/FactoryGame.FGGameState>(mGameStateBase);
L811:          bool mbool1 = mFGGameState;
L840:          FGSchematicManager* mFGSchematicManager = FGSchematicManager->Get(mFGGameState);
L891:          this->mCachedSchematicManager = mFGSchematicManager;
L910:          FGBuildableHubTerminal* mFGBuildableHubTerminal = Cast<Class /Script/FactoryGame.FGBuildableHubTerminal>(this->mInteractObject);
L946:          bool mbool2 = mFGBuildableHubTerminal;
L975:          if (!mbool2) goto L2180;
L989:          FGBuildableTradingPost* mFGBuildableTradingPost = mFGBuildableHubTerminal->GetTradingPost();
L1031:         this->mTradingPost = mFGBuildableTradingPost;
L1050:         this->mSchematicList->mTradingPost = this->mTradingPost;
L1091:         this->mPayOffGrid->mTradingPostWidget = this;
L1124:         this->mLaunchShipButton->mTradingPost = this->mTradingPost;
L1165:         this->mLaunchShipButton->mTradingPostWidget = this;
L1198:         this->mShipAwayFeedback->mTradingPost = this->mTradingPost;
L1239:         this->mShipAwayFeedback->mTradingPostWidget = this;
L1272:         TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic>1 = this->mCachedSchematicManager->GetActiveSchematic();
L1314:         bool mbool3 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>1);
L1365:         if (!mbool3) goto L1489;
L1379:         mTSubclassOf<FGSchematic>1 = this->mCachedSchematicManager->GetActiveSchematic();
L1421:         this->SetSelectedSchematic(mTSubclassOf<FGSchematic>1);
L1444:         this->Widget_TradingPost_RecipePreview->SetupSchematicContents(this->mSelectedSchematic);
L1489:         this->Widget_TradingPost_RecipePreview->Widget_TradingPostSchematicCostInfo->UpdateSchematicCosts(this->mSelectedSchematic);
L1556:         this->SetDefaultDescriptionText(this->mSelectedSchematic);
L1579:         TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic>2 = this->mCachedSchematicManager->GetActiveSchematic();
L1621:         this->mPayOffGrid->SetUpPayOffSlots(mTSubclassOf<FGSchematic>2);
L1666:         this->Widget_TradingPost_RecipePreview->mTradingPostWidget = this;
L1699:         this->mSchematicList->mTradingPostWidget = this;
L1732:         this->SetActiveTab();
L1746:         this->mSchematicList->CreateSchematicButtons();
L1782:         mFScriptDelegate->BindUFunction(this, OnActiveSchematicChanged);
L1805:         this->mCachedSchematicManager->mOnActiveSchematicChanged.AddUnique(mFScriptDelegate);
L1846:         bool mbool4 = EqualEqual_IntInt(this->Widget_SlidingTabs->mActiveIndex, 1);
L1902:         this->mWindow->SetInventoryVisibility(mbool4, false);
L1948:         TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic>3 = this->mCachedSchematicManager->GetActiveSchematic();
L1990:         bool mbool5 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>3);
L2041:         if (!mbool5) goto L2284;
L2055:         mTSubclassOf<FGSchematic>3 = this->mCachedSchematicManager->GetActiveSchematic();
L2097:         int32 mint323 = FGSchematic->GetTechTier(mTSubclassOf<FGSchematic>3);
L2156:         this->SetTierAndDeafultSchematic(mint323);
L2179:         goto ExecutionFlow.Pop();
L2180:         KismetSystemLibrary->PrintString(this, "did not cast to tradingpost", true, true, ScriptStruct /Script/CoreUObject.LinearColor(R = 0, G = 0.6600000262260437, B = 1, A = 1), 2);
L2283:         goto ExecutionFlow.Pop();
L2284:         TArray<uint8> mTArray<uint8> = [2, 3];
L2299:         TArray<TSubclassOf<FGSchematic>> mTArray<TSubclassOf<FGSchematic>> = [];
L2310:         this->mCachedSchematicManager->GetPurchasedSchematicsOfTypes(mTArray<uint8>, [ref] mTArray<TSubclassOf<FGSchematic>>);
L2360:         int32 mint324 = KismetArrayLibrary->Array_Length([ref] mTArray<TSubclassOf<FGSchematic>>);
L2419:         bool mbool6 = Greater_IntInt(mint324, 1);
L2453:         if (!mbool6) goto ExecutionFlow.Pop();
L2463:         this->GetLowestNonFullyResearchedTier([ref] mint325, [ref] mbool7);
L2495:         if (!mbool7) goto L2565;
L2509:         this->GetLowestNonFullyResearchedTier([ref] mint325, [ref] mbool7);
L2541:         this->SetTierAndDeafultSchematic(mint325);
L2564:         goto ExecutionFlow.Pop();
L2565:         this->SetTierAndDeafultSchematic(0);
L2584:         goto ExecutionFlow.Pop();
L2585:         this->Tick(mGeometry, mfloat);
L2613:         GameStateBase* mGameStateBase1 = GameplayStatics->GetGameState(this);
L2656:         FGGameState* mFGGameState1 = Cast<Class /Script/FactoryGame.FGGameState>(mGameStateBase1);
L2692:         bool mbool8 = mFGGameState1;
L2721:         if (!mbool8) goto ExecutionFlow.Pop();
L2731:         FGSchematicManager* mFGSchematicManager1 = FGSchematicManager->Get(mFGGameState1);
L2782:         TSubclassOf<FGSchematic> mTSubclassOf<FGSchematic>4 = mFGSchematicManager1->GetActiveSchematic();
L2824:         bool mbool9 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGSchematic>4);
L2875:         if (!mbool9) goto ExecutionFlow.Pop();
L2885:         mFGSchematicManager1 = FGSchematicManager->Get(mFGGameState1);
L2936:         mTSubclassOf<FGSchematic>4 = mFGSchematicManager1->GetActiveSchematic();
L2978:         bool mbool10 = mFGSchematicManager1->IsSchematicPaidOff(mTSubclassOf<FGSchematic>4);
L3029:         if (!mbool10) goto L3137;
L3043:         if (!Temp_bool_Variable3) goto L3058;
L3057:         goto ExecutionFlow.Pop();
L3058:         bool Temp_bool_Variable3 = true;
L3069:         bool Temp_bool_Variable2 = false;
L3080:         this->StopAnimation(this->GlowInputAnim);
L3099:         this->GlowInput->SetRenderOpacity(0);
L3136:         goto ExecutionFlow.Pop();
L3137:         Temp_bool_Variable3 = false;
L3148:         if (!Temp_bool_Variable2) goto L3163;
L3162:         goto ExecutionFlow.Pop();
L3163:         Temp_bool_Variable2 = true;
L3174:         UMGSequencePlayer* mUMGSequencePlayer = this->PlayAnimation(this->GlowInputAnim, 0, 0, 0, 1);
L3220:         goto ExecutionFlow.Pop();
L3221:         this->mPayOffGrid->SetUpPayOffSlots(mTSubclassOf<FGSchematic>5);
L3266:         goto ExecutionFlow.Pop();
L3267:         this->Construct();
L3277:         GameStateBase* mGameStateBase2 = GameplayStatics->GetGameState(this);
L3320:         FGSchematicManager* mFGSchematicManager2 = FGSchematicManager->Get(mGameStateBase2);
L3371:         this->mCachedSchematicManager = mFGSchematicManager2;
L3390:         this->Widget_InventorySlot_DropArea->mHudPayOffGrid = this->mPayOffGrid;
L3431:         mFScriptDelegate1->BindUFunction(this, purchasedSchematic);
L3454:         this->mCachedSchematicManager->PurchasedSchematicDelegate.AddUnique(mFScriptDelegate1);
L3495:         this->GenerateTierList();
L3509:         this->Widget_TradingPost_ActivateSchematicButton->mTradingPost = this;
L3542:         this->Widget_TradingPost_LanuchButtonPlatform->mTradingPost = this;
L3575:         KismetArrayLibrary->Array_Clear([ref] this->mRelevantItems);
L3616:         goto L617;
L3621:         this->CloseTradepost();
L3635:         goto ExecutionFlow.Pop();
L3636:         UMGSequencePlayer* mUMGSequencePlayer1 = this->PlayAnimation(this->ShakeAnim, 0, 1, 0, 1);
L3682:         goto ExecutionFlow.Pop();
L3683:         goto L3636;
L3688:         goto L668;
L3693:         PlayerController* mPlayerController = this->GetOwningPlayer();
L3717:         Widget_Smoke* mWidget_Smoke = WidgetBlueprintLibrary->Create(this, Widget_Smoke, mPlayerController);
L3778:         PanelSlot* mPanelSlot = this->mSmokeContainer_BottomRight->AddChild(mWidget_Smoke);
L3829:         PlayerController* mPlayerController1 = this->GetOwningPlayer();
L3853:         Widget_Smoke* mWidget_Smoke1 = WidgetBlueprintLibrary->Create(this, Widget_Smoke, mPlayerController1);
L3914:         PanelSlot* mPanelSlot1 = this->mSmokeContainer_BottomLeft->AddChild(mWidget_Smoke1);
L3965:         PlayerController* mPlayerController2 = this->GetOwningPlayer();
L3989:         Widget_Smoke* mWidget_Smoke2 = WidgetBlueprintLibrary->Create(this, Widget_Smoke, mPlayerController2);
L4050:         PanelSlot* mPanelSlot2 = this->mSmokeContainer_TopCenter->AddChild(mWidget_Smoke2);
L4101:         goto ExecutionFlow.Pop();
L4102:         bool Temp_bool_Variable = true;
L4113:         bool Temp_bool_Variable1 = false;
L4124:         int32 Temp_int_Variable = mint326;
L4151:         this->mWindow->SetInventoryVisibility(switch (Temp_int_Variable) {
case 0 -> Temp_bool_Variable1;
case 1 -> Temp_bool_Variable;
default -> mbool11;
}, true);
L4249:         goto ExecutionFlow.Pop();
============ END FUNCTION ExecuteUbergraph_Widget_TradingPost ==============
