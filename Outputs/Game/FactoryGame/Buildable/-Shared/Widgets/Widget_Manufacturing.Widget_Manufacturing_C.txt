########################'
FUNCTION CODE DUMP OF: /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C
########################





============ BEGIN FUNCTION GetCylceProducedAndNameText ==============
L0:            TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L60:           FText mFText = FGRecipe->GetRecipeName(Recipe);
L119:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, 1, [ref] mItemAmount);
L174:          mFormatArgumentData.ArgumentName = "B";
L204:          mFormatArgumentData.ArgumentValueType = 4;
L233:          mFormatArgumentData.ArgumentValue = mFText;
L269:          mFormatArgumentData.ArgumentValueInt = 0;
L301:          mFormatArgumentData.ArgumentValueFloat = 0;
L333:          mFormatArgumentData.ArgumentValueGender = 0;
L362:          FGInventoryLibrary->GetAmountConvertedFromItemAmount([ref] mItemAmount, [ref] mTSubclassOf<FGItemDescriptor>, [ref] mfloat);
L421:          this->GetItemAmount(Recipe, [ref] mItemAmount1);
L453:          mFormatArgumentData1.ArgumentName = "A";
L483:          mFormatArgumentData1.ArgumentValueType = 2;
L512:          mFormatArgumentData1.ArgumentValue = ;
L541:          mFormatArgumentData1.ArgumentValueInt = 0;
L573:          mFormatArgumentData1.ArgumentValueFloat = mfloat;
L609:          mFormatArgumentData1.ArgumentValueGender = 0;
L638:          FGInventoryLibrary->GetAmountConvertedFromItemAmount([ref] mItemAmount1, [ref] mTSubclassOf<FGItemDescriptor>1, [ref] mfloat1);
L697:          FText mFText1 = FGItemDescriptor->GetItemName(mTSubclassOf<FGItemDescriptor>);
L756:          mFormatArgumentData2.ArgumentName = "A";
L786:          mFormatArgumentData2.ArgumentValueType = 2;
L815:          mFormatArgumentData2.ArgumentValue = ;
L844:          mFormatArgumentData2.ArgumentValueInt = 0;
L876:          mFormatArgumentData2.ArgumentValueFloat = mfloat1;
L912:          mFormatArgumentData2.ArgumentValueGender = 0;
L941:          mFormatArgumentData3.ArgumentName = "B";
L971:          mFormatArgumentData3.ArgumentValueType = 4;
L1000:         mFormatArgumentData3.ArgumentValue = mFText1;
L1036:         mFormatArgumentData3.ArgumentValueInt = 0;
L1068:         mFormatArgumentData3.ArgumentValueFloat = 0;
L1100:         mFormatArgumentData3.ArgumentValueGender = 0;
L1129:         uint8 muint8 = FGItemDescriptor->GetForm(mTSubclassOf<FGItemDescriptor>1);
L1188:         uint8 muint81 = FGItemDescriptor->GetForm(mTSubclassOf<FGItemDescriptor>);
L1247:         bool mbool = NotEqual_ByteByte(muint8, 1);
L1278:         bool mbool1 = NotEqual_ByteByte(muint81, 1);
L1309:         FText mFText2 = FGInventoryLibrary->GetProductionSuffixFromFormType(muint8);
L1368:         mFormatArgumentData4.ArgumentName = "suffix";
L1403:         mFormatArgumentData4.ArgumentValueType = 4;
L1432:         mFormatArgumentData4.ArgumentValue = mFText2;
L1468:         mFormatArgumentData4.ArgumentValueInt = 0;
L1500:         mFormatArgumentData4.ArgumentValueFloat = 0;
L1532:         mFormatArgumentData4.ArgumentValueGender = 0;
L1561:         bool Temp_bool_Variable1 = mbool;
L1580:         TArray<FormatArgumentData> mTArray<FormatArgumentData> = [mFormatArgumentData4];
L1600:         FText mFText3 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>);
L1708:         FText Temp_text_Variable = ;
L1728:         FText Temp_text_Variable1 = ;
L1748:         mFormatArgumentData5.ArgumentName = "Suffix";
L1783:         mFormatArgumentData5.ArgumentValueType = 4;
L1812:         mFormatArgumentData5.ArgumentValue = switch (Temp_bool_Variable1) {
case false -> Temp_text_Variable;
case true -> mFText3;
default -> mFText4;
};
L1892:         mFormatArgumentData5.ArgumentValueInt = 0;
L1924:         mFormatArgumentData5.ArgumentValueFloat = 0;
L1956:         mFormatArgumentData5.ArgumentValueGender = 0;
L1985:         TArray<FormatArgumentData> mTArray<FormatArgumentData>1 = [mFormatArgumentData2, mFormatArgumentData5, mFormatArgumentData];
L2023:         TArray<ItemAmount> mTArray<ItemAmount>1 = FGRecipe->GetProducts(Recipe, false);
L2083:         FText mFText5 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>1);
L2197:         int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>1);
L2256:         mFormatArgumentData6.ArgumentName = "a";
L2286:         mFormatArgumentData6.ArgumentValueType = 4;
L2315:         mFormatArgumentData6.ArgumentValue = mFText5;
L2351:         mFormatArgumentData6.ArgumentValueInt = 0;
L2383:         mFormatArgumentData6.ArgumentValueFloat = 0;
L2415:         mFormatArgumentData6.ArgumentValueGender = 0;
L2444:         bool mbool2 = Greater_IntInt(mint32, 1);
L2478:         bool Temp_bool_Variable = mbool2;
L2497:         bool Temp_bool_Variable2 = mbool1;
L2516:         TArray<FormatArgumentData> mTArray<FormatArgumentData>2 = [ScriptStruct /Script/Engine.FormatArgumentData(ArgumentName = "", ArgumentValueType = 0, ArgumentValue = , ArgumentValueInt = 0, ArgumentValueFloat = 0, ArgumentValueGender = 0)];
L2559:         FText mFText6 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>2);
L2663:         mFormatArgumentData7.ArgumentName = "Suffix";
L2698:         mFormatArgumentData7.ArgumentValueType = 4;
L2727:         mFormatArgumentData7.ArgumentValue = switch (Temp_bool_Variable2) {
case false -> Temp_text_Variable1;
case true -> mFText6;
default -> mFText7;
};
L2807:         mFormatArgumentData7.ArgumentValueInt = 0;
L2839:         mFormatArgumentData7.ArgumentValueFloat = 0;
L2871:         mFormatArgumentData7.ArgumentValueGender = 0;
L2900:         TArray<FormatArgumentData> mTArray<FormatArgumentData>3 = [mFormatArgumentData1, mFormatArgumentData7, mFormatArgumentData3];
L2938:         FText mFText8 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>3);
L3052:         mFormatArgumentData8.ArgumentName = "b";
L3082:         mFormatArgumentData8.ArgumentValueType = 4;
L3111:         mFormatArgumentData8.ArgumentValue = mFText8;
L3147:         mFormatArgumentData8.ArgumentValueInt = 0;
L3179:         mFormatArgumentData8.ArgumentValueFloat = 0;
L3211:         mFormatArgumentData8.ArgumentValueGender = 0;
L3240:         TArray<FormatArgumentData> mTArray<FormatArgumentData>4 = [mFormatArgumentData6, mFormatArgumentData8];
L3269:         FText mFText9 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>4);
L3377:         FText ReturnValue = switch (Temp_bool_Variable) {
case false -> mFText5;
case true -> mFText9;
default -> mFText10;
};
============ END FUNCTION GetCylceProducedAndNameText ==============





============ BEGIN FUNCTION CreateCategoryHeader ==============
L0:            PlayerController* mPlayerController = this->GetOwningPlayer();
L24:           Widget_CraftBench_Category* mWidget_CraftBench_Category = WidgetBlueprintLibrary->Create(this, Widget_CraftBench_Category, mPlayerController);
L85:           KismetSystemLibrary->SetTextPropertyByName(mWidget_CraftBench_Category, "mText", [ref] CategoryName);
L148:          KismetSystemLibrary->SetBoolPropertyByName(mWidget_CraftBench_Category, "mIsCollapsed", IsCollapsed);
L211:          VerticalBoxSlot* mVerticalBoxSlot = this->mVertBox->AddChildToVerticalBox(mWidget_CraftBench_Category);
L262:          mVerticalBoxSlot->SetHorizontalAlignment(0);
L296:          Widget_CraftBench_Category* Category Widget = mWidget_CraftBench_Category;
============ END FUNCTION CreateCategoryHeader ==============





============ BEGIN FUNCTION AddUniqueRecipe ==============
L0:            ExecutionFlow.Push(L1312);
L5:            TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L65:           TSubclassOf<FGItemCategory> mTSubclassOf<FGItemCategory> = FGItemDescriptor->GetItemCategory(mTArray<ItemAmount>[0].ItemClass);
L131:          bool mbool = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGItemCategory>);
L182:          if (!mbool) goto L1034;
L196:          mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L256:          mTSubclassOf<FGItemCategory> = FGItemDescriptor->GetItemCategory(mTArray<ItemAmount>[0].ItemClass);
L322:          TSubclassOf<FGItemCategory> localItemCategory = mTSubclassOf<FGItemCategory>;
L341:          bool Temp_bool_True_if_break_was_hit_Variable = false;
L352:          int32 Temp_int_Loop_Counter_Variable = 0;
L375:          int32 Temp_int_Array_Index_Variable = 0;
L398:          bool mbool1 = Not_PreBool(Temp_bool_True_if_break_was_hit_Variable);
L427:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] CategorizedRecipes);
L486:          bool mbool2 = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L524:          bool mbool3 = BooleanAND(mbool1, mbool2);
L562:          if (!mbool3) goto L1046;
L576:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L603:          ExecutionFlow.Push(L1238);
L608:          KismetArrayLibrary->Array_Get([ref] CategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct);
L667:          bool mbool4 = EqualEqual_ClassClass(localItemCategory, mItemCategoryRecipeStruct.Category_5_48CE2A3C41089DC1E5DE39909CF17792);
L714:          if (!mbool4) goto ExecutionFlow.Pop();
L724:          KismetArrayLibrary->Array_Get([ref] CategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct);
L783:          TArray<TSubclassOf<FGRecipe>> localRecipeArray = mItemCategoryRecipeStruct.Recipes_6_5C2C7BF54D78A483A81B2785C2CF7736;
L819:          int32 mint321 = KismetArrayLibrary->Array_Add([ref] localRecipeArray, [ref] Recipe);
L887:          mItemCategoryRecipeStruct1.Category_5_48CE2A3C41089DC1E5DE39909CF17792 = localItemCategory;
L915:          mItemCategoryRecipeStruct1.Recipes_6_5C2C7BF54D78A483A81B2785C2CF7736 = localRecipeArray;
L951:          KismetArrayLibrary->Array_Set([ref] CategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct1, false);
L1011:         bool localRecipeExists = true;
L1022:         Temp_bool_True_if_break_was_hit_Variable = true;
L1033:         goto ExecutionFlow.Pop();
L1034:         localItemCategory = nullptr;
L1045:         goto ExecutionFlow.Pop();
L1046:         bool mbool5 = Not_PreBool(localRecipeExists);
L1075:         if (!mbool5) goto ExecutionFlow.Pop();
L1085:         TArray<TSubclassOf<FGRecipe>> mTArray<TSubclassOf<FGRecipe>> = [Recipe];
L1105:         mItemCategoryRecipeStruct2.Category_5_48CE2A3C41089DC1E5DE39909CF17792 = localItemCategory;
L1133:         mItemCategoryRecipeStruct2.Recipes_6_5C2C7BF54D78A483A81B2785C2CF7736 = mTArray<TSubclassOf<FGRecipe>>;
L1169:         int32 mint322 = KismetArrayLibrary->Array_Add([ref] CategorizedRecipes, [ref] mItemCategoryRecipeStruct2);
L1237:         goto ExecutionFlow.Pop();
L1238:         int32 mint323 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L1280:         Temp_int_Loop_Counter_Variable = mint323;
L1307:         goto L398;
============ END FUNCTION AddUniqueRecipe ==============





============ BEGIN FUNCTION GenerateOutputSlots ==============
L0:            ExecutionFlow.Push(L1152);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L111:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L170:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L208:          if (!mbool) goto L982;
L222:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L249:          ExecutionFlow.Push(L1078);
L254:          mTArray<ItemAmount> = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L314:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, Temp_int_Array_Index_Variable, [ref] mItemAmount);
L373:          TSubclassOf<FGItemDescriptor> LocalItemClass = mItemAmount.ItemClass;
L401:          int32 LocalIndex = Temp_int_Array_Index_Variable;
L428:          FText Temp_text_Variable = "[object Object]";
L491:          FText Temp_text_Variable1 = "[object Object]";
L555:          uint8 muint8 = FGItemDescriptor->GetForm(LocalItemClass);
L614:          bool mbool1 = EqualEqual_ByteByte(muint8, 2);
L645:          bool Temp_bool_Variable1 = mbool1;
L664:          bool Temp_bool_Variable = mbool1;
L683:          FGInventoryComponent* mFGInventoryComponent = this->mBuildableManufacturer->GetOutputInventory();
L725:          mOutputSlotData_Struct.Title_3_16865392480E04744923368E818FDF9E = switch (Temp_bool_Variable) {
case false -> Temp_text_Variable1;
case true -> Temp_text_Variable;
default -> mFText;
};
L805:          mOutputSlotData_Struct.InventoryComponent_6_670B318B4DE9249E98B040BFD46013A9 = mFGInventoryComponent;
L833:          mOutputSlotData_Struct.InventorySlotIndex_10_ECF91A0C4E759F6F2FC3768CE0512AB9 = LocalIndex;
L869:          int32 mint321 = KismetArrayLibrary->Array_Add([ref] switch (Temp_bool_Variable1) {
case false -> SolidOutputs;
case true -> LiquidOutputs;
default -> mTArray<OutputSlotData_Struct>;
}, [ref] mOutputSlotData_Struct);
L981:          goto ExecutionFlow.Pop();
L982:          KismetArrayLibrary->Array_Append([ref] SolidOutputs, [ref] LiquidOutputs);
L1032:         this->Widget_Output_Slot->GenerateOutputSlots([ref] SolidOutputs);
L1077:         goto ExecutionFlow.Pop();
L1078:         int32 mint322 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L1120:         Temp_int_Loop_Counter_Variable = mint322;
L1147:         goto L51;
============ END FUNCTION GenerateOutputSlots ==============





============ BEGIN FUNCTION SetActivatedRecipe ==============
L0:            ExecutionFlow.Push(L1403);
L5:            this->mActivatedRecipe = mActivatedRecipe;
L24:           KismetArrayLibrary->Array_Clear([ref] this->mRelevantItems);
L65:           int32 Temp_int_Loop_Counter_Variable = 0;
L88:           int32 Temp_int_Array_Index_Variable1 = 0;
L111:          TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetIngredients(this->mActivatedRecipe);
L170:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L229:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L267:          if (!mbool) goto L509;
L281:          Temp_int_Array_Index_Variable1 = Temp_int_Loop_Counter_Variable;
L308:          ExecutionFlow.Push(L1255);
L313:          mTArray<ItemAmount> = FGRecipe->GetIngredients(this->mActivatedRecipe);
L372:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, Temp_int_Array_Index_Variable1, [ref] mItemAmount);
L431:          int32 mint321 = KismetArrayLibrary->Array_Add([ref] this->mRelevantItems, [ref] mItemAmount.ItemClass);
L508:          goto ExecutionFlow.Pop();
L509:          int32 Temp_int_Loop_Counter_Variable1 = 0;
L532:          int32 Temp_int_Array_Index_Variable = 0;
L555:          TArray<ItemAmount> mTArray<ItemAmount>1 = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L615:          int32 mint322 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>1);
L674:          bool mbool1 = Less_IntInt(Temp_int_Loop_Counter_Variable1, mint322);
L712:          if (!mbool1) goto L955;
L726:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable1;
L753:          ExecutionFlow.Push(L1329);
L758:          mTArray<ItemAmount>1 = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L818:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>1, Temp_int_Array_Index_Variable, [ref] mItemAmount1);
L877:          int32 mint323 = KismetArrayLibrary->Array_Add([ref] this->mRelevantItems, [ref] mItemAmount1.ItemClass);
L954:          goto ExecutionFlow.Pop();
L955:          PlayerController* mPlayerController = this->GetOwningPlayer();
L979:          FGUnlockSubsystem* mFGUnlockSubsystem = FGUnlockSubsystem->Get(mPlayerController);
L1030:         bool mbool2 = mFGUnlockSubsystem->GetIsBuildingOverclockUnlocked();
L1072:         if (!mbool2) goto L1173;
L1086:         const TSubclassOf<FGItemDescriptor> Temp_class_Variable = Desc_CrystalShard;
L1105:         int32 mint324 = KismetArrayLibrary->Array_Add([ref] this->mRelevantItems, [ref] Temp_class_Variable);
L1173:         this->Widget_Window_DarkMode->SetupRelevantInventory([ref] this->mRelevantItems);
L1218:         this->Widget_Overclock->SetDefaultProductionSpeed();
L1254:         goto ExecutionFlow.Pop();
L1255:         int32 mint325 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L1297:         Temp_int_Loop_Counter_Variable = mint325;
L1324:         goto L111;
L1329:         int32 mint326 = Add_IntInt(Temp_int_Loop_Counter_Variable1, 1);
L1371:         Temp_int_Loop_Counter_Variable1 = mint326;
L1398:         goto L555;
============ END FUNCTION SetActivatedRecipe ==============





============ BEGIN FUNCTION ReconstructIOSlots ==============
L0:            ExecutionFlow.Push(L361);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable = 0;
L51:           int32 mint32 = KismetArrayLibrary->Array_Length([ref] this->mIOSlots);
L110:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L148:          if (!mbool) goto ExecutionFlow.Pop();
L158:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L185:          ExecutionFlow.Push(L287);
L190:          KismetArrayLibrary->Array_Get([ref] this->mIOSlots, Temp_int_Array_Index_Variable, [ref] mWidget_ManufacturingIOSlot);
L249:          mWidget_ManufacturingIOSlot->ConstructFromManufacturingWidget(this);
L286:          goto ExecutionFlow.Pop();
L287:          int32 mint321 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L329:          Temp_int_Loop_Counter_Variable = mint321;
L356:          goto L51;
============ END FUNCTION ReconstructIOSlots ==============





============ BEGIN FUNCTION DropInventorySlotStack ==============
L0:            ExecutionFlow.Push(L1349);
L5:            ExecutionFlow.Push(L475);
L10:           bool Temp_bool_True_if_break_was_hit_Variable1 = false;
L21:           int32 Temp_int_Loop_Counter_Variable = 0;
L44:           int32 Temp_int_Array_Index_Variable1 = 0;
L67:           bool mbool = Not_PreBool(Temp_bool_True_if_break_was_hit_Variable1);
L96:           int32 mint32 = KismetArrayLibrary->Array_Length([ref] this->mIOSlots);
L155:          bool mbool1 = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L193:          bool mbool2 = BooleanAND(mbool, mbool1);
L231:          if (!mbool2) goto L499;
L245:          Temp_int_Array_Index_Variable1 = Temp_int_Loop_Counter_Variable;
L272:          ExecutionFlow.Push(L1275);
L277:          KismetArrayLibrary->Array_Get([ref] this->mIOSlots, Temp_int_Array_Index_Variable1, [ref] mWidget_ManufacturingIOSlot);
L336:          mWidget_ManufacturingIOSlot->Widget_CostSlotWrapper->Widget_InventorySlot->DropOntoInventorySlot(InventorySlot, [ref] mbool3);
L434:          bool LocalResult = mbool3;
L453:          if (!LocalResult) goto ExecutionFlow.Pop();
L463:          Temp_bool_True_if_break_was_hit_Variable1 = true;
L474:          goto ExecutionFlow.Pop();
L475:          bool WasStackMoved = LocalResult;
L494:          <End of Inlined Event Graph Function>;
L499:          if (!LocalResult) goto L514;
L513:          goto ExecutionFlow.Pop();
L514:          this->Widget_Overclock->GetUnlockedOverclockSlots([ref] mTArray<Widget_InventorySlot>);
L559:          bool Temp_bool_True_if_break_was_hit_Variable = false;
L570:          int32 Temp_int_Loop_Counter_Variable1 = 0;
L593:          int32 Temp_int_Array_Index_Variable = 0;
L616:          bool mbool4 = Not_PreBool(Temp_bool_True_if_break_was_hit_Variable);
L645:          int32 mint321 = KismetArrayLibrary->Array_Length([ref] mTArray<Widget_InventorySlot>);
L704:          bool mbool5 = Less_IntInt(Temp_int_Loop_Counter_Variable1, mint321);
L742:          bool mbool6 = BooleanAND(mbool4, mbool5);
L780:          if (!mbool6) goto L1255;
L794:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable1;
L821:          ExecutionFlow.Push(L1181);
L826:          bool Temp_bool_Variable1 = true;
L837:          KismetArrayLibrary->Array_Get([ref] mTArray<Widget_InventorySlot>, Temp_int_Array_Index_Variable, [ref] mWidget_InventorySlot);
L896:          mWidget_InventorySlot->CheckSlotHasItems([ref] mbool7);
L941:          bool mbool8 = Not_PreBool(mbool7);
L970:          bool Temp_bool_Variable2 = true;
L981:          if (!switch (Temp_bool_Variable1) {
case false -> Temp_bool_Variable2;
case true -> mbool8;
default -> mbool9;
}) goto ExecutionFlow.Pop();
L1035:         KismetArrayLibrary->Array_Get([ref] mTArray<Widget_InventorySlot>, Temp_int_Array_Index_Variable, [ref] mWidget_InventorySlot);
L1094:         mWidget_InventorySlot->DropOntoInventorySlot(InventorySlot, [ref] mbool10);
L1148:         if (!mbool10) goto ExecutionFlow.Pop();
L1158:         bool Temp_bool_Variable = true;
L1169:         Temp_bool_True_if_break_was_hit_Variable = true;
L1180:         goto ExecutionFlow.Pop();
L1181:         int32 mint322 = Add_IntInt(Temp_int_Loop_Counter_Variable1, 1);
L1223:         Temp_int_Loop_Counter_Variable1 = mint322;
L1250:         goto L616;
L1255:         LocalResult = Temp_bool_Variable;
L1274:         goto ExecutionFlow.Pop();
L1275:         int32 mint323 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L1317:         Temp_int_Loop_Counter_Variable = mint323;
L1344:         goto L67;
============ END FUNCTION DropInventorySlotStack ==============





============ BEGIN FUNCTION UpdateWindowText ==============
L0:            FGBuildable* mFGBuildable = Cast<Class /Script/FactoryGame.FGBuildable>(this->mInteractObject);
L36:           bool mbool = mFGBuildable;
L65:           if (!mbool) goto L146;
L79:           this->Widget_Window_DarkMode->SetTitle(mFGBuildable->mDisplayName);
============ END FUNCTION UpdateWindowText ==============





============ BEGIN FUNCTION GetItemAmount ==============
L0:            bool mbool = KismetSystemLibrary->IsValidClass(Recipe);
L51:           if (!mbool) goto L207;
L65:           TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L125:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, 0, [ref] mItemAmount);
L180:          ItemAmount ItemAmount = mItemAmount;
============ END FUNCTION GetItemAmount ==============





============ BEGIN FUNCTION GetManufacturingWarningVisibility ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(buildableManufacturer);
L51:           if (!mbool) goto L368;
L65:           bool mbool1 = buildableManufacturer->HasPower();
L111:          bool mbool2 = Not_PreBool(mbool1);
L140:          bool mbool3 = buildableManufacturer->IsProductionPaused();
L182:          bool mbool4 = BooleanOR(mbool3, mbool2);
L220:          uint8 Temp_byte_Variable = 3;
L240:          bool Temp_bool_Variable = mbool4;
L259:          uint8 Temp_byte_Variable1 = 1;
L279:          this->Widget_Manufacturing_Warning->SetVisibility(switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable1;
case true -> Temp_byte_Variable;
default -> muint8;
});
============ END FUNCTION GetManufacturingWarningVisibility ==============





============ BEGIN FUNCTION UpdateProductionStats ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mBuildableManufacturer);
L51:           if (!mbool) goto L724;
L65:           bool mbool1 = KismetSystemLibrary->IsValidClass(this->mActivatedRecipe);
L116:          if (!mbool1) goto L724;
L130:          TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L190:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L249:          bool mbool2 = Greater_IntInt(mint32, 1);
L283:          if (!mbool2) goto L448;
L297:          mTArray<ItemAmount> = FGRecipe->GetProducts(this->mActivatedRecipe, false);
L357:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, 1, [ref] mItemAmount);
L412:          int32 LocalSecondAmount = mItemAmount.amount;
L448:          float mfloat = this->mBuildableManufacturer->GetProductivity();
L498:          float mfloat1 = this->mBuildableManufacturer->GetProductionCycleTime();
L552:          float mfloat2 = this->mBuildableManufacturer->GetProducingPowerConsumption();
L602:          this->GetItemAmount(this->mActivatedRecipe, [ref] mItemAmount1);
L634:          this->Widget_Output_Slot->UpdateProductionStats(mItemAmount1.amount, mfloat1, mfloat2, mfloat, LocalSecondAmount);
============ END FUNCTION UpdateProductionStats ==============





============ BEGIN FUNCTION UpdateOutputSlotInfo ==============
L0:            FText mFText = this->GetCylceProducedAndNameText(Recipe);
L41:           this->Widget_Output_Slot->mRecipeName->SetText(mFText);
L108:          this->GenerateOutputSlots();
L122:          this->GetItemAmount(Recipe, [ref] mItemAmount);
L154:          this->Widget_Output_Slot->mItemDescriptor = mItemAmount.ItemClass;
L204:          TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L264:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L323:          bool mbool = Greater_IntInt(mint32, 1);
L357:          if (!mbool) goto L707;
L371:          TArray<ItemAmount> mTArray<ItemAmount>1 = FGRecipe->GetProducts(Recipe, false);
L431:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>1, 1, [ref] mItemAmount1);
L486:          mTArray<ItemAmount> = FGRecipe->GetProducts(Recipe, false);
L546:          mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L605:          mbool = Greater_IntInt(mint32, 1);
L639:          this->Widget_Output_Slot->SetShowSecondPartsPerMin(mbool, mItemAmount1.ItemClass);
L702:          <End of Inlined Event Graph Function>;
L707:          this->Widget_Output_Slot->SetShowSecondPartsPerMin(false, nullptr);
============ END FUNCTION UpdateOutputSlotInfo ==============





============ BEGIN FUNCTION UpdateProductivityPercentage ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mBuildableManufacturer);
L51:           if (!mbool) goto L1233;
L65:           float mfloat = this->mFactory->GetProductionProgress();
L119:          this->Widget_Output_Slot->mProgressBar->mProgressBar->SetPercent(mfloat);
L204:          bool mbool1 = this->mBuildableManufacturer->IsProductionPaused();
L246:          bool mbool2 = this->mBuildableManufacturer->HasPower();
L292:          bool mbool3 = Not_PreBool(mbool2);
L321:          bool mbool4 = BooleanOR(mbool3, mbool1);
L359:          HUDHelpers->GetFactoryGameLightGray(this, [ref] mSlateColor, [ref] mLinearColor);
L414:          HUDHelpers->GetFactoryGameDarkGray(this, [ref] mSlateColor1, [ref] mLinearColor1);
L469:          LinearColor mLinearColor2 = SelectColor(mLinearColor, mLinearColor1, mbool4);
L524:          this->Widget_Output_Slot->mProgressBar->mProgressBar->SetFillColorAndOpacity(mLinearColor2);
L609:          float mfloat1 = this->mFactory->GetProductionProgress();
L663:          float mfloat2 = Multiply_FloatFloat(mfloat1, 10);
L705:          int32 mint32 = FTrunc(mfloat2);
L742:          int32 mint321 = Multiply_IntInt(mint32, 10);
L784:          FText mFText = KismetTextLibrary->Conv_IntToText(mint321, false, false, 1, 324);
L855:          mFormatArgumentData.ArgumentName = "A";
L885:          mFormatArgumentData.ArgumentValueType = 4;
L914:          mFormatArgumentData.ArgumentValue = mFText;
L950:          mFormatArgumentData.ArgumentValueInt = 0;
L982:          mFormatArgumentData.ArgumentValueFloat = 0;
L1014:         mFormatArgumentData.ArgumentValueGender = 0;
L1043:         TArray<FormatArgumentData> mTArray<FormatArgumentData> = [mFormatArgumentData];
L1063:         FText mFText1 = KismetTextLibrary->Format("[object Object]", mTArray<FormatArgumentData>);
L1166:         this->Widget_Output_Slot->mPercentageText->SetText(mFText1);
============ END FUNCTION UpdateProductivityPercentage ==============





============ BEGIN FUNCTION GetPotentialButton ==============
L0:            bool mbool = KismetSystemLibrary->IsValid(this->mBuildableManufacturer);
L51:           if (!mbool) goto L166;
L65:           bool mbool1 = this->mBuildableManufacturer->GetCanChangePotential();
L107:          if (!mbool1) goto L146;
L121:          uint8 ReturnValue = 0;
L141:          goto L166;
L146:          ReturnValue = 1;
============ END FUNCTION GetPotentialButton ==============





============ BEGIN FUNCTION CreateInfoBox ==============
L0:            ExecutionFlow.Push(L4222);
L5:            bool mbool = KismetSystemLibrary->IsValidClass(Recipe);
L56:           uint8 Temp_byte_Variable = 2;
L76:           uint8 Temp_byte_Variable1 = 0;
L96:           bool Temp_bool_Variable = mbool;
L115:          this->Widget_BuildMenu_InfoBox->SetVisibility(switch (Temp_bool_Variable) {
case false -> Temp_byte_Variable;
case true -> Temp_byte_Variable1;
default -> muint8;
});
L204:          this->Widget_BuildMenu_InfoBox->mStatContainer->ClearChildren();
L262:          this->Widget_BuildMenu_InfoBox->mByProductText->SetText([ref] localClearText);
L325:          this->Widget_BuildMenu_InfoBox->mCostContainer->ClearChildren();
L383:          int32 Temp_int_Loop_Counter_Variable = 0;
L406:          int32 Temp_int_Array_Index_Variable = 0;
L429:          TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetIngredients(Recipe);
L488:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L547:          bool mbool1 = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L585:          if (!mbool1) goto L1027;
L599:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L626:          ExecutionFlow.Push(L4024);
L631:          PlayerController* mPlayerController = this->GetOwningPlayer();
L655:          Widget_CostSlotWrapper* mWidget_CostSlotWrapper = WidgetBlueprintLibrary->Create(this, Widget_CostSlotWrapper, mPlayerController);
L716:          mTArray<ItemAmount> = FGRecipe->GetIngredients(Recipe);
L775:          KismetArrayLibrary->Array_Get([ref] mTArray<ItemAmount>, Temp_int_Array_Index_Variable, [ref] mItemAmount);
L834:          mWidget_CostSlotWrapper->Setup CostIcon(nullptr, mItemAmount, nullptr, 0, 0, false, false, false);
L894:          WrapBoxSlot* mWrapBoxSlot = this->Widget_BuildMenu_InfoBox->mCostContainer->AddChildToWrapBox(mWidget_CostSlotWrapper);
L967:          mWidget_CostSlotWrapper->mCostSlotContainer->SetRenderOpacity(0);
L1026:         goto ExecutionFlow.Pop();
L1027:         ExecutionFlow.Push(L3428);
L1032:         this->GetItemAmount(this->mHoveredRecipe, [ref] mItemAmount1);
L1064:         FGInventoryLibrary->GetAmountConvertedFromItemAmount([ref] mItemAmount1, [ref] mTSubclassOf<FGItemDescriptor>, [ref] mfloat);
L1123:         Texture2D* mTexture2D = FGItemDescriptor->GetBigIcon(mTSubclassOf<FGItemDescriptor>);
L1174:         mSlateBrush.ImageSize = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.ImageSize;
L1263:         mSlateBrush.Margin = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.Margin;
L1352:         mSlateBrush.TintColor = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.TintColor;
L1441:         mSlateBrush.ResourceObject = mTexture2D;
L1469:         mSlateBrush.DrawAs = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.DrawAs;
L1558:         mSlateBrush.Tiling = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.Tiling;
L1647:         mSlateBrush.Mirroring = this->Widget_BuildMenu_InfoBox->mPreviewIcon->Brush.Mirroring;
L1736:         this->Widget_BuildMenu_InfoBox->mPreviewIcon->SetBrush([ref] mSlateBrush);
L1803:         FText mFText = this->GetCylceProducedAndNameText(this->mHoveredRecipe);
L1844:         this->Widget_BuildMenu_InfoBox->mItemName->SetText(mFText);
L1911:         this->GetItemAmount(this->mHoveredRecipe, [ref] mItemAmount1);
L1943:         FGInventoryLibrary->GetAmountConvertedFromItemAmount([ref] mItemAmount1, [ref] mTSubclassOf<FGItemDescriptor>, [ref] mfloat);
L2002:         FText mFText1 = FGItemDescriptor->GetItemDescription(mTSubclassOf<FGItemDescriptor>);
L2061:         this->Widget_BuildMenu_InfoBox->mRichTextBlock->SetText([ref] mFText1);
L2124:         TArray<ItemAmount> mTArray<ItemAmount>1 = FGRecipe->GetProducts(this->mHoveredRecipe, false);
L2184:         bool mbool2 = KismetArrayLibrary->Array_IsValidIndex([ref] mTArray<ItemAmount>1, 1);
L2240:         this->Widget_BuildMenu_InfoBox->GetByProductIconVisibility(mbool2);
L2285:         mTArray<ItemAmount>1 = FGRecipe->GetProducts(this->mHoveredRecipe, false);
L2345:         mbool2 = KismetArrayLibrary->Array_IsValidIndex([ref] mTArray<ItemAmount>1, 1);
L2401:         if (!mbool2) goto L4098;
L2415:         mTArray<ItemAmount>1 = FGRecipe->GetProducts(this->mHoveredRecipe, false);
L2475:         FText mFText2 = FGItemDescriptor->GetItemDescription(mTArray<ItemAmount>1[1].ItemClass);
L2549:         this->Widget_BuildMenu_InfoBox->mByProductText->SetText([ref] mFText2);
L2612:         this->Widget_BuildMenu_InfoBox->mByProductBox->SetVisibility(0);
L2672:         TArray<ItemAmount> mTArray<ItemAmount>2 = FGRecipe->GetProducts(this->mHoveredRecipe, false);
L2732:         Texture2D* mTexture2D1 = FGItemDescriptor->GetBigIcon(mTArray<ItemAmount>2[1].ItemClass);
L2798:         mSlateBrush1.ImageSize = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.ImageSize;
L2887:         mSlateBrush1.Margin = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.Margin;
L2976:         mSlateBrush1.TintColor = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.TintColor;
L3065:         mSlateBrush1.ResourceObject = mTexture2D1;
L3093:         mSlateBrush1.DrawAs = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.DrawAs;
L3182:         mSlateBrush1.Tiling = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.Tiling;
L3271:         mSlateBrush1.Mirroring = this->Widget_BuildMenu_InfoBox->mByProductIcon->Brush.Mirroring;
L3360:         this->Widget_BuildMenu_InfoBox->mByProductIcon->SetBrush([ref] mSlateBrush1);
L3427:         goto ExecutionFlow.Pop();
L3428:         PlayerController* mPlayerController1 = this->GetOwningPlayer();
L3452:         Widget_ManufacturingStat* mWidget_ManufacturingStat = WidgetBlueprintLibrary->Create(this, Widget_ManufacturingStat, mPlayerController1);
L3513:         KismetSystemLibrary->SetBoolPropertyByName(mWidget_ManufacturingStat, "isCycleTime", true);
L3568:         float mfloat1 = this->mBuildableManufacturer->GetProductionCycleTimeForRecipe(this->mHoveredRecipe);
L3631:         FText mFText3 = KismetTextLibrary->Conv_FloatToText(mfloat1, 0, false, true, 1, 324, 1, 1);
L3714:         FString mFString = KismetTextLibrary->Conv_TextToString([ref] mFText3);
L3773:         float mfloat2 = KismetStringLibrary->Conv_StringToFloat(mFString);
L3832:         KismetSystemLibrary->SetFloatPropertyByName(mWidget_ManufacturingStat, "mManufacturingStat", mfloat2);
L3895:         KismetSystemLibrary->SetBoolPropertyByName(mWidget_ManufacturingStat, "mWhiteIcon", true);
L3950:         WrapBoxSlot* mWrapBoxSlot1 = this->Widget_BuildMenu_InfoBox->mStatContainer->AddChildToWrapBox(mWidget_ManufacturingStat);
L4023:         goto ExecutionFlow.Pop();
L4024:         int32 mint321 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L4066:         Temp_int_Loop_Counter_Variable = mint321;
L4093:         goto L429;
L4098:         this->Widget_BuildMenu_InfoBox->mByProductText->SetText([ref] localClearText);
L4161:         this->Widget_BuildMenu_InfoBox->mByProductBox->SetVisibility(1);
L4221:         goto ExecutionFlow.Pop();
============ END FUNCTION CreateInfoBox ==============





============ BEGIN FUNCTION OnManufacturingRecipeClicked ==============
L0:            PlayerController* mPlayerController = this->GetOwningPlayer();
L24:           FGPlayerController* mFGPlayerController = Cast<Class /Script/FactoryGame.FGPlayerController>(mPlayerController);
L60:           bool mbool = mFGPlayerController;
L89:           if (!mbool) goto L348;
L103:          BP_RemoteCallObject* mBP_RemoteCallObject = mFGPlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L154:          mBP_RemoteCallObject->Server_SetRecipeOnManufacturingProxy(this->mBuildableManufacturer, Recipe);
L208:          this->SetActivatedRecipe(this->mHoveredRecipe);
L231:          this->Widget_SlidingTabs->SetActiveIndex(1, true);
L273:          this->UpdateIOSlots();
L287:          this->Widget_Window_DarkMode->SetInventoryVisibility(true, true);
L325:          this->UpdateOutputSlotInfo(this->mActivatedRecipe);
============ END FUNCTION OnManufacturingRecipeClicked ==============





============ BEGIN FUNCTION OnStopHoveringManufacturingRecipe ==============
L0:            bool mbool = EqualEqual_ClassClass(Recipe, this->mHoveredRecipe);
L38:           if (!mbool) goto L63;
L52:           this->mHoveredRecipe = nullptr;
============ END FUNCTION OnStopHoveringManufacturingRecipe ==============





============ BEGIN FUNCTION OnManufacturingRecipeHovered ==============
L0:            this->mHoveredRecipe = Recipe;
L19:           this->CreateInfoBox(this->mHoveredRecipe);
L42:           UMGSequencePlayer* mUMGSequencePlayer = this->Widget_BuildMenu_InfoBox->PlayAnimation(this->Widget_BuildMenu_InfoBox->IconAnim, 0, 1, 0, 1);
L132:          this->Widget_BuildMenu_InfoBox->AnimateCostSlots();
============ END FUNCTION OnManufacturingRecipeHovered ==============





============ BEGIN FUNCTION GetIsInfoButtonTabEnabled ==============
L0:            bool mbool = KismetSystemLibrary->IsValidClass(this->mActivatedRecipe);
L51:           bool ReturnValue = mbool;
============ END FUNCTION GetIsInfoButtonTabEnabled ==============





============ BEGIN FUNCTION RemoveInputSlot ==============
L0:            ExecutionFlow.Push(L465);
L5:            ExecutionFlow.Push(L279);
L10:           Widget* mWidget = this->mInputVBox->GetChildAt(0);
L57:           Widget_ManufacturingIOSlot* mWidget_ManufacturingIOSlot = Cast<WidgetBlueprintGeneratedClass /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_ManufacturingIOSlot.Widget_ManufacturingIOSlot_C>(mWidget);
L93:           bool mbool = mWidget_ManufacturingIOSlot;
L122:          if (!mbool) goto ExecutionFlow.Pop();
L132:          bool mbool1 = KismetArrayLibrary->Array_RemoveItem([ref] this->mIOSlots, [ref] mWidget_ManufacturingIOSlot);
L192:          mFScriptDelegate->BindUFunction(this, OnInventorySlotStackMove);
L215:          mWidget_ManufacturingIOSlot->Widget_InventorySlot->OnMoveStack.Remove(mFScriptDelegate);
L278:          goto ExecutionFlow.Pop();
L279:          int32 mint32 = this->mInputVBox->GetChildrenCount();
L329:          int32 mint321 = Subtract_IntInt(mint32, 1);
L371:          int32 mint322 = Min(mint321, 0);
L413:          bool mbool2 = this->mInputVBox->RemoveChildAt(mint322);
L464:          goto ExecutionFlow.Pop();
============ END FUNCTION RemoveInputSlot ==============





============ BEGIN FUNCTION AddInputSlot ==============
L0:            PlayerController* mPlayerController = this->GetOwningPlayer();
L24:           Widget_ManufacturingIOSlot* mWidget_ManufacturingIOSlot = WidgetBlueprintLibrary->Create(this, Widget_ManufacturingIOSlot, mPlayerController);
L85:           KismetSystemLibrary->SetObjectPropertyByName(mWidget_ManufacturingIOSlot, "mManufacturingWidget", this);
L140:          VerticalBoxSlot* mVerticalBoxSlot = this->mInputVBox->AddChildToVerticalBox(mWidget_ManufacturingIOSlot);
L191:          int32 mint32 = KismetArrayLibrary->Array_Add([ref] this->mIOSlots, [ref] mWidget_ManufacturingIOSlot);
L259:          mFScriptDelegate->BindUFunction(this, OnInventorySlotStackMove);
L282:          mWidget_ManufacturingIOSlot->Widget_CostSlotWrapper->Widget_InventorySlot->OnMoveStack.AddUnique(mFScriptDelegate);
============ END FUNCTION AddInputSlot ==============





============ BEGIN FUNCTION UpdateIOSlots ==============
L0:            ExecutionFlow.Push(L1643);
L5:            int32 mint32 = this->mInputVBox->GetChildrenCount();
L55:           TArray<ItemAmount> mTArray<ItemAmount> = FGRecipe->GetIngredients(this->mActivatedRecipe);
L114:          int32 mint321 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L173:          bool mbool = NotEqual_IntInt(mint321, mint32);
L211:          if (!mbool) goto L465;
L225:          ExecutionFlow.Push(L5);
L230:          mint32 = this->mInputVBox->GetChildrenCount();
L280:          mTArray<ItemAmount> = FGRecipe->GetIngredients(this->mActivatedRecipe);
L339:          mint321 = KismetArrayLibrary->Array_Length([ref] mTArray<ItemAmount>);
L398:          bool mbool1 = Greater_IntInt(mint321, mint32);
L436:          if (!mbool1) goto L1480;
L450:          this->AddInputSlot();
L464:          goto ExecutionFlow.Pop();
L465:          int32 Temp_int_Variable = 0;
L488:          mint32 = this->mInputVBox->GetChildrenCount();
L538:          bool mbool2 = LessEqual_IntInt(Temp_int_Variable, mint32);
L576:          if (!mbool2) goto L767;
L590:          ExecutionFlow.Push(L1495);
L595:          Widget* mWidget = this->mInputVBox->GetChildAt(Temp_int_Variable);
L646:          Widget_ManufacturingIOSlot* mWidget_ManufacturingIOSlot = Cast<WidgetBlueprintGeneratedClass /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_ManufacturingIOSlot.Widget_ManufacturingIOSlot_C>(mWidget);
L682:          bool mbool3 = mWidget_ManufacturingIOSlot;
L711:          if (!mbool3) goto ExecutionFlow.Pop();
L721:          mWidget_ManufacturingIOSlot->Set CostSlot(Temp_int_Variable);
L766:          goto ExecutionFlow.Pop();
L767:          KismetArrayLibrary->Array_Clear([ref] this->Input_DropArea->mInventorySlots);
L830:          int32 Temp_int_Loop_Counter_Variable = 0;
L853:          int32 Temp_int_Array_Index_Variable = 0;
L876:          int32 mint322 = KismetArrayLibrary->Array_Length([ref] this->mIOSlots);
L935:          bool mbool4 = Less_IntInt(Temp_int_Loop_Counter_Variable, mint322);
L973:          if (!mbool4) goto L1213;
L987:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable;
L1014:         ExecutionFlow.Push(L1569);
L1019:         KismetArrayLibrary->Array_Get([ref] this->mIOSlots, Temp_int_Array_Index_Variable, [ref] mWidget_ManufacturingIOSlot1);
L1078:         int32 mint323 = KismetArrayLibrary->Array_Add([ref] this->Input_DropArea->mInventorySlots, [ref] mWidget_ManufacturingIOSlot1->Widget_CostSlotWrapper->Widget_InventorySlot);
L1212:         goto ExecutionFlow.Pop();
L1213:         int32 mint324 = this->mInputVBox->GetChildrenCount();
L1263:         bool mbool5 = EqualEqual_IntInt(mint324, 4);
L1297:         if (!mbool5) goto ExecutionFlow.Pop();
L1307:         Widget* mWidget1 = this->mInputVBox->GetChildAt(3);
L1354:         Widget_ManufacturingIOSlot* mWidget_ManufacturingIOSlot2 = Cast<WidgetBlueprintGeneratedClass /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_ManufacturingIOSlot.Widget_ManufacturingIOSlot_C>(mWidget1);
L1390:         bool mbool6 = mWidget_ManufacturingIOSlot2;
L1419:         mWidget_ManufacturingIOSlot2->mDividerBottom->SetVisibility(1);
L1479:         goto ExecutionFlow.Pop();
L1480:         this->RemoveInputSlot();
L1494:         goto ExecutionFlow.Pop();
L1495:         int32 mint325 = Add_IntInt(Temp_int_Variable, 1);
L1537:         Temp_int_Variable = mint325;
L1564:         goto L488;
L1569:         int32 mint326 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L1611:         Temp_int_Loop_Counter_Variable = mint326;
L1638:         goto L876;
============ END FUNCTION UpdateIOSlots ==============





============ BEGIN FUNCTION SetSelectedRecipe ==============
L0:            bool mbool = NotEqual_ClassClass(this->mHoveredRecipe, Recipe);
L38:           if (!mbool) goto L71;
L52:           this->mHoveredRecipe = Recipe;
============ END FUNCTION SetSelectedRecipe ==============





============ BEGIN FUNCTION InitRecipeList ==============
L0:            ExecutionFlow.Push(L2156);
L5:            int32 Temp_int_Loop_Counter_Variable = 0;
L28:           int32 Temp_int_Array_Index_Variable2 = 0;
L51:           TArray<TSubclassOf<FGRecipe>> mTArray<TSubclassOf<FGRecipe>> = [];
L62:           this->mBuildableManufacturer->GetAvailableRecipes([ref] mTArray<TSubclassOf<FGRecipe>>);
L103:          int32 mint32 = KismetArrayLibrary->Array_Length([ref] mTArray<TSubclassOf<FGRecipe>>);
L162:          bool mbool = Less_IntInt(Temp_int_Loop_Counter_Variable, mint32);
L200:          if (!mbool) goto L390;
L214:          Temp_int_Array_Index_Variable2 = Temp_int_Loop_Counter_Variable;
L241:          ExecutionFlow.Push(L2008);
L246:          mTArray<TSubclassOf<FGRecipe>> = [];
L257:          this->mBuildableManufacturer->GetAvailableRecipes([ref] mTArray<TSubclassOf<FGRecipe>>);
L298:          KismetArrayLibrary->Array_Get([ref] mTArray<TSubclassOf<FGRecipe>>, Temp_int_Array_Index_Variable2, [ref] mTSubclassOf<FGRecipe>);
L357:          this->AddUniqueRecipe([ref] this->mCategorizedRecipes, mTSubclassOf<FGRecipe>);
L389:          goto ExecutionFlow.Pop();
L390:          int32 Temp_int_Loop_Counter_Variable1 = 0;
L413:          int32 Temp_int_Array_Index_Variable = 0;
L436:          int32 mint321 = KismetArrayLibrary->Array_Length([ref] this->mCategorizedRecipes);
L495:          bool mbool1 = Less_IntInt(Temp_int_Loop_Counter_Variable1, mint321);
L533:          if (!mbool1) goto ExecutionFlow.Pop();
L543:          Temp_int_Array_Index_Variable = Temp_int_Loop_Counter_Variable1;
L570:          ExecutionFlow.Push(L1934);
L575:          int32 Temp_int_Loop_Counter_Variable2 = 0;
L598:          int32 Temp_int_Array_Index_Variable1 = 0;
L621:          KismetArrayLibrary->Array_Get([ref] this->mCategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct);
L680:          int32 mint322 = KismetArrayLibrary->Array_Length([ref] mItemCategoryRecipeStruct.Recipes_6_5C2C7BF54D78A483A81B2785C2CF7736);
L748:          bool mbool2 = Less_IntInt(Temp_int_Loop_Counter_Variable2, mint322);
L786:          if (!mbool2) goto ExecutionFlow.Pop();
L796:          Temp_int_Array_Index_Variable1 = Temp_int_Loop_Counter_Variable2;
L823:          ExecutionFlow.Push(L2082);
L828:          bool mbool3 = EqualEqual_IntInt(Temp_int_Array_Index_Variable1, 0);
L862:          if (!mbool3) goto L1366;
L876:          PlayerController* mPlayerController = this->GetOwningPlayer();
L900:          FGPlayerState* mFGPlayerState = Cast<Class /Script/FactoryGame.FGPlayerState>(mPlayerController->PlayerState);
L958:          bool mbool4 = mFGPlayerState;
L987:          TArray<TSubclassOf<FGItemCategory>> mTArray<TSubclassOf<FGItemCategory>> = mFGPlayerState->GetCollapsedItemCategories();
L1037:         KismetArrayLibrary->Array_Get([ref] this->mCategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct);
L1096:         FText mFText = FGItemCategory->GetCategoryName(mItemCategoryRecipeStruct.Category_5_48CE2A3C41089DC1E5DE39909CF17792);
L1164:         bool mbool5 = KismetArrayLibrary->Array_Contains([ref] mTArray<TSubclassOf<FGItemCategory>>, [ref] mItemCategoryRecipeStruct.Category_5_48CE2A3C41089DC1E5DE39909CF17792);
L1233:         this->CreateCategoryHeader(this->mVertBox, mFText, mbool5, [ref] mWidget_CraftBench_Category);
L1283:         Widget_CraftBench_Category* localCurrentCategory = mWidget_CraftBench_Category;
L1302:         mFScriptDelegate->BindUFunction(this, OnCategoryClicked);
L1325:         localCurrentCategory->OnClicked.AddUnique(mFScriptDelegate);
L1366:         PlayerController* mPlayerController1 = this->GetOwningPlayer();
L1390:         Widget_ManufacturingButton* mWidget_ManufacturingButton = WidgetBlueprintLibrary->Create(this, Widget_ManufacturingButton, mPlayerController1);
L1451:         KismetArrayLibrary->Array_Get([ref] this->mCategorizedRecipes, Temp_int_Array_Index_Variable, [ref] mItemCategoryRecipeStruct);
L1510:         KismetArrayLibrary->Array_Get([ref] mItemCategoryRecipeStruct.Recipes_6_5C2C7BF54D78A483A81B2785C2CF7736, Temp_int_Array_Index_Variable1, [ref] mTSubclassOf<FGRecipe>1);
L1578:         KismetSystemLibrary->SetClassPropertyByName(mWidget_ManufacturingButton, "mRecipeClass", mTSubclassOf<FGRecipe>1);
L1641:         KismetSystemLibrary->SetObjectPropertyByName(mWidget_ManufacturingButton, "mManufacturingWidget", this);
L1696:         localCurrentCategory->AddChildToContentWrapped(mWidget_ManufacturingButton);
L1741:         mFScriptDelegate1->BindUFunction(this, OnManufacturingRecipeHovered);
L1764:         mWidget_ManufacturingButton->OnManufacturingRecipeHovered.AddUnique(mFScriptDelegate1);
L1805:         mFScriptDelegate2->BindUFunction(this, OnManufacturingRecipeClicked);
L1828:         mWidget_ManufacturingButton->OnManufacturingRecipeClicked.AddUnique(mFScriptDelegate2);
L1869:         mFScriptDelegate3->BindUFunction(this, OnStopHoveringManufacturingRecipe);
L1892:         mWidget_ManufacturingButton->OnStopHoveringManufacturingRecipe.AddUnique(mFScriptDelegate3);
L1933:         goto ExecutionFlow.Pop();
L1934:         int32 mint323 = Add_IntInt(Temp_int_Loop_Counter_Variable1, 1);
L1976:         Temp_int_Loop_Counter_Variable1 = mint323;
L2003:         goto L436;
L2008:         int32 mint324 = Add_IntInt(Temp_int_Loop_Counter_Variable, 1);
L2050:         Temp_int_Loop_Counter_Variable = mint324;
L2077:         goto L51;
L2082:         int32 mint325 = Add_IntInt(Temp_int_Loop_Counter_Variable2, 1);
L2124:         Temp_int_Loop_Counter_Variable2 = mint325;
L2151:         goto L621;
============ END FUNCTION InitRecipeList ==============





============ BEGIN FUNCTION BndEvt__Widget_StandbyButton_K2Node_ComponentBoundEvent_12_OnStandbyClicked__DelegateSignature ==============
L0:            this->ExecuteUbergraph_Widget_Manufacturing(437);
============ END FUNCTION BndEvt__Widget_StandbyButton_K2Node_ComponentBoundEvent_12_OnStandbyClicked__DelegateSignature ==============





============ BEGIN FUNCTION Tick ==============
L0:            PERSISTENT_FRAME(StructProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_Event_MyGeometry) = MyGeometry;
L18:           PERSISTENT_FRAME(FloatProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_Event_InDeltaTime) = InDeltaTime;
L36:           this->ExecuteUbergraph_Widget_Manufacturing(461);
============ END FUNCTION Tick ==============





============ BEGIN FUNCTION OnNewRecipeSet ==============
L0:            PERSISTENT_FRAME(ClassProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_CustomEvent_NewRecipe) = newRecipe;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(1621);
============ END FUNCTION OnNewRecipeSet ==============





============ BEGIN FUNCTION Construct ==============
L0:            this->ExecuteUbergraph_Widget_Manufacturing(1886);
============ END FUNCTION Construct ==============





============ BEGIN FUNCTION Destruct ==============
L0:            this->ExecuteUbergraph_Widget_Manufacturing(2005);
============ END FUNCTION Destruct ==============





============ BEGIN FUNCTION BndEvt__Widget_Window_DarkMode_K2Node_ComponentBoundEvent_0_OnClose__DelegateSignature ==============
L0:            this->ExecuteUbergraph_Widget_Manufacturing(2034);
============ END FUNCTION BndEvt__Widget_Window_DarkMode_K2Node_ComponentBoundEvent_0_OnClose__DelegateSignature ==============





============ BEGIN FUNCTION BndEvt__Widget_Window_DarkMode_K2Node_ComponentBoundEvent_1_OnTabButtonClicked__DelegateSignature ==============
L0:            PERSISTENT_FRAME(IntProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_ComponentBoundEvent_ButtonIndex) = ButtonIndex;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(2039);
============ END FUNCTION BndEvt__Widget_Window_DarkMode_K2Node_ComponentBoundEvent_1_OnTabButtonClicked__DelegateSignature ==============





============ BEGIN FUNCTION OnReplicationDetailActorReplicated ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_CustomEvent_replicationDetailActorOwner) = replicationDetailActorOwner;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(2191);
============ END FUNCTION OnReplicationDetailActorReplicated ==============





============ BEGIN FUNCTION OnCategoryClicked ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_CustomEvent_Instigator) = Instigator;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(2247);
============ END FUNCTION OnCategoryClicked ==============





============ BEGIN FUNCTION OnModifierPressed ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_CustomEvent_owningWidget1) = owningWidget;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(2576);
============ END FUNCTION OnModifierPressed ==============





============ BEGIN FUNCTION Init ==============
L0:            this->ExecuteUbergraph_Widget_Manufacturing(2694);
============ END FUNCTION Init ==============





============ BEGIN FUNCTION OnModifierReleased ==============
L0:            PERSISTENT_FRAME(ObjectProperty /Game/FactoryGame/Buildable/-Shared/Widgets/Widget_Manufacturing.Widget_Manufacturing_C:ExecuteUbergraph_Widget_Manufacturing.K2Node_CustomEvent_owningWidget) = owningWidget;
L18:           this->ExecuteUbergraph_Widget_Manufacturing(2699);
============ END FUNCTION OnModifierReleased ==============





============ BEGIN FUNCTION ExecuteUbergraph_Widget_Manufacturing ==============
L10:           this->OnEscapePressed();
L38:           <End of Inlined Event Graph Function>;
L43:           PlayerController* mPlayerController = this->GetOwningPlayer();
L67:           FGPlayerController* mFGPlayerController = Cast<Class /Script/FactoryGame.FGPlayerController>(mPlayerController);
L103:          bool mbool = mFGPlayerController;
L132:          if (!mbool) goto L2699;
L146:          bool mbool1 = this->mBuildableManufacturer->IsProductionPaused();
L188:          bool mbool2 = Not_PreBool(mbool1);
L217:          BP_RemoteCallObject* mBP_RemoteCallObject = mFGPlayerController->GetRemoteCallObjectOfClass(BP_RemoteCallObject);
L268:          mBP_RemoteCallObject->Server_SetIsProductionPausedOnFactory(this->mBuildableManufacturer, mbool2);
L322:          mbool1 = this->mBuildableManufacturer->IsProductionPaused();
L364:          this->Widget_StandbyButton->SetStandbyButtonBrush(mbool1);
L409:          this->GetManufacturingWarningVisibility(this->mBuildableManufacturer);
L432:          <End of Inlined Event Graph Function>;
L437:          goto L43;
L442:          this->UpdateIOSlots();
L456:          <End of Inlined Event Graph Function>;
L461:          this->Tick(mGeometry, mfloat);
L489:          this->UpdateProductivityPercentage();
L503:          this->UpdateProductionStats();
L517:          <End of Inlined Event Graph Function>;
L522:          this->mFactory = this->mBuildableManufacturer;
L541:          this->InitRecipeList();
L555:          mFScriptDelegate->BindUFunction(this, OnNewRecipeSet);
L578:          this->mBuildableManufacturer->mCurrentRecipeChanged.AddUnique(mFScriptDelegate);
L619:          bool mbool3 = this->mBuildableManufacturer->HasAuthority();
L661:          if (!mbool3) goto L1467;
L675:          TSubclassOf<FGRecipe> mTSubclassOf<FGRecipe> = this->mBuildableManufacturer->GetCurrentRecipe();
L717:          bool mbool4 = KismetSystemLibrary->IsValidClass(mTSubclassOf<FGRecipe>);
L768:          if (!mbool4) goto L1536;
L782:          mTSubclassOf<FGRecipe> = this->mBuildableManufacturer->GetCurrentRecipe();
L824:          this->SetActivatedRecipe(mTSubclassOf<FGRecipe>);
L847:          this->Widget_SlidingTabs->SetActiveIndex(1, false);
L889:          this->Widget_Window_DarkMode->SetInventoryVisibility(true, false);
L927:          this->UpdateIOSlots();
L941:          this->UpdateOutputSlotInfo(this->mActivatedRecipe);
L964:          bool mbool5 = this->mBuildableManufacturer->IsProductionPaused();
L1006:         this->Widget_StandbyButton->SetStandbyButtonBrush(mbool5);
L1051:         this->GetManufacturingWarningVisibility(this->mBuildableManufacturer);
L1074:         mFScriptDelegate1->BindUFunction(this, OnInventorySlotStackMove);
L1097:         this->mOutput->OnMoveStack.AddUnique(mFScriptDelegate1);
L1138:         mFScriptDelegate1->BindUFunction(this, OnInventorySlotStackMove);
L1161:         this->Widget_Overclock->CostSlot_0->Widget_InventorySlot->OnMoveStack.AddUnique(mFScriptDelegate1);
L1246:         mFScriptDelegate1->BindUFunction(this, OnInventorySlotStackMove);
L1269:         this->Widget_Overclock->CostSlot_1->Widget_InventorySlot->OnMoveStack.AddUnique(mFScriptDelegate1);
L1354:         mFScriptDelegate1->BindUFunction(this, OnInventorySlotStackMove);
L1377:         this->Widget_Overclock->CostSlot_2->Widget_InventorySlot->OnMoveStack.AddUnique(mFScriptDelegate1);
L1462:         <End of Inlined Event Graph Function>;
L1467:         mFScriptDelegate2->BindUFunction(this, OnReplicationDetailActorReplicated);
L1490:         this->mBuildableManufacturer->OnReplicationDetailActorCreatedEvent.AddUnique(mFScriptDelegate2);
L1531:         goto L675;
L1536:         this->Widget_SlidingTabs->SetActiveIndex(0, false);
L1578:         this->Widget_Window_DarkMode->SetInventoryVisibility(false, false);
L1616:         <End of Inlined Event Graph Function>;
L1621:         bool mbool6 = NotEqual_ClassClass(mTSubclassOf<FGRecipe>1, this->mActivatedRecipe);
L1659:         if (!mbool6) goto L2699;
L1673:         this->SetActivatedRecipe(mTSubclassOf<FGRecipe>1);
L1696:         goto L442;
L1701:         this->Widget_Manufacturing_Warning->mManufacturer = this->mBuildableManufacturer;
L1742:         this->Widget_Overclock->mBuildableFactory = this->mBuildableManufacturer;
L1783:         mFScriptDelegate3->BindUFunction(this, OnModifierPressed);
L1806:         this->ModifierPressed.AddUnique(mFScriptDelegate3);
L1825:         mFScriptDelegate4->BindUFunction(this, OnModifierReleased);
L1848:         this->ModifierReleased.AddUnique(mFScriptDelegate4);
L1867:         this->GenerateOutputSlots();
L1881:         goto L522;
L1886:         this->Construct();
L1896:         this->UpdateWindowText();
L1910:         int32 mint32 = KismetArrayLibrary->Array_Add([ref] this->Output_DropArea->mInventorySlots, [ref] this->mOutput);
L2000:         <End of Inlined Event Graph Function>;
L2005:         this->Destruct();
L2015:         this->RemoveInputSlot();
L2029:         <End of Inlined Event Graph Function>;
L2034:         goto L10;
L2039:         bool Temp_bool_Variable = false;
L2050:         bool Temp_bool_Variable1 = true;
L2061:         int32 Temp_int_Variable = mint321;
L2088:         this->Widget_Window_DarkMode->SetInventoryVisibility(switch (Temp_int_Variable) {
case 0 -> Temp_bool_Variable;
case 1 -> Temp_bool_Variable1;
default -> mbool7;
}, true);
L2186:         <End of Inlined Event Graph Function>;
L2191:         this->ReconstructIOSlots();
L2205:         this->UpdateIOSlots();
L2219:         this->UpdateOutputSlotInfo(this->mActivatedRecipe);
L2242:         <End of Inlined Event Graph Function>;
L2247:         PlayerController* mPlayerController1 = this->GetOwningPlayer();
L2271:         FGPlayerState* mFGPlayerState = Cast<Class /Script/FactoryGame.FGPlayerState>(mPlayerController1->PlayerState);
L2329:         bool mbool8 = mFGPlayerState;
L2358:         if (!mbool8) goto L2699;
L2372:         int32 mint322 = this->mVertBox->GetChildIndex(mWidget_CraftBench_Category);
L2431:         KismetArrayLibrary->Array_Get([ref] this->mCategorizedRecipes, mint322, [ref] mItemCategoryRecipeStruct);
L2490:         mFGPlayerState->SetItemCategoryCollapsed(mItemCategoryRecipeStruct.Category_5_48CE2A3C41089DC1E5DE39909CF17792, mWidget_CraftBench_Category->mIsCollapsed);
L2571:         <End of Inlined Event Graph Function>;
L2576:         <End of Inlined Event Graph Function>;
L2581:         this->Init();
L2591:         FGBuildableManufacturer* mFGBuildableManufacturer = Cast<Class /Script/FactoryGame.FGBuildableManufacturer>(this->mInteractObject);
L2627:         bool mbool9 = mFGBuildableManufacturer;
L2656:         if (!mbool9) goto L2699;
L2670:         this->mBuildableManufacturer = mFGBuildableManufacturer;
L2689:         goto L1701;
L2694:         goto L2581;
============ END FUNCTION ExecuteUbergraph_Widget_Manufacturing ==============
